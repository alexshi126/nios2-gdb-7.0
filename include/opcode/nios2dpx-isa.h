/*
 * This file defines  instruction set constants.
 * To include it in assembly code (.S file), define ALT_ASM_SRC
 * before including this file.
 *
 * This file is automatically generated by gen_isa.pl - do not edit
 */

#ifndef _NIOS2DPX_ISA_H_
#define _NIOS2DPX_ISA_H_

#ifndef _ISA_CONSTANTS_
#define _ISA_CONSTANTS_
/* CPU ISA Constants */
#define DISPLAY_INST_TRACE 1
#define DISPLAY_MEM_TRAFFIC 2
#define AT_REGNUM 1
#define AT_REGNUM_INT 1
#define BRETADDR_REGNUM 30
#define BRETADDR_REGNUM_INT 30
#define BT_REGNUM 25
#define BT_REGNUM_INT 25
#define DATAPATH_LOG2_SZ 5
#define DATAPATH_LSB 0
#define DATAPATH_MSB 31
#define DATAPATH_SZ 32
#define ERETADDR_REGNUM 29
#define ERETADDR_REGNUM_INT 29
#define ET_REGNUM 24
#define ET_REGNUM_INT 24
#define FP_REGNUM 28
#define FP_REGNUM_INT 28
#define GP_REGNUM 26
#define GP_REGNUM_INT 26
#define IW_SZ 32
#define REGNUM 64
#define REGNUM_SZ 6
#define RETADDR_REGNUM 31
#define RETADDR_REGNUM_INT 31
#define RF_ADDR_SZ 5
#define RF_NUM_REG 32
#define SP_REGNUM 27
#define SP_REGNUM_INT 27
#endif /* _ISA_CONSTANTS_ */

/*
 * Control register macros
 */

/* CPUID register */
#define CPUID_REG_REGNUM 5
#define CPUID_REG_LSB 0
#define CPUID_REG_MSB 31
#define CPUID_REG_SZ 32
#define CPUID_REG_UNSHIFTED_MASK 0xffffffff
#define CPUID_REG_SHIFTED_MASK 0xffffffff
#define CPUID_REG_MASK (CPUID_REG_SHIFTED_MASK)
#define CPUID_REG_CPUID_LSB 0
#define CPUID_REG_CPUID_MSB 31
#define CPUID_REG_CPUID_SZ 32
#define CPUID_REG_CPUID_UNSHIFTED_MASK 0xffffffff
#define CPUID_REG_CPUID_SHIFTED_MASK 0xffffffff
#define CPUID_REG_CPUID_MASK (CPUID_REG_CPUID_UNSHIFTED_MASK)
#define GET_CPUID_REG_CPUID(Reg) \
    (((Reg) >> CPUID_REG_CPUID_LSB) & CPUID_REG_CPUID_UNSHIFTED_MASK)
#define SET_CPUID_REG_CPUID(Reg, Val) \
    Reg = (((Reg) & (~CPUID_REG_CPUID_SHIFTED_MASK)) | \
         (((Val) & CPUID_REG_CPUID_UNSHIFTED_MASK) << CPUID_REG_CPUID_LSB))

/* THREADNUM register */
#define THREADNUM_REG_REGNUM 16
#define THREADNUM_REG_LSB 0
#define THREADNUM_REG_MSB 7
#define THREADNUM_REG_SZ 8
#define THREADNUM_REG_UNSHIFTED_MASK 0xff
#define THREADNUM_REG_SHIFTED_MASK 0xff
#define THREADNUM_REG_MASK (THREADNUM_REG_SHIFTED_MASK)
#define THREADNUM_REG_THREADNUM_LSB 0
#define THREADNUM_REG_THREADNUM_MSB 7
#define THREADNUM_REG_THREADNUM_SZ 8
#define THREADNUM_REG_THREADNUM_UNSHIFTED_MASK 0xff
#define THREADNUM_REG_THREADNUM_SHIFTED_MASK 0xff
#define THREADNUM_REG_THREADNUM_MASK (THREADNUM_REG_THREADNUM_UNSHIFTED_MASK)
#define GET_THREADNUM_REG_THREADNUM(Reg) \
    (((Reg) >> THREADNUM_REG_THREADNUM_LSB) & THREADNUM_REG_THREADNUM_UNSHIFTED_MASK)
#define SET_THREADNUM_REG_THREADNUM(Reg, Val) \
    Reg = (((Reg) & (~THREADNUM_REG_THREADNUM_SHIFTED_MASK)) | \
         (((Val) & THREADNUM_REG_THREADNUM_UNSHIFTED_MASK) << THREADNUM_REG_THREADNUM_LSB))
#define THREADNUM_REG_RSV0_LSB 8
#define THREADNUM_REG_RSV0_MSB 31
#define THREADNUM_REG_RSV0_SZ 24
#define THREADNUM_REG_RSV0_UNSHIFTED_MASK 0xffffff
#define THREADNUM_REG_RSV0_SHIFTED_MASK 0xffffff00
#define THREADNUM_REG_RSV0_MASK (THREADNUM_REG_RSV0_UNSHIFTED_MASK)
#define GET_THREADNUM_REG_RSV0(Reg) \
    (((Reg) >> THREADNUM_REG_RSV0_LSB) & THREADNUM_REG_RSV0_UNSHIFTED_MASK)
#define SET_THREADNUM_REG_RSV0(Reg, Val) \
    Reg = (((Reg) & (~THREADNUM_REG_RSV0_SHIFTED_MASK)) | \
         (((Val) & THREADNUM_REG_RSV0_UNSHIFTED_MASK) << THREADNUM_REG_RSV0_LSB))

/*
 * Instruction field macros
 */
#define IW_OP_LSB 28
#define IW_OP_MSB 31
#define IW_OP_SZ 4
#define IW_OP_UNSHIFTED_MASK 0xf
#define IW_OP_SHIFTED_MASK 0xf0000000
#define IW_OP_MASK (IW_OP_UNSHIFTED_MASK)
#define GET_IW_OP(Iw) \
    (((Iw) >> IW_OP_LSB) & IW_OP_UNSHIFTED_MASK)
#define SET_IW_OP(Iw, Val) \
    Iw = (((Iw) & (~IW_OP_SHIFTED_MASK)) | \
         (((Val) & IW_OP_UNSHIFTED_MASK) << IW_OP_LSB))
#define IW_A_LSB 22
#define IW_A_MSB 27
#define IW_A_SZ 6
#define IW_A_UNSHIFTED_MASK 0x3f
#define IW_A_SHIFTED_MASK 0xfc00000
#define IW_A_MASK (IW_A_UNSHIFTED_MASK)
#define GET_IW_A(Iw) \
    (((Iw) >> IW_A_LSB) & IW_A_UNSHIFTED_MASK)
#define SET_IW_A(Iw, Val) \
    Iw = (((Iw) & (~IW_A_SHIFTED_MASK)) | \
         (((Val) & IW_A_UNSHIFTED_MASK) << IW_A_LSB))
#define IW_B_LSB 16
#define IW_B_MSB 21
#define IW_B_SZ 6
#define IW_B_UNSHIFTED_MASK 0x3f
#define IW_B_SHIFTED_MASK 0x3f0000
#define IW_B_MASK (IW_B_UNSHIFTED_MASK)
#define GET_IW_B(Iw) \
    (((Iw) >> IW_B_LSB) & IW_B_UNSHIFTED_MASK)
#define SET_IW_B(Iw, Val) \
    Iw = (((Iw) & (~IW_B_SHIFTED_MASK)) | \
         (((Val) & IW_B_UNSHIFTED_MASK) << IW_B_LSB))
#define IW_C_LSB 10
#define IW_C_MSB 15
#define IW_C_SZ 6
#define IW_C_UNSHIFTED_MASK 0x3f
#define IW_C_SHIFTED_MASK 0xfc00
#define IW_C_MASK (IW_C_UNSHIFTED_MASK)
#define GET_IW_C(Iw) \
    (((Iw) >> IW_C_LSB) & IW_C_UNSHIFTED_MASK)
#define SET_IW_C(Iw, Val) \
    Iw = (((Iw) & (~IW_C_SHIFTED_MASK)) | \
         (((Val) & IW_C_UNSHIFTED_MASK) << IW_C_LSB))
#define IW_IX_LSB 20
#define IW_IX_MSB 21
#define IW_IX_SZ 2
#define IW_IX_UNSHIFTED_MASK 0x3
#define IW_IX_SHIFTED_MASK 0x300000
#define IW_IX_MASK (IW_IX_UNSHIFTED_MASK)
#define GET_IW_IX(Iw) \
    (((Iw) >> IW_IX_LSB) & IW_IX_UNSHIFTED_MASK)
#define SET_IW_IX(Iw, Val) \
    Iw = (((Iw) & (~IW_IX_SHIFTED_MASK)) | \
         (((Val) & IW_IX_UNSHIFTED_MASK) << IW_IX_LSB))
#define IW_IMM20_LSB 0
#define IW_IMM20_MSB 19
#define IW_IMM20_SZ 20
#define IW_IMM20_UNSHIFTED_MASK 0xfffff
#define IW_IMM20_SHIFTED_MASK 0xfffff
#define IW_IMM20_MASK (IW_IMM20_UNSHIFTED_MASK)
#define GET_IW_IMM20(Iw) \
    (((Iw) >> IW_IMM20_LSB) & IW_IMM20_UNSHIFTED_MASK)
#define SET_IW_IMM20(Iw, Val) \
    Iw = (((Iw) & (~IW_IMM20_SHIFTED_MASK)) | \
         (((Val) & IW_IMM20_UNSHIFTED_MASK) << IW_IMM20_LSB))
#define IW_IMM26_LSB 22
#define IW_IMM26_MSB 27
#define IW_IMM26_SZ 6
#define IW_IMM26_UNSHIFTED_MASK 0x3f
#define IW_IMM26_SHIFTED_MASK 0xfc00000
#define IW_IMM26_MASK (IW_IMM26_UNSHIFTED_MASK)
#define GET_IW_IMM26(Iw) \
    (((Iw) >> IW_IMM26_LSB) & IW_IMM26_UNSHIFTED_MASK)
#define SET_IW_IMM26(Iw, Val) \
    Iw = (((Iw) & (~IW_IMM26_SHIFTED_MASK)) | \
         (((Val) & IW_IMM26_UNSHIFTED_MASK) << IW_IMM26_LSB))
#define IW_IMM16_LSB 0
#define IW_IMM16_MSB 15
#define IW_IMM16_SZ 16
#define IW_IMM16_UNSHIFTED_MASK 0xffff
#define IW_IMM16_SHIFTED_MASK 0xffff
#define IW_IMM16_MASK (IW_IMM16_UNSHIFTED_MASK)
#define GET_IW_IMM16(Iw) \
    (((Iw) >> IW_IMM16_LSB) & IW_IMM16_UNSHIFTED_MASK)
#define SET_IW_IMM16(Iw, Val) \
    Iw = (((Iw) & (~IW_IMM16_SHIFTED_MASK)) | \
         (((Val) & IW_IMM16_UNSHIFTED_MASK) << IW_IMM16_LSB))
#define IW_I12_LSB 12
#define IW_I12_MSB 15
#define IW_I12_SZ 4
#define IW_I12_UNSHIFTED_MASK 0xf
#define IW_I12_SHIFTED_MASK 0xf000
#define IW_I12_MASK (IW_I12_UNSHIFTED_MASK)
#define GET_IW_I12(Iw) \
    (((Iw) >> IW_I12_LSB) & IW_I12_UNSHIFTED_MASK)
#define SET_IW_I12(Iw, Val) \
    Iw = (((Iw) & (~IW_I12_SHIFTED_MASK)) | \
         (((Val) & IW_I12_UNSHIFTED_MASK) << IW_I12_LSB))
#define IW_IMM12_LSB 0
#define IW_IMM12_MSB 11
#define IW_IMM12_SZ 12
#define IW_IMM12_UNSHIFTED_MASK 0xfff
#define IW_IMM12_SHIFTED_MASK 0xfff
#define IW_IMM12_MASK (IW_IMM12_UNSHIFTED_MASK)
#define GET_IW_IMM12(Iw) \
    (((Iw) >> IW_IMM12_LSB) & IW_IMM12_UNSHIFTED_MASK)
#define SET_IW_IMM12(Iw, Val) \
    Iw = (((Iw) & (~IW_IMM12_SHIFTED_MASK)) | \
         (((Val) & IW_IMM12_UNSHIFTED_MASK) << IW_IMM12_LSB))
#define IW_IMM12_LSB_LSB 0
#define IW_IMM12_LSB_MSB 4
#define IW_IMM12_LSB_SZ 5
#define IW_IMM12_LSB_UNSHIFTED_MASK 0x1f
#define IW_IMM12_LSB_SHIFTED_MASK 0x1f
#define IW_IMM12_LSB_MASK (IW_IMM12_LSB_UNSHIFTED_MASK)
#define GET_IW_IMM12_LSB(Iw) \
    (((Iw) >> IW_IMM12_LSB_LSB) & IW_IMM12_LSB_UNSHIFTED_MASK)
#define SET_IW_IMM12_LSB(Iw, Val) \
    Iw = (((Iw) & (~IW_IMM12_LSB_SHIFTED_MASK)) | \
         (((Val) & IW_IMM12_LSB_UNSHIFTED_MASK) << IW_IMM12_LSB_LSB))
#define IW_IMM12_MSB_LSB 5
#define IW_IMM12_MSB_MSB 9
#define IW_IMM12_MSB_SZ 5
#define IW_IMM12_MSB_UNSHIFTED_MASK 0x1f
#define IW_IMM12_MSB_SHIFTED_MASK 0x3e0
#define IW_IMM12_MSB_MASK (IW_IMM12_MSB_UNSHIFTED_MASK)
#define GET_IW_IMM12_MSB(Iw) \
    (((Iw) >> IW_IMM12_MSB_LSB) & IW_IMM12_MSB_UNSHIFTED_MASK)
#define SET_IW_IMM12_MSB(Iw, Val) \
    Iw = (((Iw) & (~IW_IMM12_MSB_SHIFTED_MASK)) | \
         (((Val) & IW_IMM12_MSB_UNSHIFTED_MASK) << IW_IMM12_MSB_LSB))
#define IW_DCACHE_LSB 16
#define IW_DCACHE_MSB 17
#define IW_DCACHE_SZ 2
#define IW_DCACHE_UNSHIFTED_MASK 0x3
#define IW_DCACHE_SHIFTED_MASK 0x30000
#define IW_DCACHE_MASK (IW_DCACHE_UNSHIFTED_MASK)
#define GET_IW_DCACHE(Iw) \
    (((Iw) >> IW_DCACHE_LSB) & IW_DCACHE_UNSHIFTED_MASK)
#define SET_IW_DCACHE(Iw, Val) \
    Iw = (((Iw) & (~IW_DCACHE_SHIFTED_MASK)) | \
         (((Val) & IW_DCACHE_UNSHIFTED_MASK) << IW_DCACHE_LSB))
#define IW_I5_LSB 5
#define IW_I5_MSB 7
#define IW_I5_SZ 3
#define IW_I5_UNSHIFTED_MASK 0x7
#define IW_I5_SHIFTED_MASK 0xe0
#define IW_I5_MASK (IW_I5_UNSHIFTED_MASK)
#define GET_IW_I5(Iw) \
    (((Iw) >> IW_I5_LSB) & IW_I5_UNSHIFTED_MASK)
#define SET_IW_I5(Iw, Val) \
    Iw = (((Iw) & (~IW_I5_SHIFTED_MASK)) | \
         (((Val) & IW_I5_UNSHIFTED_MASK) << IW_I5_LSB))
#define IW_IMM5_LSB 0
#define IW_IMM5_MSB 4
#define IW_IMM5_SZ 5
#define IW_IMM5_UNSHIFTED_MASK 0x1f
#define IW_IMM5_SHIFTED_MASK 0x1f
#define IW_IMM5_MASK (IW_IMM5_UNSHIFTED_MASK)
#define GET_IW_IMM5(Iw) \
    (((Iw) >> IW_IMM5_LSB) & IW_IMM5_UNSHIFTED_MASK)
#define SET_IW_IMM5(Iw, Val) \
    Iw = (((Iw) & (~IW_IMM5_SHIFTED_MASK)) | \
         (((Val) & IW_IMM5_UNSHIFTED_MASK) << IW_IMM5_LSB))
#define IW_R3_LSB 0
#define IW_R3_MSB 5
#define IW_R3_SZ 6
#define IW_R3_UNSHIFTED_MASK 0x3f
#define IW_R3_SHIFTED_MASK 0x3f
#define IW_R3_MASK (IW_R3_UNSHIFTED_MASK)
#define GET_IW_R3(Iw) \
    (((Iw) >> IW_R3_LSB) & IW_R3_UNSHIFTED_MASK)
#define SET_IW_R3(Iw, Val) \
    Iw = (((Iw) & (~IW_R3_SHIFTED_MASK)) | \
         (((Val) & IW_R3_UNSHIFTED_MASK) << IW_R3_LSB))
#define IW_CONTROL_REGNUM_LSB 16
#define IW_CONTROL_REGNUM_MSB 21
#define IW_CONTROL_REGNUM_SZ 6
#define IW_CONTROL_REGNUM_UNSHIFTED_MASK 0x3f
#define IW_CONTROL_REGNUM_SHIFTED_MASK 0x3f0000
#define IW_CONTROL_REGNUM_MASK (IW_CONTROL_REGNUM_UNSHIFTED_MASK)
#define GET_IW_CONTROL_REGNUM(Iw) \
    (((Iw) >> IW_CONTROL_REGNUM_LSB) & IW_CONTROL_REGNUM_UNSHIFTED_MASK)
#define SET_IW_CONTROL_REGNUM(Iw, Val) \
    Iw = (((Iw) & (~IW_CONTROL_REGNUM_SHIFTED_MASK)) | \
         (((Val) & IW_CONTROL_REGNUM_UNSHIFTED_MASK) << IW_CONTROL_REGNUM_LSB))
#define IW_MEMSZ_LSB 12
#define IW_MEMSZ_MSB 13
#define IW_MEMSZ_SZ 2
#define IW_MEMSZ_UNSHIFTED_MASK 0x3
#define IW_MEMSZ_SHIFTED_MASK 0x3000
#define IW_MEMSZ_MASK (IW_MEMSZ_UNSHIFTED_MASK)
#define GET_IW_MEMSZ(Iw) \
    (((Iw) >> IW_MEMSZ_LSB) & IW_MEMSZ_UNSHIFTED_MASK)
#define SET_IW_MEMSZ(Iw, Val) \
    Iw = (((Iw) & (~IW_MEMSZ_SHIFTED_MASK)) | \
         (((Val) & IW_MEMSZ_UNSHIFTED_MASK) << IW_MEMSZ_LSB))
#define IW_CUSTOM_N_LSB 0
#define IW_CUSTOM_N_MSB 7
#define IW_CUSTOM_N_SZ 8
#define IW_CUSTOM_N_UNSHIFTED_MASK 0xff
#define IW_CUSTOM_N_SHIFTED_MASK 0xff
#define IW_CUSTOM_N_MASK (IW_CUSTOM_N_UNSHIFTED_MASK)
#define GET_IW_CUSTOM_N(Iw) \
    (((Iw) >> IW_CUSTOM_N_LSB) & IW_CUSTOM_N_UNSHIFTED_MASK)
#define SET_IW_CUSTOM_N(Iw, Val) \
    Iw = (((Iw) & (~IW_CUSTOM_N_SHIFTED_MASK)) | \
         (((Val) & IW_CUSTOM_N_UNSHIFTED_MASK) << IW_CUSTOM_N_LSB))
#define IW_CUSTOM_READRA_LSB 27
#define IW_CUSTOM_READRA_MSB 27
#define IW_CUSTOM_READRA_SZ 1
#define IW_CUSTOM_READRA_UNSHIFTED_MASK 0x1
#define IW_CUSTOM_READRA_SHIFTED_MASK 0x8000000
#define IW_CUSTOM_READRA_MASK (IW_CUSTOM_READRA_UNSHIFTED_MASK)
#define GET_IW_CUSTOM_READRA(Iw) \
    (((Iw) >> IW_CUSTOM_READRA_LSB) & IW_CUSTOM_READRA_UNSHIFTED_MASK)
#define SET_IW_CUSTOM_READRA(Iw, Val) \
    Iw = (((Iw) & (~IW_CUSTOM_READRA_SHIFTED_MASK)) | \
         (((Val) & IW_CUSTOM_READRA_UNSHIFTED_MASK) << IW_CUSTOM_READRA_LSB))
#define IW_CUSTOM_READRB_LSB 21
#define IW_CUSTOM_READRB_MSB 21
#define IW_CUSTOM_READRB_SZ 1
#define IW_CUSTOM_READRB_UNSHIFTED_MASK 0x1
#define IW_CUSTOM_READRB_SHIFTED_MASK 0x200000
#define IW_CUSTOM_READRB_MASK (IW_CUSTOM_READRB_UNSHIFTED_MASK)
#define GET_IW_CUSTOM_READRB(Iw) \
    (((Iw) >> IW_CUSTOM_READRB_LSB) & IW_CUSTOM_READRB_UNSHIFTED_MASK)
#define SET_IW_CUSTOM_READRB(Iw, Val) \
    Iw = (((Iw) & (~IW_CUSTOM_READRB_SHIFTED_MASK)) | \
         (((Val) & IW_CUSTOM_READRB_UNSHIFTED_MASK) << IW_CUSTOM_READRB_LSB))
#define IW_CUSTOM_WRITERC_LSB 15
#define IW_CUSTOM_WRITERC_MSB 15
#define IW_CUSTOM_WRITERC_SZ 1
#define IW_CUSTOM_WRITERC_UNSHIFTED_MASK 0x1
#define IW_CUSTOM_WRITERC_SHIFTED_MASK 0x8000
#define IW_CUSTOM_WRITERC_MASK (IW_CUSTOM_WRITERC_UNSHIFTED_MASK)
#define GET_IW_CUSTOM_WRITERC(Iw) \
    (((Iw) >> IW_CUSTOM_WRITERC_LSB) & IW_CUSTOM_WRITERC_UNSHIFTED_MASK)
#define SET_IW_CUSTOM_WRITERC(Iw, Val) \
    Iw = (((Iw) & (~IW_CUSTOM_WRITERC_SHIFTED_MASK)) | \
         (((Val) & IW_CUSTOM_WRITERC_UNSHIFTED_MASK) << IW_CUSTOM_WRITERC_LSB))
#define IW_CUSTOM_A_LSB 22
#define IW_CUSTOM_A_MSB 26
#define IW_CUSTOM_A_SZ 5
#define IW_CUSTOM_A_UNSHIFTED_MASK 0x1f
#define IW_CUSTOM_A_SHIFTED_MASK 0x7c00000
#define IW_CUSTOM_A_MASK (IW_CUSTOM_A_UNSHIFTED_MASK)
#define GET_IW_CUSTOM_A(Iw) \
    (((Iw) >> IW_CUSTOM_A_LSB) & IW_CUSTOM_A_UNSHIFTED_MASK)
#define SET_IW_CUSTOM_A(Iw, Val) \
    Iw = (((Iw) & (~IW_CUSTOM_A_SHIFTED_MASK)) | \
         (((Val) & IW_CUSTOM_A_UNSHIFTED_MASK) << IW_CUSTOM_A_LSB))
#define IW_CUSTOM_B_LSB 16
#define IW_CUSTOM_B_MSB 20
#define IW_CUSTOM_B_SZ 5
#define IW_CUSTOM_B_UNSHIFTED_MASK 0x1f
#define IW_CUSTOM_B_SHIFTED_MASK 0x1f0000
#define IW_CUSTOM_B_MASK (IW_CUSTOM_B_UNSHIFTED_MASK)
#define GET_IW_CUSTOM_B(Iw) \
    (((Iw) >> IW_CUSTOM_B_LSB) & IW_CUSTOM_B_UNSHIFTED_MASK)
#define SET_IW_CUSTOM_B(Iw, Val) \
    Iw = (((Iw) & (~IW_CUSTOM_B_SHIFTED_MASK)) | \
         (((Val) & IW_CUSTOM_B_UNSHIFTED_MASK) << IW_CUSTOM_B_LSB))
#define IW_CUSTOM_C_LSB 10
#define IW_CUSTOM_C_MSB 14
#define IW_CUSTOM_C_SZ 5
#define IW_CUSTOM_C_UNSHIFTED_MASK 0x1f
#define IW_CUSTOM_C_SHIFTED_MASK 0x7c00
#define IW_CUSTOM_C_MASK (IW_CUSTOM_C_UNSHIFTED_MASK)
#define GET_IW_CUSTOM_C(Iw) \
    (((Iw) >> IW_CUSTOM_C_LSB) & IW_CUSTOM_C_UNSHIFTED_MASK)
#define SET_IW_CUSTOM_C(Iw, Val) \
    Iw = (((Iw) & (~IW_CUSTOM_C_SHIFTED_MASK)) | \
         (((Val) & IW_CUSTOM_C_UNSHIFTED_MASK) << IW_CUSTOM_C_LSB))
#define IW_IS_CUSTOM_LSB 9
#define IW_IS_CUSTOM_MSB 9
#define IW_IS_CUSTOM_SZ 1
#define IW_IS_CUSTOM_UNSHIFTED_MASK 0x1
#define IW_IS_CUSTOM_SHIFTED_MASK 0x200
#define IW_IS_CUSTOM_MASK (IW_IS_CUSTOM_UNSHIFTED_MASK)
#define GET_IW_IS_CUSTOM(Iw) \
    (((Iw) >> IW_IS_CUSTOM_LSB) & IW_IS_CUSTOM_UNSHIFTED_MASK)
#define SET_IW_IS_CUSTOM(Iw, Val) \
    Iw = (((Iw) & (~IW_IS_CUSTOM_SHIFTED_MASK)) | \
         (((Val) & IW_IS_CUSTOM_UNSHIFTED_MASK) << IW_IS_CUSTOM_LSB))

/* OP table instruction opcode values (index is OP field) */
#define NUM_OP_INSTS 16
#ifndef ALT_ASM_SRC
extern const char* op_names[NUM_OP_INSTS];
#endif /* ALT_ASM_SRC */

/* OP table instruction values */
#define OP_IX 0
#define OP_I12A 1
#define OP_I12B 2
#define OP_R3 3
#define OP_SNDI 4
#define OP_RCVI 5
#define OP_ANDCI 8
#define OP_ANDI 9
#define OP_ORI 10
#define OP_XORI 11
#define OP_ANDCHI 12
#define OP_ANDHI 13
#define OP_ORHI 14
#define OP_XORHI 15

/* Macros to detect instructions in child tables */
#define IS_IX_INST(Iw) ((GET_IW_OP(Iw) == OP_IX))
#define IS_I12A_INST(Iw) ((GET_IW_OP(Iw) == OP_I12A))
#define IS_I12B_INST(Iw) ((GET_IW_OP(Iw) == OP_I12B))
#define IS_R3_INST(Iw) ((GET_IW_OP(Iw) == OP_R3))

/* IX table instruction opcode values (index is IX field) */
#define NUM_IX_INSTS 4
#ifndef ALT_ASM_SRC
extern const char* ix_names[NUM_IX_INSTS];
#endif /* ALT_ASM_SRC */

/* IX table instruction values */
#define IX_CALL 0
#define IX_JMPI 1
#define IX_MOVHI20 2

/* I12A table instruction opcode values (index is I12 field) */
#define NUM_I12A_INSTS 16
#ifndef ALT_ASM_SRC
extern const char* i12a_names[NUM_I12A_INSTS];
#endif /* ALT_ASM_SRC */

/* I12A table instruction values */
#define I12A_I5 0
#define I12A_CMPGEI 1
#define I12A_CMPLTI 2
#define I12A_CMPNEI 3
#define I12A_CMPEQI 4
#define I12A_CMPGEUI 5
#define I12A_CMPLTUI 6
#define I12A_BGE 9
#define I12A_BLT 10
#define I12A_BNE 11
#define I12A_BEQ 12
#define I12A_BGEU 13
#define I12A_BLTU 14

/* Macros to detect instructions in child tables */
#define IS_I5_INST(Iw) (((GET_IW_I12(Iw) == I12A_I5)) && IS_I12A_INST(Iw))

/* I12B table instruction opcode values (index is I12 field) */
#define NUM_I12B_INSTS 16
#ifndef ALT_ASM_SRC
extern const char* i12b_names[NUM_I12B_INSTS];
#endif /* ALT_ASM_SRC */

/* I12B table instruction values */
#define I12B_LDB 0
#define I12B_LDH 1
#define I12B_LDW 2
#define I12B_ADDI 3
#define I12B_LDBU 4
#define I12B_LDHU 5
#define I12B_DCACHE 7
#define I12B_STB 8
#define I12B_STH 9
#define I12B_STW 10
#define I12B_MULI 11
#define I12B_INSERT 12
#define I12B_EXTRACT 14
#define I12B_MERGE 15

/* Macros to detect instructions in child tables */
#define IS_DCACHE_INST(Iw) (((GET_IW_I12(Iw) == I12B_DCACHE)) && IS_I12B_INST(Iw))

/* I5 table instruction opcode values (index is I5 field) */
#define NUM_I5_INSTS 8
#ifndef ALT_ASM_SRC
extern const char* i5_names[NUM_I5_INSTS];
#endif /* ALT_ASM_SRC */

/* I5 table instruction values */
#define I5_ROLI 0
#define I5_SLLI 2
#define I5_SRLI 3
#define I5_TRAP 4
#define I5_BREAK 5
#define I5_SRAI 7

/* R3 table instruction opcode values (index is R3 field) */
#define NUM_R3_INSTS 64
#ifndef ALT_ASM_SRC
extern const char* r3_names[NUM_R3_INSTS];
#endif /* ALT_ASM_SRC */

/* R3 table instruction values */
#define R3_ERET 1
#define R3_FORK 2
#define R3_ROL 4
#define R3_RET 5
#define R3_NOR 6
#define R3_MULXUU 7
#define R3_CMPGE 8
#define R3_BRET 9
#define R3_EXIT 10
#define R3_ROR 12
#define R3_JMP 13
#define R3_AND 14
#define R3_CMPLT 16
#define R3_CIDALLOC 18
#define R3_SLL 20
#define R3_NEXTPC 21
#define R3_OR 22
#define R3_MULXSU 23
#define R3_CMPNE 24
#define R3_SRL 28
#define R3_CALLR 29
#define R3_XOR 30
#define R3_MULXSS 31
#define R3_CMPEQ 32
#define R3_SND 34
#define R3_RDCTL 38
#define R3_MUL 39
#define R3_CMPGEU 40
#define R3_RCV 42
#define R3_WRCTL 46
#define R3_CMPLTU 48
#define R3_ADD 49
#define R3_TXALLOC 50
#define R3_JREL 53
#define R3_SUB 57
#define R3_RXFREE 58
#define R3_SRA 60

/* DCACHE table instruction opcode values (index is DCACHE field) */
#define NUM_DCACHE_INSTS 4
#ifndef ALT_ASM_SRC
extern const char* dcache_names[NUM_DCACHE_INSTS];
#endif /* ALT_ASM_SRC */

/* DCACHE table instruction values */
#define DCACHE_INITD 0
#define DCACHE_INITDA 1
#define DCACHE_FLUSHD 2
#define DCACHE_FLUSHDA 3

/* Instruction Constants */
#define IW_MEMSZ_BYTE 0x0
#define IW_MEMSZ_HWORD 0x1
#define IW_MEMSZ_WORD_MSB 0x1

#define IMM26_HI_LSB (20)
#define IMM26_HI_SZ (6)
#define IMM26_HI_MSB (25)
#define IMM26_HI_UNSHIFTED_MASK (0x3f)
#define IMM26_HI_SHIFTED_MASK (0x3f00000)
#define IMM26_HI_MASK (IMM26_HI_UNSHIFTED_MASK)
#define GET_IMM26_HI(Iw) \
   (((Iw) >> IMM26_HI_LSB) & IMM26_HI_UNSHIFTED_MASK)
#define SET_IMM26_HI(Iw, Val) \
   Iw = (((Iw) & (~IMM26_HI_SHIFTED_MASK)) | \
        (((Val) & IMM26_HI_UNSHIFTED_MASK) << IMM26_HI_LSB)) 

#define GET_IX_IMM26(Iw) \
   ((Iw & IW_IMM20_UNSHIFTED_MASK) | ((Iw & IW_IMM26_SHIFTED_MASK) >> 2))

#define OP_CUSTOM       OP_R3

#define IS_CUSTOM_INST(Iw) \
                ((GET_IW_OP(Iw) == OP_CUSTOM) &&   \
                 (GET_NIOS2_6B_IW_IS_CUSTOM(Iw)))

/* Macros to generate the IW for different formats. */
#define GET_IX_FORMAT_IW(op, a, ix, imm20)          \
            (((op      & IW_OP_MASK   ) << IW_OP_LSB   ) |        \
            ((a        & IW_A_MASK    ) << IW_A_LSB    ) |        \
            ((ix       & IW_IX_MASK   ) << IW_IX_LSB   ) |        \
            ((imm20    & IW_IMM20_MASK) << IW_IMM20_LSB))

#define GET_IX_IMM26_FORMAT_IW(op, ix, imm26)    \
            (((op      & IW_OP_MASK   ) << IW_OP_LSB   ) |                        \
            ((ix       & IW_IX_MASK   ) << IW_IX_LSB   ) |                        \
            ((GET_IMM26_HI(imm26) & IW_IMM26_MASK) << IW_IMM26_LSB) |    \
            ((imm26 & IW_IMM20_MASK   ) << IW_IMM20_LSB))

#define GET_IMM16_FORMAT_IW(op, a, b, imm16)        \
            (((op      & IW_OP_MASK   ) << IW_OP_LSB   ) |        \
            ((a        & IW_A_MASK    ) << IW_A_LSB    ) |        \
            ((b        & IW_B_MASK    ) << IW_B_LSB    ) |        \
            ((imm16    & IW_IMM16_MASK) << IW_IMM16_LSB))

#define GET_I12_FORMAT_IW(op, a, b, i12, imm12)     \
            (((op      & IW_OP_MASK   ) << IW_OP_LSB   ) |        \
            ((a        & IW_A_MASK    ) << IW_A_LSB    ) |        \
            ((b        & IW_B_MASK    ) << IW_B_LSB    ) |        \
            ((i12      & IW_I12_MASK  ) << IW_I12_LSB  ) |        \
            ((imm12    & IW_IMM12_MASK) << IW_IMM12_LSB))

#define GET_I5_FORMAT_IW(op, a, b, i12, i5, imm5)   \
            (((op      & IW_OP_MASK   ) << IW_OP_LSB   ) |        \
            ((a        & IW_A_MASK    ) << IW_A_LSB    ) |        \
            ((b        & IW_B_MASK    ) << IW_B_LSB    ) |        \
            ((i12      & IW_I12_MASK  ) << IW_I12_LSB  ) |        \
            ((i5       & IW_I5_MASK   ) << IW_I5_LSB   ) |        \
            ((imm5     & IW_IMM5_MASK ) << IW_IMM5_LSB))

#define GET_R3_FORMAT_IW(op, a, b, c, r3)           \
            (((op      & IW_OP_MASK   ) << IW_OP_LSB   ) |        \
            ((a        & IW_A_MASK    ) << IW_A_LSB    ) |        \
            ((b        & IW_B_MASK    ) << IW_B_LSB    ) |        \
            ((c        & IW_C_MASK    ) << IW_C_LSB    ) |        \
            ((r3       & IW_R3_MASK   ) << IW_R3_LSB   ))

#define GET_CUSTOM_FORMAT_IW(op, ra, rb, rc, a, b, c, n)          \
            (((op      & IW_OP_MASK             ) << IW_OP_LSB             ) |    \
            ((a        & IW_CUSTOM_A_MASK       ) << IW_CUSTOM_A_LSB       ) |    \
            ((b        & IW_CUSTOM_B_MASK       ) << IW_CUSTOM_B_LSB       ) |    \
            ((c        & IW_CUSTOM_C_MASK       ) << IW_CUSTOM_C_LSB       ) |    \
            ((ra       & IW_CUSTOM_READRA_MASK  ) << IW_CUSTOM_READRA_LSB  ) |    \
            ((rb       & IW_CUSTOM_READRB_MASK  ) << IW_CUSTOM_READRB_LSB  ) |    \
            ((rc       & IW_CUSTOM_WRITERC_MASK ) << IW_CUSTOM_WRITERC_LSB ) |    \
            ((n        & IW_CUSTOM_N_MASK       ) << IW_CUSTOM_N_LSB       ) |    \
            ((1        & IW_IS_CUSTOM_MASK      ) << IW_IS_CUSTOM_LSB      ))

/* Extension instruction codes */
#define EXT_INST_FORK 0
#define EXT_INST_EXIT 1
#define EXT_INST_CIDALLOC 2
#define EXT_INST_SND 4
#define EXT_INST_RCV 5
#define EXT_INST_TXALLOC 6
#define EXT_INST_RXFREE 7

/*
 * Instruction property macros
 */
#define IW_PROP_UNIMP_NOP(Iw) \
  ((dcache_prop_unimp_nop[GET_IW_DCACHE(Iw)] && IS_DCACHE_INST(Iw)))

#ifndef ALT_ASM_SRC
extern unsigned char dcache_prop_unimp_nop[4];
#endif /* ALT_ASM_SRC */

#define IW_PROP_SUPERVISOR_ONLY(Iw) \
  ((dcache_prop_supervisor_only[GET_IW_DCACHE(Iw)] && IS_DCACHE_INST(Iw))||(r3_prop_supervisor_only[GET_IW_R3(Iw)] && IS_R3_INST(Iw)))

#ifndef ALT_ASM_SRC
extern unsigned char dcache_prop_supervisor_only[4];
#endif /* ALT_ASM_SRC */

#ifndef ALT_ASM_SRC
extern unsigned char r3_prop_supervisor_only[64];
#endif /* ALT_ASM_SRC */

#define IW_PROP_JMP_INDIRECT_NON_TRAP(Iw) \
  ((r3_prop_jmp_indirect_non_trap[GET_IW_R3(Iw)] && IS_R3_INST(Iw)))

#ifndef ALT_ASM_SRC
extern unsigned char r3_prop_jmp_indirect_non_trap[64];
#endif /* ALT_ASM_SRC */

#define IW_PROP_JMP_INDIRECT(Iw) \
  ((r3_prop_jmp_indirect[GET_IW_R3(Iw)] && IS_R3_INST(Iw)))

#ifndef ALT_ASM_SRC
extern unsigned char r3_prop_jmp_indirect[64];
#endif /* ALT_ASM_SRC */

#define IW_PROP_JMP_DIRECT(Iw) ( \
  ( \
    ((GET_IW_IX((Iw)) == IX_CALL) && IS_IX_INST(Iw)) || \
    ((GET_IW_IX((Iw)) == IX_JMPI) && IS_IX_INST(Iw)) \
  ) \
 \
)

#define IW_PROP_MUL_LSW(Iw) ( \
  ( \
    ((GET_IW_I12((Iw)) == I12B_MULI) && IS_I12B_INST(Iw)) || \
    ((GET_IW_R3((Iw)) == R3_MUL) && IS_R3_INST(Iw)) \
  ) \
 \
)

#define IW_PROP_MULX(Iw) \
  ((r3_prop_mulx[GET_IW_R3(Iw)] && IS_R3_INST(Iw)))

#ifndef ALT_ASM_SRC
extern unsigned char r3_prop_mulx[64];
#endif /* ALT_ASM_SRC */

#define IW_PROP_MUL(Iw) \
  ((i12b_prop_mul[GET_IW_I12(Iw)] && IS_I12B_INST(Iw))||(r3_prop_mul[GET_IW_R3(Iw)] && IS_R3_INST(Iw)))

#ifndef ALT_ASM_SRC
extern unsigned char i12b_prop_mul[16];
#endif /* ALT_ASM_SRC */

#ifndef ALT_ASM_SRC
extern unsigned char r3_prop_mul[64];
#endif /* ALT_ASM_SRC */

#define IW_PROP_SHIFT_LEFT(Iw) ( \
  ( \
    ((GET_IW_I5((Iw)) == I5_SLLI) && IS_I5_INST(Iw)) || \
    ((GET_IW_R3((Iw)) == R3_SLL) && IS_R3_INST(Iw)) \
  ) \
 \
)

#define IW_PROP_SHIFT_LOGICAL(Iw) \
  ((i5_prop_shift_logical[GET_IW_I5(Iw)] && IS_I5_INST(Iw))||(r3_prop_shift_logical[GET_IW_R3(Iw)] && IS_R3_INST(Iw)))

#ifndef ALT_ASM_SRC
extern unsigned char i5_prop_shift_logical[8];
#endif /* ALT_ASM_SRC */

#ifndef ALT_ASM_SRC
extern unsigned char r3_prop_shift_logical[64];
#endif /* ALT_ASM_SRC */

#define IW_PROP_ROT_LEFT(Iw) ( \
  ( \
    ((GET_IW_I5((Iw)) == I5_ROLI) && IS_I5_INST(Iw)) || \
    ((GET_IW_R3((Iw)) == R3_ROL) && IS_R3_INST(Iw)) \
  ) \
 \
)

#define IW_PROP_SHIFT_ROT_LEFT(Iw) \
  ((i5_prop_shift_rot_left[GET_IW_I5(Iw)] && IS_I5_INST(Iw))||(r3_prop_shift_rot_left[GET_IW_R3(Iw)] && IS_R3_INST(Iw)))

#ifndef ALT_ASM_SRC
extern unsigned char i5_prop_shift_rot_left[8];
#endif /* ALT_ASM_SRC */

#ifndef ALT_ASM_SRC
extern unsigned char r3_prop_shift_rot_left[64];
#endif /* ALT_ASM_SRC */

#define IW_PROP_SHIFT_RIGHT_LOGICAL(Iw) ( \
  ( \
    ((GET_IW_I5((Iw)) == I5_SRLI) && IS_I5_INST(Iw)) || \
    ((GET_IW_R3((Iw)) == R3_SRL) && IS_R3_INST(Iw)) \
  ) \
 \
)

#define IW_PROP_SHIFT_RIGHT_ARITH(Iw) ( \
  ( \
    ((GET_IW_I5((Iw)) == I5_SRAI) && IS_I5_INST(Iw)) || \
    ((GET_IW_R3((Iw)) == R3_SRA) && IS_R3_INST(Iw)) \
  ) \
 \
)

#define IW_PROP_SHIFT_RIGHT(Iw) \
  ((i5_prop_shift_right[GET_IW_I5(Iw)] && IS_I5_INST(Iw))||(r3_prop_shift_right[GET_IW_R3(Iw)] && IS_R3_INST(Iw)))

#ifndef ALT_ASM_SRC
extern unsigned char i5_prop_shift_right[8];
#endif /* ALT_ASM_SRC */

#ifndef ALT_ASM_SRC
extern unsigned char r3_prop_shift_right[64];
#endif /* ALT_ASM_SRC */

#define IW_PROP_ROT_RIGHT(Iw) ( \
  ( \
    ((GET_IW_R3((Iw)) == R3_ROR) && IS_R3_INST(Iw)) \
  ) \
 \
)

#define IW_PROP_SHIFT_ROT_RIGHT(Iw) \
  ((i5_prop_shift_rot_right[GET_IW_I5(Iw)] && IS_I5_INST(Iw))||(r3_prop_shift_rot_right[GET_IW_R3(Iw)] && IS_R3_INST(Iw)))

#ifndef ALT_ASM_SRC
extern unsigned char i5_prop_shift_rot_right[8];
#endif /* ALT_ASM_SRC */

#ifndef ALT_ASM_SRC
extern unsigned char r3_prop_shift_rot_right[64];
#endif /* ALT_ASM_SRC */

#define IW_PROP_SHIFT_ROT(Iw) \
  ((i5_prop_shift_rot[GET_IW_I5(Iw)] && IS_I5_INST(Iw))||(r3_prop_shift_rot[GET_IW_R3(Iw)] && IS_R3_INST(Iw)))

#ifndef ALT_ASM_SRC
extern unsigned char i5_prop_shift_rot[8];
#endif /* ALT_ASM_SRC */

#ifndef ALT_ASM_SRC
extern unsigned char r3_prop_shift_rot[64];
#endif /* ALT_ASM_SRC */

#define IW_PROP_SHIFT_ROT_IMM(Iw) \
  ((i5_prop_shift_rot_imm[GET_IW_I5(Iw)] && IS_I5_INST(Iw)))

#ifndef ALT_ASM_SRC
extern unsigned char i5_prop_shift_rot_imm[8];
#endif /* ALT_ASM_SRC */

#define IW_PROP_ROT(Iw) \
  ((i5_prop_rot[GET_IW_I5(Iw)] && IS_I5_INST(Iw))||(r3_prop_rot[GET_IW_R3(Iw)] && IS_R3_INST(Iw)))

#ifndef ALT_ASM_SRC
extern unsigned char i5_prop_rot[8];
#endif /* ALT_ASM_SRC */

#ifndef ALT_ASM_SRC
extern unsigned char r3_prop_rot[64];
#endif /* ALT_ASM_SRC */

#define IW_PROP_LOGIC_REG(Iw) \
  ((r3_prop_logic_reg[GET_IW_R3(Iw)] && IS_R3_INST(Iw)))

#ifndef ALT_ASM_SRC
extern unsigned char r3_prop_logic_reg[64];
#endif /* ALT_ASM_SRC */

#define IW_PROP_LOGIC_HI_IMM16(Iw) \
  (op_prop_logic_hi_imm16[GET_IW_OP(Iw)])

#ifndef ALT_ASM_SRC
extern unsigned char op_prop_logic_hi_imm16[16];
#endif /* ALT_ASM_SRC */

#define IW_PROP_LOGIC_LO_IMM16(Iw) \
  (op_prop_logic_lo_imm16[GET_IW_OP(Iw)])

#ifndef ALT_ASM_SRC
extern unsigned char op_prop_logic_lo_imm16[16];
#endif /* ALT_ASM_SRC */

#define IW_PROP_LOGIC_IMM16(Iw) \
  (op_prop_logic_imm16[GET_IW_OP(Iw)])

#ifndef ALT_ASM_SRC
extern unsigned char op_prop_logic_imm16[16];
#endif /* ALT_ASM_SRC */

#define IW_PROP_LOGIC(Iw) \
  ((r3_prop_logic[GET_IW_R3(Iw)] && IS_R3_INST(Iw))||op_prop_logic[GET_IW_OP(Iw)])

#ifndef ALT_ASM_SRC
extern unsigned char r3_prop_logic[64];
#endif /* ALT_ASM_SRC */

#ifndef ALT_ASM_SRC
extern unsigned char op_prop_logic[16];
#endif /* ALT_ASM_SRC */

#define IW_PROP_HI_IMM16(Iw) \
  (op_prop_hi_imm16[GET_IW_OP(Iw)])

#ifndef ALT_ASM_SRC
extern unsigned char op_prop_hi_imm16[16];
#endif /* ALT_ASM_SRC */

#define IW_PROP_UNSIGNED_LO_IMM16(Iw) \
  (op_prop_unsigned_lo_imm16[GET_IW_OP(Iw)])

#ifndef ALT_ASM_SRC
extern unsigned char op_prop_unsigned_lo_imm16[16];
#endif /* ALT_ASM_SRC */

#define IW_PROP_UNSIGNED_IMM16(Iw) \
  (op_prop_unsigned_imm16[GET_IW_OP(Iw)])

#ifndef ALT_ASM_SRC
extern unsigned char op_prop_unsigned_imm16[16];
#endif /* ALT_ASM_SRC */

#define IW_PROP_SIGNED_IMM16(Iw) ( \
  ( \
    ((GET_IW_OP((Iw)) == OP_ORHI)) \
  ) \
 \
)

#define IW_PROP_ARITH_IMM12(Iw) ( \
  ( \
    ((GET_IW_I12((Iw)) == I12B_ADDI) && IS_I12B_INST(Iw)) || \
    ((GET_IW_I12((Iw)) == I12B_MULI) && IS_I12B_INST(Iw)) \
  ) \
 \
)

#define IW_PROP_CMP_IMM12(Iw) \
  ((i12a_prop_cmp_imm12[GET_IW_I12(Iw)] && IS_I12A_INST(Iw)))

#ifndef ALT_ASM_SRC
extern unsigned char i12a_prop_cmp_imm12[16];
#endif /* ALT_ASM_SRC */

#define IW_PROP_JMPI(Iw) ( \
  ( \
    ((GET_IW_IX((Iw)) == IX_JMPI) && IS_IX_INST(Iw)) \
  ) \
 \
)

#define IW_PROP_CMP_IMM12_WITH_CALL_JMPI(Iw) \
  ((ix_prop_cmp_imm12_with_call_jmpi[GET_IW_IX(Iw)] && IS_IX_INST(Iw))||(i12a_prop_cmp_imm12_with_call_jmpi[GET_IW_I12(Iw)] && IS_I12A_INST(Iw)))

#ifndef ALT_ASM_SRC
extern unsigned char ix_prop_cmp_imm12_with_call_jmpi[4];
#endif /* ALT_ASM_SRC */

#ifndef ALT_ASM_SRC
extern unsigned char i12a_prop_cmp_imm12_with_call_jmpi[16];
#endif /* ALT_ASM_SRC */

#define IW_PROP_SIGNED_IMM12(Iw) \
  ((i12a_prop_signed_imm12[GET_IW_I12(Iw)] && IS_I12A_INST(Iw))||(i12b_prop_signed_imm12[GET_IW_I12(Iw)] && IS_I12B_INST(Iw))||(dcache_prop_signed_imm12[GET_IW_DCACHE(Iw)] && IS_DCACHE_INST(Iw)))

#ifndef ALT_ASM_SRC
extern unsigned char i12a_prop_signed_imm12[16];
#endif /* ALT_ASM_SRC */

#ifndef ALT_ASM_SRC
extern unsigned char i12b_prop_signed_imm12[16];
#endif /* ALT_ASM_SRC */

#ifndef ALT_ASM_SRC
extern unsigned char dcache_prop_signed_imm12[4];
#endif /* ALT_ASM_SRC */

#define IW_PROP_UNSIGNED_IMM12(Iw) ( \
  ( \
    ((GET_IW_I12((Iw)) == I12A_CMPGEUI) && IS_I12A_INST(Iw)) || \
    ((GET_IW_I12((Iw)) == I12A_CMPLTUI) && IS_I12A_INST(Iw)) \
  ) \
 \
)

#define IW_PROP_CMP_REG(Iw) \
  ((r3_prop_cmp_reg[GET_IW_R3(Iw)] && IS_R3_INST(Iw)))

#ifndef ALT_ASM_SRC
extern unsigned char r3_prop_cmp_reg[64];
#endif /* ALT_ASM_SRC */

#define IW_PROP_SRC_IMM5(Iw) \
  ((i5_prop_src_imm5[GET_IW_I5(Iw)] && IS_I5_INST(Iw)))

#ifndef ALT_ASM_SRC
extern unsigned char i5_prop_src_imm5[8];
#endif /* ALT_ASM_SRC */

#define IW_PROP_CMP_WITH_LT(Iw) \
  ((i12a_prop_cmp_with_lt[GET_IW_I12(Iw)] && IS_I12A_INST(Iw))||(r3_prop_cmp_with_lt[GET_IW_R3(Iw)] && IS_R3_INST(Iw)))

#ifndef ALT_ASM_SRC
extern unsigned char i12a_prop_cmp_with_lt[16];
#endif /* ALT_ASM_SRC */

#ifndef ALT_ASM_SRC
extern unsigned char r3_prop_cmp_with_lt[64];
#endif /* ALT_ASM_SRC */

#define IW_PROP_CMP_WITH_EQ(Iw) \
  ((i12a_prop_cmp_with_eq[GET_IW_I12(Iw)] && IS_I12A_INST(Iw))||(r3_prop_cmp_with_eq[GET_IW_R3(Iw)] && IS_R3_INST(Iw)))

#ifndef ALT_ASM_SRC
extern unsigned char i12a_prop_cmp_with_eq[16];
#endif /* ALT_ASM_SRC */

#ifndef ALT_ASM_SRC
extern unsigned char r3_prop_cmp_with_eq[64];
#endif /* ALT_ASM_SRC */

#define IW_PROP_CMP_WITH_GE(Iw) \
  ((i12a_prop_cmp_with_ge[GET_IW_I12(Iw)] && IS_I12A_INST(Iw))||(r3_prop_cmp_with_ge[GET_IW_R3(Iw)] && IS_R3_INST(Iw)))

#ifndef ALT_ASM_SRC
extern unsigned char i12a_prop_cmp_with_ge[16];
#endif /* ALT_ASM_SRC */

#ifndef ALT_ASM_SRC
extern unsigned char r3_prop_cmp_with_ge[64];
#endif /* ALT_ASM_SRC */

#define IW_PROP_CMP_WITH_NE(Iw) ( \
  ( \
    ((GET_IW_I12((Iw)) == I12A_CMPNEI) && IS_I12A_INST(Iw)) || \
    ((GET_IW_R3((Iw)) == R3_CMPNE) && IS_R3_INST(Iw)) \
  ) \
 \
)

#define IW_PROP_CMP_ALU_SIGNED(Iw) \
  ((r3_prop_cmp_alu_signed[GET_IW_R3(Iw)] && IS_R3_INST(Iw))||(i12a_prop_cmp_alu_signed[GET_IW_I12(Iw)] && IS_I12A_INST(Iw)))

#ifndef ALT_ASM_SRC
extern unsigned char r3_prop_cmp_alu_signed[64];
#endif /* ALT_ASM_SRC */

#ifndef ALT_ASM_SRC
extern unsigned char i12a_prop_cmp_alu_signed[16];
#endif /* ALT_ASM_SRC */

#define IW_PROP_CMP(Iw) \
  ((i12a_prop_cmp[GET_IW_I12(Iw)] && IS_I12A_INST(Iw))||(r3_prop_cmp[GET_IW_R3(Iw)] && IS_R3_INST(Iw)))

#ifndef ALT_ASM_SRC
extern unsigned char i12a_prop_cmp[16];
#endif /* ALT_ASM_SRC */

#ifndef ALT_ASM_SRC
extern unsigned char r3_prop_cmp[64];
#endif /* ALT_ASM_SRC */

#define IW_PROP_BR_WITH_LT(Iw) ( \
  ( \
    ((GET_IW_I12((Iw)) == I12A_BLT) && IS_I12A_INST(Iw)) || \
    ((GET_IW_I12((Iw)) == I12A_BLTU) && IS_I12A_INST(Iw)) \
  ) \
 \
)

#define IW_PROP_BR_WITH_GE(Iw) ( \
  ( \
    ((GET_IW_I12((Iw)) == I12A_BGE) && IS_I12A_INST(Iw)) || \
    ((GET_IW_I12((Iw)) == I12A_BGEU) && IS_I12A_INST(Iw)) \
  ) \
 \
)

#define IW_PROP_BR_WITH_EQ(Iw) \
  ((i12a_prop_br_with_eq[GET_IW_I12(Iw)] && IS_I12A_INST(Iw)))

#ifndef ALT_ASM_SRC
extern unsigned char i12a_prop_br_with_eq[16];
#endif /* ALT_ASM_SRC */

#define IW_PROP_BR_WITH_NE(Iw) ( \
  ( \
    ((GET_IW_I12((Iw)) == I12A_BNE) && IS_I12A_INST(Iw)) \
  ) \
 \
)

#define IW_PROP_BR_ALU_SIGNED(Iw) ( \
  ( \
    ((GET_IW_I12((Iw)) == I12A_BGE) && IS_I12A_INST(Iw)) || \
    ((GET_IW_I12((Iw)) == I12A_BLT) && IS_I12A_INST(Iw)) \
  ) \
 \
)

#define IW_PROP_BR_COND(Iw) \
  ((i12a_prop_br_cond[GET_IW_I12(Iw)] && IS_I12A_INST(Iw)))

#ifndef ALT_ASM_SRC
extern unsigned char i12a_prop_br_cond[16];
#endif /* ALT_ASM_SRC */

#define IW_PROP_BR(Iw) \
  ((i12a_prop_br[GET_IW_I12(Iw)] && IS_I12A_INST(Iw)))

#ifndef ALT_ASM_SRC
extern unsigned char i12a_prop_br[16];
#endif /* ALT_ASM_SRC */

#define IW_PROP_ALU_SUBTRACT(Iw) \
  ((r3_prop_alu_subtract[GET_IW_R3(Iw)] && IS_R3_INST(Iw))||(i12a_prop_alu_subtract[GET_IW_I12(Iw)] && IS_I12A_INST(Iw)))

#ifndef ALT_ASM_SRC
extern unsigned char r3_prop_alu_subtract[64];
#endif /* ALT_ASM_SRC */

#ifndef ALT_ASM_SRC
extern unsigned char i12a_prop_alu_subtract[16];
#endif /* ALT_ASM_SRC */

#define IW_PROP_ALU_SIGNED_COMPARISON(Iw) \
  ((r3_prop_alu_signed_comparison[GET_IW_R3(Iw)] && IS_R3_INST(Iw))||(i12a_prop_alu_signed_comparison[GET_IW_I12(Iw)] && IS_I12A_INST(Iw)))

#ifndef ALT_ASM_SRC
extern unsigned char r3_prop_alu_signed_comparison[64];
#endif /* ALT_ASM_SRC */

#ifndef ALT_ASM_SRC
extern unsigned char i12a_prop_alu_signed_comparison[16];
#endif /* ALT_ASM_SRC */

#define IW_PROP_BR_CMP(Iw) \
  ((i12a_prop_br_cmp[GET_IW_I12(Iw)] && IS_I12A_INST(Iw))||(r3_prop_br_cmp[GET_IW_R3(Iw)] && IS_R3_INST(Iw)))

#ifndef ALT_ASM_SRC
extern unsigned char i12a_prop_br_cmp[16];
#endif /* ALT_ASM_SRC */

#ifndef ALT_ASM_SRC
extern unsigned char r3_prop_br_cmp[64];
#endif /* ALT_ASM_SRC */

#define IW_PROP_BR_CMP_EQ_NE(Iw) \
  ((i12a_prop_br_cmp_eq_ne[GET_IW_I12(Iw)] && IS_I12A_INST(Iw))||(r3_prop_br_cmp_eq_ne[GET_IW_R3(Iw)] && IS_R3_INST(Iw)))

#ifndef ALT_ASM_SRC
extern unsigned char i12a_prop_br_cmp_eq_ne[16];
#endif /* ALT_ASM_SRC */

#ifndef ALT_ASM_SRC
extern unsigned char r3_prop_br_cmp_eq_ne[64];
#endif /* ALT_ASM_SRC */

#define IW_PROP_LD8(Iw) ( \
  ( \
    ((GET_IW_I12((Iw)) == I12B_LDB) && IS_I12B_INST(Iw)) || \
    ((GET_IW_I12((Iw)) == I12B_LDBU) && IS_I12B_INST(Iw)) \
  ) \
 \
)

#define IW_PROP_LD16(Iw) ( \
  ( \
    ((GET_IW_I12((Iw)) == I12B_LDHU) && IS_I12B_INST(Iw)) || \
    ((GET_IW_I12((Iw)) == I12B_LDH) && IS_I12B_INST(Iw)) \
  ) \
 \
)

#define IW_PROP_LD8_LD16(Iw) \
  ((i12b_prop_ld8_ld16[GET_IW_I12(Iw)] && IS_I12B_INST(Iw)))

#ifndef ALT_ASM_SRC
extern unsigned char i12b_prop_ld8_ld16[16];
#endif /* ALT_ASM_SRC */

#define IW_PROP_LD32(Iw) ( \
  ( \
    ((GET_IW_I12((Iw)) == I12B_LDW) && IS_I12B_INST(Iw)) \
  ) \
 \
)

#define IW_PROP_LD_SIGNED(Iw) \
  ((i12b_prop_ld_signed[GET_IW_I12(Iw)] && IS_I12B_INST(Iw)))

#ifndef ALT_ASM_SRC
extern unsigned char i12b_prop_ld_signed[16];
#endif /* ALT_ASM_SRC */

#define IW_PROP_LD_UNSIGNED(Iw) ( \
  ( \
    ((GET_IW_I12((Iw)) == I12B_LDBU) && IS_I12B_INST(Iw)) || \
    ((GET_IW_I12((Iw)) == I12B_LDHU) && IS_I12B_INST(Iw)) \
  ) \
 \
)

#define IW_PROP_LD(Iw) \
  ((i12b_prop_ld[GET_IW_I12(Iw)] && IS_I12B_INST(Iw)))

#ifndef ALT_ASM_SRC
extern unsigned char i12b_prop_ld[16];
#endif /* ALT_ASM_SRC */

#define IW_PROP_LD_NON_IO(Iw) \
  ((i12b_prop_ld_non_io[GET_IW_I12(Iw)] && IS_I12B_INST(Iw)))

#ifndef ALT_ASM_SRC
extern unsigned char i12b_prop_ld_non_io[16];
#endif /* ALT_ASM_SRC */

#define IW_PROP_DCACHE_MANAGEMENT_NOP(Iw) \
  ((dcache_prop_dcache_management_nop[GET_IW_DCACHE(Iw)] && IS_DCACHE_INST(Iw)))

#ifndef ALT_ASM_SRC
extern unsigned char dcache_prop_dcache_management_nop[4];
#endif /* ALT_ASM_SRC */

#define IW_PROP_ST8(Iw) ( \
  ( \
    ((GET_IW_I12((Iw)) == I12B_STB) && IS_I12B_INST(Iw)) \
  ) \
 \
)

#define IW_PROP_ST16(Iw) ( \
  ( \
    ((GET_IW_I12((Iw)) == I12B_STH) && IS_I12B_INST(Iw)) \
  ) \
 \
)

#define IW_PROP_ST32(Iw) ( \
  ( \
    ((GET_IW_I12((Iw)) == I12B_STW) && IS_I12B_INST(Iw)) \
  ) \
 \
)

#define IW_PROP_ST(Iw) \
  ((i12b_prop_st[GET_IW_I12(Iw)] && IS_I12B_INST(Iw)))

#ifndef ALT_ASM_SRC
extern unsigned char i12b_prop_st[16];
#endif /* ALT_ASM_SRC */

#define IW_PROP_ST_NON_IO(Iw) \
  ((i12b_prop_st_non_io[GET_IW_I12(Iw)] && IS_I12B_INST(Iw)))

#ifndef ALT_ASM_SRC
extern unsigned char i12b_prop_st_non_io[16];
#endif /* ALT_ASM_SRC */

#define IW_PROP_LD_ST(Iw) \
  ((i12b_prop_ld_st[GET_IW_I12(Iw)] && IS_I12B_INST(Iw)))

#ifndef ALT_ASM_SRC
extern unsigned char i12b_prop_ld_st[16];
#endif /* ALT_ASM_SRC */

#define IW_PROP_LD_ST_NON_IO(Iw) \
  ((i12b_prop_ld_st_non_io[GET_IW_I12(Iw)] && IS_I12B_INST(Iw)))

#ifndef ALT_ASM_SRC
extern unsigned char i12b_prop_ld_st_non_io[16];
#endif /* ALT_ASM_SRC */

#define IW_PROP_LD_ST_NON_IO_NON_ST32(Iw) \
  ((i12b_prop_ld_st_non_io_non_st32[GET_IW_I12(Iw)] && IS_I12B_INST(Iw)))

#ifndef ALT_ASM_SRC
extern unsigned char i12b_prop_ld_st_non_io_non_st32[16];
#endif /* ALT_ASM_SRC */

#define IW_PROP_LD_ST_NON_ST32(Iw) \
  ((i12b_prop_ld_st_non_st32[GET_IW_I12(Iw)] && IS_I12B_INST(Iw)))

#ifndef ALT_ASM_SRC
extern unsigned char i12b_prop_ld_st_non_st32[16];
#endif /* ALT_ASM_SRC */

#define IW_PROP_MEM(Iw) \
  ((i12b_prop_mem[GET_IW_I12(Iw)] && IS_I12B_INST(Iw))||(dcache_prop_mem[GET_IW_DCACHE(Iw)] && IS_DCACHE_INST(Iw)))

#ifndef ALT_ASM_SRC
extern unsigned char i12b_prop_mem[16];
#endif /* ALT_ASM_SRC */

#ifndef ALT_ASM_SRC
extern unsigned char dcache_prop_mem[4];
#endif /* ALT_ASM_SRC */

#define IW_PROP_MEM_DATA_ACCESS(Iw) \
  ((dcache_prop_mem_data_access[GET_IW_DCACHE(Iw)] && IS_DCACHE_INST(Iw))||(i12b_prop_mem_data_access[GET_IW_I12(Iw)] && IS_I12B_INST(Iw)))

#ifndef ALT_ASM_SRC
extern unsigned char dcache_prop_mem_data_access[4];
#endif /* ALT_ASM_SRC */

#ifndef ALT_ASM_SRC
extern unsigned char i12b_prop_mem_data_access[16];
#endif /* ALT_ASM_SRC */

#define IW_PROP_MEM8(Iw) \
  ((i12b_prop_mem8[GET_IW_I12(Iw)] && IS_I12B_INST(Iw)))

#ifndef ALT_ASM_SRC
extern unsigned char i12b_prop_mem8[16];
#endif /* ALT_ASM_SRC */

#define IW_PROP_MEM16(Iw) \
  ((i12b_prop_mem16[GET_IW_I12(Iw)] && IS_I12B_INST(Iw)))

#ifndef ALT_ASM_SRC
extern unsigned char i12b_prop_mem16[16];
#endif /* ALT_ASM_SRC */

#define IW_PROP_MEM32(Iw) ( \
  ( \
    ((GET_IW_I12((Iw)) == I12B_LDW) && IS_I12B_INST(Iw)) || \
    ((GET_IW_I12((Iw)) == I12B_STW) && IS_I12B_INST(Iw)) \
  ) \
 \
)

#define IW_PROP_A_NOT_SRC(Iw) \
  (((ix_prop_a_not_src[GET_IW_IX(Iw)] && IS_IX_INST(Iw))   || (IS_CUSTOM_INST(Iw) && !GET_IW_CUSTOM_READRA(Iw)))||((i12b_prop_a_not_src[GET_IW_I12(Iw)] && IS_I12B_INST(Iw))   || (IS_CUSTOM_INST(Iw) && !GET_IW_CUSTOM_READRA(Iw))))

#ifndef ALT_ASM_SRC
extern unsigned char ix_prop_a_not_src[4];
#endif /* ALT_ASM_SRC */

#ifndef ALT_ASM_SRC
extern unsigned char i12b_prop_a_not_src[16];
#endif /* ALT_ASM_SRC */

#define IW_PROP_B_NOT_SRC(Iw) \
  ((op_prop_b_not_src[GET_IW_OP(Iw)]   || (IS_CUSTOM_INST(Iw) && !GET_IW_CUSTOM_READRB(Iw)))||((ix_prop_b_not_src[GET_IW_IX(Iw)] && IS_IX_INST(Iw))   || (IS_CUSTOM_INST(Iw) && !GET_IW_CUSTOM_READRB(Iw)))||((i5_prop_b_not_src[GET_IW_I5(Iw)] && IS_I5_INST(Iw))   || (IS_CUSTOM_INST(Iw) && !GET_IW_CUSTOM_READRB(Iw)))||((r3_prop_b_not_src[GET_IW_R3(Iw)] && IS_R3_INST(Iw))   || (IS_CUSTOM_INST(Iw) && !GET_IW_CUSTOM_READRB(Iw)))||((i12b_prop_b_not_src[GET_IW_I12(Iw)] && IS_I12B_INST(Iw))   || (IS_CUSTOM_INST(Iw) && !GET_IW_CUSTOM_READRB(Iw)))||((i12a_prop_b_not_src[GET_IW_I12(Iw)] && IS_I12A_INST(Iw))   || (IS_CUSTOM_INST(Iw) && !GET_IW_CUSTOM_READRB(Iw))))

#ifndef ALT_ASM_SRC
extern unsigned char op_prop_b_not_src[16];
#endif /* ALT_ASM_SRC */

#ifndef ALT_ASM_SRC
extern unsigned char ix_prop_b_not_src[4];
#endif /* ALT_ASM_SRC */

#ifndef ALT_ASM_SRC
extern unsigned char i5_prop_b_not_src[8];
#endif /* ALT_ASM_SRC */

#ifndef ALT_ASM_SRC
extern unsigned char r3_prop_b_not_src[64];
#endif /* ALT_ASM_SRC */

#ifndef ALT_ASM_SRC
extern unsigned char i12b_prop_b_not_src[16];
#endif /* ALT_ASM_SRC */

#ifndef ALT_ASM_SRC
extern unsigned char i12a_prop_b_not_src[16];
#endif /* ALT_ASM_SRC */

#define IW_PROP_SRC2_CHOOSE_IMM(Iw) \
  (op_prop_src2_choose_imm[GET_IW_OP(Iw)]||(ix_prop_src2_choose_imm[GET_IW_IX(Iw)] && IS_IX_INST(Iw))||(i5_prop_src2_choose_imm[GET_IW_I5(Iw)] && IS_I5_INST(Iw))||(r3_prop_src2_choose_imm[GET_IW_R3(Iw)] && IS_R3_INST(Iw))||(i12b_prop_src2_choose_imm[GET_IW_I12(Iw)] && IS_I12B_INST(Iw))||(i12a_prop_src2_choose_imm[GET_IW_I12(Iw)] && IS_I12A_INST(Iw)))

#ifndef ALT_ASM_SRC
extern unsigned char op_prop_src2_choose_imm[16];
#endif /* ALT_ASM_SRC */

#ifndef ALT_ASM_SRC
extern unsigned char ix_prop_src2_choose_imm[4];
#endif /* ALT_ASM_SRC */

#ifndef ALT_ASM_SRC
extern unsigned char i5_prop_src2_choose_imm[8];
#endif /* ALT_ASM_SRC */

#ifndef ALT_ASM_SRC
extern unsigned char r3_prop_src2_choose_imm[64];
#endif /* ALT_ASM_SRC */

#ifndef ALT_ASM_SRC
extern unsigned char i12b_prop_src2_choose_imm[16];
#endif /* ALT_ASM_SRC */

#ifndef ALT_ASM_SRC
extern unsigned char i12a_prop_src2_choose_imm[16];
#endif /* ALT_ASM_SRC */

#define IW_PROP_B_IS_DST(Iw) \
  (op_prop_b_is_dst[GET_IW_OP(Iw)]||(ix_prop_b_is_dst[GET_IW_IX(Iw)] && IS_IX_INST(Iw))||(i5_prop_b_is_dst[GET_IW_I5(Iw)] && IS_I5_INST(Iw))||(r3_prop_b_is_dst[GET_IW_R3(Iw)] && IS_R3_INST(Iw))||(i12b_prop_b_is_dst[GET_IW_I12(Iw)] && IS_I12B_INST(Iw))||(i12a_prop_b_is_dst[GET_IW_I12(Iw)] && IS_I12A_INST(Iw)))

#ifndef ALT_ASM_SRC
extern unsigned char op_prop_b_is_dst[16];
#endif /* ALT_ASM_SRC */

#ifndef ALT_ASM_SRC
extern unsigned char ix_prop_b_is_dst[4];
#endif /* ALT_ASM_SRC */

#ifndef ALT_ASM_SRC
extern unsigned char i5_prop_b_is_dst[8];
#endif /* ALT_ASM_SRC */

#ifndef ALT_ASM_SRC
extern unsigned char r3_prop_b_is_dst[64];
#endif /* ALT_ASM_SRC */

#ifndef ALT_ASM_SRC
extern unsigned char i12b_prop_b_is_dst[16];
#endif /* ALT_ASM_SRC */

#ifndef ALT_ASM_SRC
extern unsigned char i12a_prop_b_is_dst[16];
#endif /* ALT_ASM_SRC */

#define IW_PROP_IGNORE_DST(Iw) \
  (((i12a_prop_ignore_dst[GET_IW_I12(Iw)] && IS_I12A_INST(Iw))   || (IS_CUSTOM_INST(Iw) && !GET_IW_CUSTOM_WRITERC(Iw)))||((i12b_prop_ignore_dst[GET_IW_I12(Iw)] && IS_I12B_INST(Iw))   || (IS_CUSTOM_INST(Iw) && !GET_IW_CUSTOM_WRITERC(Iw)))||((ix_prop_ignore_dst[GET_IW_IX(Iw)] && IS_IX_INST(Iw))   || (IS_CUSTOM_INST(Iw) && !GET_IW_CUSTOM_WRITERC(Iw))))

#ifndef ALT_ASM_SRC
extern unsigned char i12a_prop_ignore_dst[16];
#endif /* ALT_ASM_SRC */

#ifndef ALT_ASM_SRC
extern unsigned char i12b_prop_ignore_dst[16];
#endif /* ALT_ASM_SRC */

#ifndef ALT_ASM_SRC
extern unsigned char ix_prop_ignore_dst[4];
#endif /* ALT_ASM_SRC */

#define IW_PROP_IGNORE_DST_OR_LD(Iw) \
  ((i12a_prop_ignore_dst_or_ld[GET_IW_I12(Iw)] && IS_I12A_INST(Iw))||(i12b_prop_ignore_dst_or_ld[GET_IW_I12(Iw)] && IS_I12B_INST(Iw))||(ix_prop_ignore_dst_or_ld[GET_IW_IX(Iw)] && IS_IX_INST(Iw)))

#ifndef ALT_ASM_SRC
extern unsigned char i12a_prop_ignore_dst_or_ld[16];
#endif /* ALT_ASM_SRC */

#ifndef ALT_ASM_SRC
extern unsigned char i12b_prop_ignore_dst_or_ld[16];
#endif /* ALT_ASM_SRC */

#ifndef ALT_ASM_SRC
extern unsigned char ix_prop_ignore_dst_or_ld[4];
#endif /* ALT_ASM_SRC */

#define IW_PROP_IMPLICIT_DST_RETADDR(Iw) ( \
  ( \
    ((GET_IW_IX((Iw)) == IX_CALL) && IS_IX_INST(Iw)) \
  ) \
 \
)

#define IW_PROP_UNIMP_TRAP(Iw) ( \
  ( \
    ((GET_IW_I5((Iw)) == I5_TRAP) && IS_I5_INST(Iw)) \
  ) \
 \
)

#define IW_PROP_IMPLICIT_DST_ERETADDR(Iw) ( \
  ( \
    ((GET_IW_I5((Iw)) == I5_TRAP) && IS_I5_INST(Iw)) \
  ) \
 \
)

#define IW_PROP_EXCEPTION(Iw) ( \
  ( \
    ((GET_IW_I5((Iw)) == I5_TRAP) && IS_I5_INST(Iw)) \
  ) \
 \
)

#define IW_PROP_BREAK(Iw) ( \
  ( \
    ((GET_IW_I5((Iw)) == I5_BREAK) && IS_I5_INST(Iw)) \
  ) \
 \
)

#define IW_PROP_WR_CTL_REG(Iw) \
  ((r3_prop_wr_ctl_reg[GET_IW_R3(Iw)] && IS_R3_INST(Iw))||(i5_prop_wr_ctl_reg[GET_IW_I5(Iw)] && IS_I5_INST(Iw)))

#ifndef ALT_ASM_SRC
extern unsigned char r3_prop_wr_ctl_reg[64];
#endif /* ALT_ASM_SRC */

#ifndef ALT_ASM_SRC
extern unsigned char i5_prop_wr_ctl_reg[8];
#endif /* ALT_ASM_SRC */

#define IW_PROP_UNCOND_CTI_NON_BR(Iw) \
  ((ix_prop_uncond_cti_non_br[GET_IW_IX(Iw)] && IS_IX_INST(Iw))||(r3_prop_uncond_cti_non_br[GET_IW_R3(Iw)] && IS_R3_INST(Iw)))

#ifndef ALT_ASM_SRC
extern unsigned char ix_prop_uncond_cti_non_br[4];
#endif /* ALT_ASM_SRC */

#ifndef ALT_ASM_SRC
extern unsigned char r3_prop_uncond_cti_non_br[64];
#endif /* ALT_ASM_SRC */

#define IW_PROP_RETADDR(Iw) \
  ((ix_prop_retaddr[GET_IW_IX(Iw)] && IS_IX_INST(Iw))||(r3_prop_retaddr[GET_IW_R3(Iw)] && IS_R3_INST(Iw))||(i5_prop_retaddr[GET_IW_I5(Iw)] && IS_I5_INST(Iw)))

#ifndef ALT_ASM_SRC
extern unsigned char ix_prop_retaddr[4];
#endif /* ALT_ASM_SRC */

#ifndef ALT_ASM_SRC
extern unsigned char r3_prop_retaddr[64];
#endif /* ALT_ASM_SRC */

#ifndef ALT_ASM_SRC
extern unsigned char i5_prop_retaddr[8];
#endif /* ALT_ASM_SRC */

#define IW_PROP_WRCTL_INST(Iw) ( \
  ( \
    ((GET_IW_R3((Iw)) == R3_WRCTL) && IS_R3_INST(Iw)) \
  ) \
 \
)

#define IW_PROP_RDCTL_INST(Iw) ( \
  ( \
    ((GET_IW_R3((Iw)) == R3_RDCTL) && IS_R3_INST(Iw)) \
  ) \
 \
)

#define IW_PROP_MUL_SRC1_SIGNED(Iw) ( \
  ( \
    ((GET_IW_R3((Iw)) == R3_MULXSS) && IS_R3_INST(Iw)) || \
    ((GET_IW_R3((Iw)) == R3_MULXSU) && IS_R3_INST(Iw)) \
  ) \
 \
)

#define IW_PROP_MUL_SRC2_SIGNED(Iw) ( \
  ( \
    ((GET_IW_R3((Iw)) == R3_MULXSS) && IS_R3_INST(Iw)) \
  ) \
 \
)

#define IW_PROP_MUL_SHIFT_SRC1_SIGNED(Iw) \
  ((r3_prop_mul_shift_src1_signed[GET_IW_R3(Iw)] && IS_R3_INST(Iw))||(i5_prop_mul_shift_src1_signed[GET_IW_I5(Iw)] && IS_I5_INST(Iw)))

#ifndef ALT_ASM_SRC
extern unsigned char r3_prop_mul_shift_src1_signed[64];
#endif /* ALT_ASM_SRC */

#ifndef ALT_ASM_SRC
extern unsigned char i5_prop_mul_shift_src1_signed[8];
#endif /* ALT_ASM_SRC */

#define IW_PROP_MUL_SHIFT_SRC2_SIGNED(Iw) ( \
  ( \
    ((GET_IW_R3((Iw)) == R3_MULXSS) && IS_R3_INST(Iw)) \
  ) \
 \
)

#define IW_PROP_MUL_SHIFT_ROT(Iw) \
  ((i12b_prop_mul_shift_rot[GET_IW_I12(Iw)] && IS_I12B_INST(Iw))||(r3_prop_mul_shift_rot[GET_IW_R3(Iw)] && IS_R3_INST(Iw))||(i5_prop_mul_shift_rot[GET_IW_I5(Iw)] && IS_I5_INST(Iw)))

#ifndef ALT_ASM_SRC
extern unsigned char i12b_prop_mul_shift_rot[16];
#endif /* ALT_ASM_SRC */

#ifndef ALT_ASM_SRC
extern unsigned char r3_prop_mul_shift_rot[64];
#endif /* ALT_ASM_SRC */

#ifndef ALT_ASM_SRC
extern unsigned char i5_prop_mul_shift_rot[8];
#endif /* ALT_ASM_SRC */

#define IW_PROP_DONT_DISPLAY_DST_REG(Iw) \
  ((r3_prop_dont_display_dst_reg[GET_IW_R3(Iw)] && IS_R3_INST(Iw))||(dcache_prop_dont_display_dst_reg[GET_IW_DCACHE(Iw)] && IS_DCACHE_INST(Iw))||(i5_prop_dont_display_dst_reg[GET_IW_I5(Iw)] && IS_I5_INST(Iw))||(ix_prop_dont_display_dst_reg[GET_IW_IX(Iw)] && IS_IX_INST(Iw)))

#ifndef ALT_ASM_SRC
extern unsigned char r3_prop_dont_display_dst_reg[64];
#endif /* ALT_ASM_SRC */

#ifndef ALT_ASM_SRC
extern unsigned char dcache_prop_dont_display_dst_reg[4];
#endif /* ALT_ASM_SRC */

#ifndef ALT_ASM_SRC
extern unsigned char i5_prop_dont_display_dst_reg[8];
#endif /* ALT_ASM_SRC */

#ifndef ALT_ASM_SRC
extern unsigned char ix_prop_dont_display_dst_reg[4];
#endif /* ALT_ASM_SRC */

#define IW_PROP_DONT_DISPLAY_SRC1_REG(Iw) \
  ((r3_prop_dont_display_src1_reg[GET_IW_R3(Iw)] && IS_R3_INST(Iw))||(i5_prop_dont_display_src1_reg[GET_IW_I5(Iw)] && IS_I5_INST(Iw))||(ix_prop_dont_display_src1_reg[GET_IW_IX(Iw)] && IS_IX_INST(Iw)))

#ifndef ALT_ASM_SRC
extern unsigned char r3_prop_dont_display_src1_reg[64];
#endif /* ALT_ASM_SRC */

#ifndef ALT_ASM_SRC
extern unsigned char i5_prop_dont_display_src1_reg[8];
#endif /* ALT_ASM_SRC */

#ifndef ALT_ASM_SRC
extern unsigned char ix_prop_dont_display_src1_reg[4];
#endif /* ALT_ASM_SRC */

#define IW_PROP_DONT_DISPLAY_SRC2_REG(Iw) \
  ((r3_prop_dont_display_src2_reg[GET_IW_R3(Iw)] && IS_R3_INST(Iw))||(ix_prop_dont_display_src2_reg[GET_IW_IX(Iw)] && IS_IX_INST(Iw))||(i5_prop_dont_display_src2_reg[GET_IW_I5(Iw)] && IS_I5_INST(Iw)))

#ifndef ALT_ASM_SRC
extern unsigned char r3_prop_dont_display_src2_reg[64];
#endif /* ALT_ASM_SRC */

#ifndef ALT_ASM_SRC
extern unsigned char ix_prop_dont_display_src2_reg[4];
#endif /* ALT_ASM_SRC */

#ifndef ALT_ASM_SRC
extern unsigned char i5_prop_dont_display_src2_reg[8];
#endif /* ALT_ASM_SRC */

#define IW_PROP_SRC1_NO_X(Iw) \
  ((r3_prop_src1_no_x[GET_IW_R3(Iw)] && IS_R3_INST(Iw))||(i12a_prop_src1_no_x[GET_IW_I12(Iw)] && IS_I12A_INST(Iw))||(i12b_prop_src1_no_x[GET_IW_I12(Iw)] && IS_I12B_INST(Iw))||(dcache_prop_src1_no_x[GET_IW_DCACHE(Iw)] && IS_DCACHE_INST(Iw)))

#ifndef ALT_ASM_SRC
extern unsigned char r3_prop_src1_no_x[64];
#endif /* ALT_ASM_SRC */

#ifndef ALT_ASM_SRC
extern unsigned char i12a_prop_src1_no_x[16];
#endif /* ALT_ASM_SRC */

#ifndef ALT_ASM_SRC
extern unsigned char i12b_prop_src1_no_x[16];
#endif /* ALT_ASM_SRC */

#ifndef ALT_ASM_SRC
extern unsigned char dcache_prop_src1_no_x[4];
#endif /* ALT_ASM_SRC */

#define IW_PROP_SRC2_NO_X(Iw) \
  ((i12a_prop_src2_no_x[GET_IW_I12(Iw)] && IS_I12A_INST(Iw))||(r3_prop_src2_no_x[GET_IW_R3(Iw)] && IS_R3_INST(Iw))||(i12b_prop_src2_no_x[GET_IW_I12(Iw)] && IS_I12B_INST(Iw))||(dcache_prop_src2_no_x[GET_IW_DCACHE(Iw)] && IS_DCACHE_INST(Iw)))

#ifndef ALT_ASM_SRC
extern unsigned char i12a_prop_src2_no_x[16];
#endif /* ALT_ASM_SRC */

#ifndef ALT_ASM_SRC
extern unsigned char r3_prop_src2_no_x[64];
#endif /* ALT_ASM_SRC */

#ifndef ALT_ASM_SRC
extern unsigned char i12b_prop_src2_no_x[16];
#endif /* ALT_ASM_SRC */

#ifndef ALT_ASM_SRC
extern unsigned char dcache_prop_src2_no_x[4];
#endif /* ALT_ASM_SRC */

#define IW_PROP_ABX(Iw) ( \
  ( \
    ((GET_IW_R3((Iw)) == R3_JREL) && IS_R3_INST(Iw)) \
  ) \
 \
)

#define IW_PROP_BMX(Iw) \
  ((i12b_prop_bmx[GET_IW_I12(Iw)] && IS_I12B_INST(Iw)))

#ifndef ALT_ASM_SRC
extern unsigned char i12b_prop_bmx[16];
#endif /* ALT_ASM_SRC */

#define IW_PROP_MPX(Iw) \
  ((r3_prop_mpx[GET_IW_R3(Iw)] && IS_R3_INST(Iw))||op_prop_mpx[GET_IW_OP(Iw)])

#ifndef ALT_ASM_SRC
extern unsigned char r3_prop_mpx[64];
#endif /* ALT_ASM_SRC */

#ifndef ALT_ASM_SRC
extern unsigned char op_prop_mpx[16];
#endif /* ALT_ASM_SRC */

#define IW_PROP_MTX(Iw) ( \
  ( \
    ((GET_IW_R3((Iw)) == R3_FORK) && IS_R3_INST(Iw)) || \
    ((GET_IW_R3((Iw)) == R3_EXIT) && IS_R3_INST(Iw)) \
  ) \
 \
)


/* Instruction types */
#define INST_TYPE_OP 0
#define INST_TYPE_IX 1
#define INST_TYPE_I12A 2
#define INST_TYPE_I12B 3
#define INST_TYPE_I5 4
#define INST_TYPE_R3 5
#define INST_TYPE_DCACHE 6
#define INST_TYPE_TOTAL 7

/* Canonical instruction codes independent of encoding */
#define SNDI_INST_CODE 0
#define RCVI_INST_CODE 1
#define ANDCI_INST_CODE 2
#define ANDI_INST_CODE 3
#define ORI_INST_CODE 4
#define XORI_INST_CODE 5
#define ANDCHI_INST_CODE 6
#define ANDHI_INST_CODE 7
#define ORHI_INST_CODE 8
#define XORHI_INST_CODE 9
#define CALL_INST_CODE 10
#define JMPI_INST_CODE 11
#define MOVHI20_INST_CODE 12
#define CMPGEI_INST_CODE 13
#define CMPLTI_INST_CODE 14
#define CMPNEI_INST_CODE 15
#define CMPEQI_INST_CODE 16
#define CMPGEUI_INST_CODE 17
#define CMPLTUI_INST_CODE 18
#define BGE_INST_CODE 19
#define BLT_INST_CODE 20
#define BNE_INST_CODE 21
#define BEQ_INST_CODE 22
#define BGEU_INST_CODE 23
#define BLTU_INST_CODE 24
#define ROLI_INST_CODE 25
#define SLLI_INST_CODE 26
#define SRLI_INST_CODE 27
#define TRAP_INST_CODE 28
#define BREAK_INST_CODE 29
#define SRAI_INST_CODE 30
#define LDB_INST_CODE 31
#define LDH_INST_CODE 32
#define LDW_INST_CODE 33
#define ADDI_INST_CODE 34
#define LDBU_INST_CODE 35
#define LDHU_INST_CODE 36
#define STB_INST_CODE 37
#define STH_INST_CODE 38
#define STW_INST_CODE 39
#define MULI_INST_CODE 40
#define INSERT_INST_CODE 41
#define EXTRACT_INST_CODE 42
#define MERGE_INST_CODE 43
#define INITD_INST_CODE 44
#define INITDA_INST_CODE 45
#define FLUSHD_INST_CODE 46
#define FLUSHDA_INST_CODE 47
#define ERET_INST_CODE 48
#define FORK_INST_CODE 49
#define ROL_INST_CODE 50
#define RET_INST_CODE 51
#define NOR_INST_CODE 52
#define MULXUU_INST_CODE 53
#define CMPGE_INST_CODE 54
#define BRET_INST_CODE 55
#define EXIT_INST_CODE 56
#define ROR_INST_CODE 57
#define JMP_INST_CODE 58
#define AND_INST_CODE 59
#define CMPLT_INST_CODE 60
#define CIDALLOC_INST_CODE 61
#define SLL_INST_CODE 62
#define NEXTPC_INST_CODE 63
#define OR_INST_CODE 64
#define MULXSU_INST_CODE 65
#define CMPNE_INST_CODE 66
#define SRL_INST_CODE 67
#define CALLR_INST_CODE 68
#define XOR_INST_CODE 69
#define MULXSS_INST_CODE 70
#define CMPEQ_INST_CODE 71
#define SND_INST_CODE 72
#define RDCTL_INST_CODE 73
#define MUL_INST_CODE 74
#define CMPGEU_INST_CODE 75
#define RCV_INST_CODE 76
#define WRCTL_INST_CODE 77
#define CMPLTU_INST_CODE 78
#define ADD_INST_CODE 79
#define TXALLOC_INST_CODE 80
#define JREL_INST_CODE 81
#define SUB_INST_CODE 82
#define RXFREE_INST_CODE 83
#define SRA_INST_CODE 84
#define CUSTOM_INST_CODE 85
#define RSV_INST_CODE 86
#define NUM_INST_CODES 87

#ifndef ALT_ASM_SRC
/* Instruction information entry */
typedef struct {
  const char* name;     /* Assembly-language instruction name */
  int         instType; /* INST_TYPE_* */
  unsigned    opcode;   /* Value of field used to index into table */
} INSTINFO;

extern INSTINFO InstInfo[NUM_INST_CODES];

/* Returns the instruction code given the 32-bit instruction word */
#define GET_INST_CODE(Iw) (get_inst_code(Iw))

extern int get_inst_code(unsigned int iw);
#endif /* ALT_ASM_SRC */

#ifndef ALT_ASM_SRC
extern int op_to_inst_code[16];
#endif /* ALT_ASM_SRC */

#ifndef ALT_ASM_SRC
extern int ix_to_inst_code[4];
#endif /* ALT_ASM_SRC */

#ifndef ALT_ASM_SRC
extern int i12a_to_inst_code[16];
#endif /* ALT_ASM_SRC */

#ifndef ALT_ASM_SRC
extern int i12b_to_inst_code[16];
#endif /* ALT_ASM_SRC */

#ifndef ALT_ASM_SRC
extern int i5_to_inst_code[8];
#endif /* ALT_ASM_SRC */

#ifndef ALT_ASM_SRC
extern int r3_to_inst_code[64];
#endif /* ALT_ASM_SRC */

#ifndef ALT_ASM_SRC
extern int dcache_to_inst_code[4];
#endif /* ALT_ASM_SRC */

/* Exception Constants */
#define BREAK_INST_EXC_ID 6
#define CPU_RESET_CAUSE_CODE 1
#define CPU_RESET_EXC_ID 1
#define HBREAK_EXC_ID 2
#define ILLEGAL_INST_CAUSE_CODE 5
#define ILLEGAL_INST_EXC_ID 5
#define MAX_CAUSE_CODE 8
#define MISALIGNED_DATA_ADDR_CAUSE_CODE 6
#define MISALIGNED_DATA_ADDR_EXC_ID 7
#define MISALIGNED_TARGET_PC_CAUSE_CODE 7
#define MISALIGNED_TARGET_PC_EXC_ID 8
#define NONE_EXC_ID 0
#define NORM_INTR_CAUSE_CODE 2
#define NUM_EXC_IDS 9
#define RECORD_DATA_ADDR 2
#define RECORD_NOTHING 0
#define RECORD_TARGET_PCB 1
#define RESET_CAUSE_CODE 0
#define TRAP_INST_CAUSE_CODE 3
#define TRAP_INST_EXC_ID 3
#define UNIMP_INST_CAUSE_CODE 4
#define UNIMP_INST_EXC_ID 4

/* Exception Information */
#ifndef ALT_ASM_SRC
typedef struct {
    const char* name;
    int priority;
    int subPriority; /* -1 if none */
    int causeId; /* -1 if none */
    int recordAddr;
} EXCINFO;

extern EXCINFO excInfo[NUM_EXC_IDS];
#endif /* ALT_ASM_SRC */

#endif /* _NIOS2DPX_ISA_H_ */
