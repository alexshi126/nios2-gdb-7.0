/*
 * This file defines Nios II instruction set constants.
 * To include it in assembly code (.S file), define ALT_ASM_SRC
 * before including this file.
 *
 * This file is automatically generated by gen_isa.pl - do not edit
 */

#ifndef _NIOS2_ISA_H_
#define _NIOS2_ISA_H_

#ifndef _NIOS_ISA_CONSTANTS_
#define _NIOS_ISA_CONSTANTS_
/* Nios-based CPU ISA Constants */
#define NIOS_DISPLAY_INST_TRACE 1
#define NIOS_DISPLAY_MEM_TRAFFIC 2
#define CACHE_MAX_BYTES 65536
#define CACHE_MAX_LINE_BYTES 32
#define CACHE_MIN_LINE_BYTES 4
#define DATAPATH_LOG2_SZ 5
#define DATAPATH_LSB 0
#define DATAPATH_MSB 31
#define DATAPATH_SZ 32
#define IW_SZ 32
#define REGNUM_SZ 5
#define RF_ADDR_SZ 5
#define RF_NUM_REG 32
#define TLB_PRESENT 1
#endif /* _NIOS_ISA_CONSTANTS_ */

/* Generic ISA Constants */
#define AT_REGNUM 1
#define AT_REGNUM_INT 1
#define BRETADDR_REGNUM 30
#define BRETADDR_REGNUM_INT 30
#define BT_REGNUM 25
#define BT_REGNUM_INT 25
#define EIC_PORT_LSB 0
#define EIC_PORT_MSB 44
#define EIC_PORT_RHA_LSB 13
#define EIC_PORT_RHA_MSB 44
#define EIC_PORT_RHA_SZ 32
#define EIC_PORT_RIL_LSB 0
#define EIC_PORT_RIL_MSB 5
#define EIC_PORT_RIL_SZ 6
#define EIC_PORT_RNMI_LSB 6
#define EIC_PORT_RNMI_MSB 6
#define EIC_PORT_RNMI_SZ 1
#define EIC_PORT_RRS_LSB 7
#define EIC_PORT_RRS_MSB 12
#define EIC_PORT_RRS_SZ 6
#define EIC_PORT_SZ 45
#define ERETADDR_REGNUM 29
#define ERETADDR_REGNUM_INT 29
#define ET_REGNUM 24
#define ET_REGNUM_INT 24
#define FP_REGNUM 28
#define FP_REGNUM_INT 28
#define GP_REGNUM 26
#define GP_REGNUM_INT 26
#define INTERRUPT_SZ 32
#define MAX_REGISTER_SETS 64
#define MAX_SHADOW_REGISTER_SETS 63
#define RETADDR_REGNUM 31
#define RETADDR_REGNUM_INT 31
#define SP_REGNUM 27
#define SP_REGNUM_INT 27
#define SSTATUS_REGNUM 30
#define SSTATUS_REGNUM_INT 30

/*
 * Control register macros
 */

/* STATUS register */
#define STATUS_REG_REGNUM 0
#define STATUS_REG_LSB 0
#define STATUS_REG_MSB 23
#define STATUS_REG_SZ 24
#define STATUS_REG_UNSHIFTED_MASK 0xffffff
#define STATUS_REG_SHIFTED_MASK 0xffffff
#define STATUS_REG_MASK (STATUS_REG_SHIFTED_MASK)
#define STATUS_REG_PIE_LSB 0
#define STATUS_REG_PIE_MSB 0
#define STATUS_REG_PIE_SZ 1
#define STATUS_REG_PIE_UNSHIFTED_MASK 0x1
#define STATUS_REG_PIE_SHIFTED_MASK 0x1
#define STATUS_REG_PIE_MASK (STATUS_REG_PIE_UNSHIFTED_MASK)
#define GET_STATUS_REG_PIE(Reg) \
    (((Reg) >> STATUS_REG_PIE_LSB) & STATUS_REG_PIE_UNSHIFTED_MASK)
#define SET_STATUS_REG_PIE(Reg, Val) \
    Reg = (((Reg) & (~STATUS_REG_PIE_SHIFTED_MASK)) | \
         (((Val) & STATUS_REG_PIE_UNSHIFTED_MASK) << STATUS_REG_PIE_LSB))
#define STATUS_REG_U_LSB 1
#define STATUS_REG_U_MSB 1
#define STATUS_REG_U_SZ 1
#define STATUS_REG_U_UNSHIFTED_MASK 0x1
#define STATUS_REG_U_SHIFTED_MASK 0x2
#define STATUS_REG_U_MASK (STATUS_REG_U_UNSHIFTED_MASK)
#define GET_STATUS_REG_U(Reg) \
    (((Reg) >> STATUS_REG_U_LSB) & STATUS_REG_U_UNSHIFTED_MASK)
#define SET_STATUS_REG_U(Reg, Val) \
    Reg = (((Reg) & (~STATUS_REG_U_SHIFTED_MASK)) | \
         (((Val) & STATUS_REG_U_UNSHIFTED_MASK) << STATUS_REG_U_LSB))
#define STATUS_REG_EH_LSB 2
#define STATUS_REG_EH_MSB 2
#define STATUS_REG_EH_SZ 1
#define STATUS_REG_EH_UNSHIFTED_MASK 0x1
#define STATUS_REG_EH_SHIFTED_MASK 0x4
#define STATUS_REG_EH_MASK (STATUS_REG_EH_UNSHIFTED_MASK)
#define GET_STATUS_REG_EH(Reg) \
    (((Reg) >> STATUS_REG_EH_LSB) & STATUS_REG_EH_UNSHIFTED_MASK)
#define SET_STATUS_REG_EH(Reg, Val) \
    Reg = (((Reg) & (~STATUS_REG_EH_SHIFTED_MASK)) | \
         (((Val) & STATUS_REG_EH_UNSHIFTED_MASK) << STATUS_REG_EH_LSB))
#define STATUS_REG_IH_LSB 3
#define STATUS_REG_IH_MSB 3
#define STATUS_REG_IH_SZ 1
#define STATUS_REG_IH_UNSHIFTED_MASK 0x1
#define STATUS_REG_IH_SHIFTED_MASK 0x8
#define STATUS_REG_IH_MASK (STATUS_REG_IH_UNSHIFTED_MASK)
#define GET_STATUS_REG_IH(Reg) \
    (((Reg) >> STATUS_REG_IH_LSB) & STATUS_REG_IH_UNSHIFTED_MASK)
#define SET_STATUS_REG_IH(Reg, Val) \
    Reg = (((Reg) & (~STATUS_REG_IH_SHIFTED_MASK)) | \
         (((Val) & STATUS_REG_IH_UNSHIFTED_MASK) << STATUS_REG_IH_LSB))
#define STATUS_REG_IL_LSB 4
#define STATUS_REG_IL_MSB 9
#define STATUS_REG_IL_SZ 6
#define STATUS_REG_IL_UNSHIFTED_MASK 0x3f
#define STATUS_REG_IL_SHIFTED_MASK 0x3f0
#define STATUS_REG_IL_MASK (STATUS_REG_IL_UNSHIFTED_MASK)
#define GET_STATUS_REG_IL(Reg) \
    (((Reg) >> STATUS_REG_IL_LSB) & STATUS_REG_IL_UNSHIFTED_MASK)
#define SET_STATUS_REG_IL(Reg, Val) \
    Reg = (((Reg) & (~STATUS_REG_IL_SHIFTED_MASK)) | \
         (((Val) & STATUS_REG_IL_UNSHIFTED_MASK) << STATUS_REG_IL_LSB))
#define STATUS_REG_NMI_LSB 22
#define STATUS_REG_NMI_MSB 22
#define STATUS_REG_NMI_SZ 1
#define STATUS_REG_NMI_UNSHIFTED_MASK 0x1
#define STATUS_REG_NMI_SHIFTED_MASK 0x400000
#define STATUS_REG_NMI_MASK (STATUS_REG_NMI_UNSHIFTED_MASK)
#define GET_STATUS_REG_NMI(Reg) \
    (((Reg) >> STATUS_REG_NMI_LSB) & STATUS_REG_NMI_UNSHIFTED_MASK)
#define SET_STATUS_REG_NMI(Reg, Val) \
    Reg = (((Reg) & (~STATUS_REG_NMI_SHIFTED_MASK)) | \
         (((Val) & STATUS_REG_NMI_UNSHIFTED_MASK) << STATUS_REG_NMI_LSB))
#define STATUS_REG_RSIE_LSB 23
#define STATUS_REG_RSIE_MSB 23
#define STATUS_REG_RSIE_SZ 1
#define STATUS_REG_RSIE_UNSHIFTED_MASK 0x1
#define STATUS_REG_RSIE_SHIFTED_MASK 0x800000
#define STATUS_REG_RSIE_MASK (STATUS_REG_RSIE_UNSHIFTED_MASK)
#define GET_STATUS_REG_RSIE(Reg) \
    (((Reg) >> STATUS_REG_RSIE_LSB) & STATUS_REG_RSIE_UNSHIFTED_MASK)
#define SET_STATUS_REG_RSIE(Reg, Val) \
    Reg = (((Reg) & (~STATUS_REG_RSIE_SHIFTED_MASK)) | \
         (((Val) & STATUS_REG_RSIE_UNSHIFTED_MASK) << STATUS_REG_RSIE_LSB))
#define STATUS_REG_CRS_LSB 10
#define STATUS_REG_CRS_MSB 15
#define STATUS_REG_CRS_SZ 6
#define STATUS_REG_CRS_UNSHIFTED_MASK 0x3f
#define STATUS_REG_CRS_SHIFTED_MASK 0xfc00
#define STATUS_REG_CRS_MASK (STATUS_REG_CRS_UNSHIFTED_MASK)
#define GET_STATUS_REG_CRS(Reg) \
    (((Reg) >> STATUS_REG_CRS_LSB) & STATUS_REG_CRS_UNSHIFTED_MASK)
#define SET_STATUS_REG_CRS(Reg, Val) \
    Reg = (((Reg) & (~STATUS_REG_CRS_SHIFTED_MASK)) | \
         (((Val) & STATUS_REG_CRS_UNSHIFTED_MASK) << STATUS_REG_CRS_LSB))
#define STATUS_REG_PRS_LSB 16
#define STATUS_REG_PRS_MSB 21
#define STATUS_REG_PRS_SZ 6
#define STATUS_REG_PRS_UNSHIFTED_MASK 0x3f
#define STATUS_REG_PRS_SHIFTED_MASK 0x3f0000
#define STATUS_REG_PRS_MASK (STATUS_REG_PRS_UNSHIFTED_MASK)
#define GET_STATUS_REG_PRS(Reg) \
    (((Reg) >> STATUS_REG_PRS_LSB) & STATUS_REG_PRS_UNSHIFTED_MASK)
#define SET_STATUS_REG_PRS(Reg, Val) \
    Reg = (((Reg) & (~STATUS_REG_PRS_SHIFTED_MASK)) | \
         (((Val) & STATUS_REG_PRS_UNSHIFTED_MASK) << STATUS_REG_PRS_LSB))
#define STATUS_REG_RSV0_LSB 24
#define STATUS_REG_RSV0_MSB 31
#define STATUS_REG_RSV0_SZ 8
#define STATUS_REG_RSV0_UNSHIFTED_MASK 0xff
#define STATUS_REG_RSV0_SHIFTED_MASK 0xff000000
#define STATUS_REG_RSV0_MASK (STATUS_REG_RSV0_UNSHIFTED_MASK)
#define GET_STATUS_REG_RSV0(Reg) \
    (((Reg) >> STATUS_REG_RSV0_LSB) & STATUS_REG_RSV0_UNSHIFTED_MASK)
#define SET_STATUS_REG_RSV0(Reg, Val) \
    Reg = (((Reg) & (~STATUS_REG_RSV0_SHIFTED_MASK)) | \
         (((Val) & STATUS_REG_RSV0_UNSHIFTED_MASK) << STATUS_REG_RSV0_LSB))

/* ESTATUS register */
#define ESTATUS_REG_REGNUM 1
#define ESTATUS_REG_LSB 0
#define ESTATUS_REG_MSB 23
#define ESTATUS_REG_SZ 24
#define ESTATUS_REG_UNSHIFTED_MASK 0xffffff
#define ESTATUS_REG_SHIFTED_MASK 0xffffff
#define ESTATUS_REG_MASK (ESTATUS_REG_SHIFTED_MASK)
#define ESTATUS_REG_PIE_LSB 0
#define ESTATUS_REG_PIE_MSB 0
#define ESTATUS_REG_PIE_SZ 1
#define ESTATUS_REG_PIE_UNSHIFTED_MASK 0x1
#define ESTATUS_REG_PIE_SHIFTED_MASK 0x1
#define ESTATUS_REG_PIE_MASK (ESTATUS_REG_PIE_UNSHIFTED_MASK)
#define GET_ESTATUS_REG_PIE(Reg) \
    (((Reg) >> ESTATUS_REG_PIE_LSB) & ESTATUS_REG_PIE_UNSHIFTED_MASK)
#define SET_ESTATUS_REG_PIE(Reg, Val) \
    Reg = (((Reg) & (~ESTATUS_REG_PIE_SHIFTED_MASK)) | \
         (((Val) & ESTATUS_REG_PIE_UNSHIFTED_MASK) << ESTATUS_REG_PIE_LSB))
#define ESTATUS_REG_U_LSB 1
#define ESTATUS_REG_U_MSB 1
#define ESTATUS_REG_U_SZ 1
#define ESTATUS_REG_U_UNSHIFTED_MASK 0x1
#define ESTATUS_REG_U_SHIFTED_MASK 0x2
#define ESTATUS_REG_U_MASK (ESTATUS_REG_U_UNSHIFTED_MASK)
#define GET_ESTATUS_REG_U(Reg) \
    (((Reg) >> ESTATUS_REG_U_LSB) & ESTATUS_REG_U_UNSHIFTED_MASK)
#define SET_ESTATUS_REG_U(Reg, Val) \
    Reg = (((Reg) & (~ESTATUS_REG_U_SHIFTED_MASK)) | \
         (((Val) & ESTATUS_REG_U_UNSHIFTED_MASK) << ESTATUS_REG_U_LSB))
#define ESTATUS_REG_EH_LSB 2
#define ESTATUS_REG_EH_MSB 2
#define ESTATUS_REG_EH_SZ 1
#define ESTATUS_REG_EH_UNSHIFTED_MASK 0x1
#define ESTATUS_REG_EH_SHIFTED_MASK 0x4
#define ESTATUS_REG_EH_MASK (ESTATUS_REG_EH_UNSHIFTED_MASK)
#define GET_ESTATUS_REG_EH(Reg) \
    (((Reg) >> ESTATUS_REG_EH_LSB) & ESTATUS_REG_EH_UNSHIFTED_MASK)
#define SET_ESTATUS_REG_EH(Reg, Val) \
    Reg = (((Reg) & (~ESTATUS_REG_EH_SHIFTED_MASK)) | \
         (((Val) & ESTATUS_REG_EH_UNSHIFTED_MASK) << ESTATUS_REG_EH_LSB))
#define ESTATUS_REG_IH_LSB 3
#define ESTATUS_REG_IH_MSB 3
#define ESTATUS_REG_IH_SZ 1
#define ESTATUS_REG_IH_UNSHIFTED_MASK 0x1
#define ESTATUS_REG_IH_SHIFTED_MASK 0x8
#define ESTATUS_REG_IH_MASK (ESTATUS_REG_IH_UNSHIFTED_MASK)
#define GET_ESTATUS_REG_IH(Reg) \
    (((Reg) >> ESTATUS_REG_IH_LSB) & ESTATUS_REG_IH_UNSHIFTED_MASK)
#define SET_ESTATUS_REG_IH(Reg, Val) \
    Reg = (((Reg) & (~ESTATUS_REG_IH_SHIFTED_MASK)) | \
         (((Val) & ESTATUS_REG_IH_UNSHIFTED_MASK) << ESTATUS_REG_IH_LSB))
#define ESTATUS_REG_IL_LSB 4
#define ESTATUS_REG_IL_MSB 9
#define ESTATUS_REG_IL_SZ 6
#define ESTATUS_REG_IL_UNSHIFTED_MASK 0x3f
#define ESTATUS_REG_IL_SHIFTED_MASK 0x3f0
#define ESTATUS_REG_IL_MASK (ESTATUS_REG_IL_UNSHIFTED_MASK)
#define GET_ESTATUS_REG_IL(Reg) \
    (((Reg) >> ESTATUS_REG_IL_LSB) & ESTATUS_REG_IL_UNSHIFTED_MASK)
#define SET_ESTATUS_REG_IL(Reg, Val) \
    Reg = (((Reg) & (~ESTATUS_REG_IL_SHIFTED_MASK)) | \
         (((Val) & ESTATUS_REG_IL_UNSHIFTED_MASK) << ESTATUS_REG_IL_LSB))
#define ESTATUS_REG_NMI_LSB 22
#define ESTATUS_REG_NMI_MSB 22
#define ESTATUS_REG_NMI_SZ 1
#define ESTATUS_REG_NMI_UNSHIFTED_MASK 0x1
#define ESTATUS_REG_NMI_SHIFTED_MASK 0x400000
#define ESTATUS_REG_NMI_MASK (ESTATUS_REG_NMI_UNSHIFTED_MASK)
#define GET_ESTATUS_REG_NMI(Reg) \
    (((Reg) >> ESTATUS_REG_NMI_LSB) & ESTATUS_REG_NMI_UNSHIFTED_MASK)
#define SET_ESTATUS_REG_NMI(Reg, Val) \
    Reg = (((Reg) & (~ESTATUS_REG_NMI_SHIFTED_MASK)) | \
         (((Val) & ESTATUS_REG_NMI_UNSHIFTED_MASK) << ESTATUS_REG_NMI_LSB))
#define ESTATUS_REG_RSIE_LSB 23
#define ESTATUS_REG_RSIE_MSB 23
#define ESTATUS_REG_RSIE_SZ 1
#define ESTATUS_REG_RSIE_UNSHIFTED_MASK 0x1
#define ESTATUS_REG_RSIE_SHIFTED_MASK 0x800000
#define ESTATUS_REG_RSIE_MASK (ESTATUS_REG_RSIE_UNSHIFTED_MASK)
#define GET_ESTATUS_REG_RSIE(Reg) \
    (((Reg) >> ESTATUS_REG_RSIE_LSB) & ESTATUS_REG_RSIE_UNSHIFTED_MASK)
#define SET_ESTATUS_REG_RSIE(Reg, Val) \
    Reg = (((Reg) & (~ESTATUS_REG_RSIE_SHIFTED_MASK)) | \
         (((Val) & ESTATUS_REG_RSIE_UNSHIFTED_MASK) << ESTATUS_REG_RSIE_LSB))
#define ESTATUS_REG_CRS_LSB 10
#define ESTATUS_REG_CRS_MSB 15
#define ESTATUS_REG_CRS_SZ 6
#define ESTATUS_REG_CRS_UNSHIFTED_MASK 0x3f
#define ESTATUS_REG_CRS_SHIFTED_MASK 0xfc00
#define ESTATUS_REG_CRS_MASK (ESTATUS_REG_CRS_UNSHIFTED_MASK)
#define GET_ESTATUS_REG_CRS(Reg) \
    (((Reg) >> ESTATUS_REG_CRS_LSB) & ESTATUS_REG_CRS_UNSHIFTED_MASK)
#define SET_ESTATUS_REG_CRS(Reg, Val) \
    Reg = (((Reg) & (~ESTATUS_REG_CRS_SHIFTED_MASK)) | \
         (((Val) & ESTATUS_REG_CRS_UNSHIFTED_MASK) << ESTATUS_REG_CRS_LSB))
#define ESTATUS_REG_PRS_LSB 16
#define ESTATUS_REG_PRS_MSB 21
#define ESTATUS_REG_PRS_SZ 6
#define ESTATUS_REG_PRS_UNSHIFTED_MASK 0x3f
#define ESTATUS_REG_PRS_SHIFTED_MASK 0x3f0000
#define ESTATUS_REG_PRS_MASK (ESTATUS_REG_PRS_UNSHIFTED_MASK)
#define GET_ESTATUS_REG_PRS(Reg) \
    (((Reg) >> ESTATUS_REG_PRS_LSB) & ESTATUS_REG_PRS_UNSHIFTED_MASK)
#define SET_ESTATUS_REG_PRS(Reg, Val) \
    Reg = (((Reg) & (~ESTATUS_REG_PRS_SHIFTED_MASK)) | \
         (((Val) & ESTATUS_REG_PRS_UNSHIFTED_MASK) << ESTATUS_REG_PRS_LSB))
#define ESTATUS_REG_RSV0_LSB 24
#define ESTATUS_REG_RSV0_MSB 31
#define ESTATUS_REG_RSV0_SZ 8
#define ESTATUS_REG_RSV0_UNSHIFTED_MASK 0xff
#define ESTATUS_REG_RSV0_SHIFTED_MASK 0xff000000
#define ESTATUS_REG_RSV0_MASK (ESTATUS_REG_RSV0_UNSHIFTED_MASK)
#define GET_ESTATUS_REG_RSV0(Reg) \
    (((Reg) >> ESTATUS_REG_RSV0_LSB) & ESTATUS_REG_RSV0_UNSHIFTED_MASK)
#define SET_ESTATUS_REG_RSV0(Reg, Val) \
    Reg = (((Reg) & (~ESTATUS_REG_RSV0_SHIFTED_MASK)) | \
         (((Val) & ESTATUS_REG_RSV0_UNSHIFTED_MASK) << ESTATUS_REG_RSV0_LSB))

/* BSTATUS register */
#define BSTATUS_REG_REGNUM 2
#define BSTATUS_REG_LSB 0
#define BSTATUS_REG_MSB 23
#define BSTATUS_REG_SZ 24
#define BSTATUS_REG_UNSHIFTED_MASK 0xffffff
#define BSTATUS_REG_SHIFTED_MASK 0xffffff
#define BSTATUS_REG_MASK (BSTATUS_REG_SHIFTED_MASK)
#define BSTATUS_REG_PIE_LSB 0
#define BSTATUS_REG_PIE_MSB 0
#define BSTATUS_REG_PIE_SZ 1
#define BSTATUS_REG_PIE_UNSHIFTED_MASK 0x1
#define BSTATUS_REG_PIE_SHIFTED_MASK 0x1
#define BSTATUS_REG_PIE_MASK (BSTATUS_REG_PIE_UNSHIFTED_MASK)
#define GET_BSTATUS_REG_PIE(Reg) \
    (((Reg) >> BSTATUS_REG_PIE_LSB) & BSTATUS_REG_PIE_UNSHIFTED_MASK)
#define SET_BSTATUS_REG_PIE(Reg, Val) \
    Reg = (((Reg) & (~BSTATUS_REG_PIE_SHIFTED_MASK)) | \
         (((Val) & BSTATUS_REG_PIE_UNSHIFTED_MASK) << BSTATUS_REG_PIE_LSB))
#define BSTATUS_REG_U_LSB 1
#define BSTATUS_REG_U_MSB 1
#define BSTATUS_REG_U_SZ 1
#define BSTATUS_REG_U_UNSHIFTED_MASK 0x1
#define BSTATUS_REG_U_SHIFTED_MASK 0x2
#define BSTATUS_REG_U_MASK (BSTATUS_REG_U_UNSHIFTED_MASK)
#define GET_BSTATUS_REG_U(Reg) \
    (((Reg) >> BSTATUS_REG_U_LSB) & BSTATUS_REG_U_UNSHIFTED_MASK)
#define SET_BSTATUS_REG_U(Reg, Val) \
    Reg = (((Reg) & (~BSTATUS_REG_U_SHIFTED_MASK)) | \
         (((Val) & BSTATUS_REG_U_UNSHIFTED_MASK) << BSTATUS_REG_U_LSB))
#define BSTATUS_REG_EH_LSB 2
#define BSTATUS_REG_EH_MSB 2
#define BSTATUS_REG_EH_SZ 1
#define BSTATUS_REG_EH_UNSHIFTED_MASK 0x1
#define BSTATUS_REG_EH_SHIFTED_MASK 0x4
#define BSTATUS_REG_EH_MASK (BSTATUS_REG_EH_UNSHIFTED_MASK)
#define GET_BSTATUS_REG_EH(Reg) \
    (((Reg) >> BSTATUS_REG_EH_LSB) & BSTATUS_REG_EH_UNSHIFTED_MASK)
#define SET_BSTATUS_REG_EH(Reg, Val) \
    Reg = (((Reg) & (~BSTATUS_REG_EH_SHIFTED_MASK)) | \
         (((Val) & BSTATUS_REG_EH_UNSHIFTED_MASK) << BSTATUS_REG_EH_LSB))
#define BSTATUS_REG_IH_LSB 3
#define BSTATUS_REG_IH_MSB 3
#define BSTATUS_REG_IH_SZ 1
#define BSTATUS_REG_IH_UNSHIFTED_MASK 0x1
#define BSTATUS_REG_IH_SHIFTED_MASK 0x8
#define BSTATUS_REG_IH_MASK (BSTATUS_REG_IH_UNSHIFTED_MASK)
#define GET_BSTATUS_REG_IH(Reg) \
    (((Reg) >> BSTATUS_REG_IH_LSB) & BSTATUS_REG_IH_UNSHIFTED_MASK)
#define SET_BSTATUS_REG_IH(Reg, Val) \
    Reg = (((Reg) & (~BSTATUS_REG_IH_SHIFTED_MASK)) | \
         (((Val) & BSTATUS_REG_IH_UNSHIFTED_MASK) << BSTATUS_REG_IH_LSB))
#define BSTATUS_REG_IL_LSB 4
#define BSTATUS_REG_IL_MSB 9
#define BSTATUS_REG_IL_SZ 6
#define BSTATUS_REG_IL_UNSHIFTED_MASK 0x3f
#define BSTATUS_REG_IL_SHIFTED_MASK 0x3f0
#define BSTATUS_REG_IL_MASK (BSTATUS_REG_IL_UNSHIFTED_MASK)
#define GET_BSTATUS_REG_IL(Reg) \
    (((Reg) >> BSTATUS_REG_IL_LSB) & BSTATUS_REG_IL_UNSHIFTED_MASK)
#define SET_BSTATUS_REG_IL(Reg, Val) \
    Reg = (((Reg) & (~BSTATUS_REG_IL_SHIFTED_MASK)) | \
         (((Val) & BSTATUS_REG_IL_UNSHIFTED_MASK) << BSTATUS_REG_IL_LSB))
#define BSTATUS_REG_NMI_LSB 22
#define BSTATUS_REG_NMI_MSB 22
#define BSTATUS_REG_NMI_SZ 1
#define BSTATUS_REG_NMI_UNSHIFTED_MASK 0x1
#define BSTATUS_REG_NMI_SHIFTED_MASK 0x400000
#define BSTATUS_REG_NMI_MASK (BSTATUS_REG_NMI_UNSHIFTED_MASK)
#define GET_BSTATUS_REG_NMI(Reg) \
    (((Reg) >> BSTATUS_REG_NMI_LSB) & BSTATUS_REG_NMI_UNSHIFTED_MASK)
#define SET_BSTATUS_REG_NMI(Reg, Val) \
    Reg = (((Reg) & (~BSTATUS_REG_NMI_SHIFTED_MASK)) | \
         (((Val) & BSTATUS_REG_NMI_UNSHIFTED_MASK) << BSTATUS_REG_NMI_LSB))
#define BSTATUS_REG_RSIE_LSB 23
#define BSTATUS_REG_RSIE_MSB 23
#define BSTATUS_REG_RSIE_SZ 1
#define BSTATUS_REG_RSIE_UNSHIFTED_MASK 0x1
#define BSTATUS_REG_RSIE_SHIFTED_MASK 0x800000
#define BSTATUS_REG_RSIE_MASK (BSTATUS_REG_RSIE_UNSHIFTED_MASK)
#define GET_BSTATUS_REG_RSIE(Reg) \
    (((Reg) >> BSTATUS_REG_RSIE_LSB) & BSTATUS_REG_RSIE_UNSHIFTED_MASK)
#define SET_BSTATUS_REG_RSIE(Reg, Val) \
    Reg = (((Reg) & (~BSTATUS_REG_RSIE_SHIFTED_MASK)) | \
         (((Val) & BSTATUS_REG_RSIE_UNSHIFTED_MASK) << BSTATUS_REG_RSIE_LSB))
#define BSTATUS_REG_CRS_LSB 10
#define BSTATUS_REG_CRS_MSB 15
#define BSTATUS_REG_CRS_SZ 6
#define BSTATUS_REG_CRS_UNSHIFTED_MASK 0x3f
#define BSTATUS_REG_CRS_SHIFTED_MASK 0xfc00
#define BSTATUS_REG_CRS_MASK (BSTATUS_REG_CRS_UNSHIFTED_MASK)
#define GET_BSTATUS_REG_CRS(Reg) \
    (((Reg) >> BSTATUS_REG_CRS_LSB) & BSTATUS_REG_CRS_UNSHIFTED_MASK)
#define SET_BSTATUS_REG_CRS(Reg, Val) \
    Reg = (((Reg) & (~BSTATUS_REG_CRS_SHIFTED_MASK)) | \
         (((Val) & BSTATUS_REG_CRS_UNSHIFTED_MASK) << BSTATUS_REG_CRS_LSB))
#define BSTATUS_REG_PRS_LSB 16
#define BSTATUS_REG_PRS_MSB 21
#define BSTATUS_REG_PRS_SZ 6
#define BSTATUS_REG_PRS_UNSHIFTED_MASK 0x3f
#define BSTATUS_REG_PRS_SHIFTED_MASK 0x3f0000
#define BSTATUS_REG_PRS_MASK (BSTATUS_REG_PRS_UNSHIFTED_MASK)
#define GET_BSTATUS_REG_PRS(Reg) \
    (((Reg) >> BSTATUS_REG_PRS_LSB) & BSTATUS_REG_PRS_UNSHIFTED_MASK)
#define SET_BSTATUS_REG_PRS(Reg, Val) \
    Reg = (((Reg) & (~BSTATUS_REG_PRS_SHIFTED_MASK)) | \
         (((Val) & BSTATUS_REG_PRS_UNSHIFTED_MASK) << BSTATUS_REG_PRS_LSB))
#define BSTATUS_REG_RSV0_LSB 24
#define BSTATUS_REG_RSV0_MSB 31
#define BSTATUS_REG_RSV0_SZ 8
#define BSTATUS_REG_RSV0_UNSHIFTED_MASK 0xff
#define BSTATUS_REG_RSV0_SHIFTED_MASK 0xff000000
#define BSTATUS_REG_RSV0_MASK (BSTATUS_REG_RSV0_UNSHIFTED_MASK)
#define GET_BSTATUS_REG_RSV0(Reg) \
    (((Reg) >> BSTATUS_REG_RSV0_LSB) & BSTATUS_REG_RSV0_UNSHIFTED_MASK)
#define SET_BSTATUS_REG_RSV0(Reg, Val) \
    Reg = (((Reg) & (~BSTATUS_REG_RSV0_SHIFTED_MASK)) | \
         (((Val) & BSTATUS_REG_RSV0_UNSHIFTED_MASK) << BSTATUS_REG_RSV0_LSB))

/* IENABLE register */
#define IENABLE_REG_REGNUM 3
#define IENABLE_REG_LSB 0
#define IENABLE_REG_MSB 31
#define IENABLE_REG_SZ 32
#define IENABLE_REG_UNSHIFTED_MASK 0xffffffff
#define IENABLE_REG_SHIFTED_MASK 0xffffffff
#define IENABLE_REG_MASK (IENABLE_REG_SHIFTED_MASK)
#define IENABLE_REG_IRQ0_LSB 0
#define IENABLE_REG_IRQ0_MSB 0
#define IENABLE_REG_IRQ0_SZ 1
#define IENABLE_REG_IRQ0_UNSHIFTED_MASK 0x1
#define IENABLE_REG_IRQ0_SHIFTED_MASK 0x1
#define IENABLE_REG_IRQ0_MASK (IENABLE_REG_IRQ0_UNSHIFTED_MASK)
#define GET_IENABLE_REG_IRQ0(Reg) \
    (((Reg) >> IENABLE_REG_IRQ0_LSB) & IENABLE_REG_IRQ0_UNSHIFTED_MASK)
#define SET_IENABLE_REG_IRQ0(Reg, Val) \
    Reg = (((Reg) & (~IENABLE_REG_IRQ0_SHIFTED_MASK)) | \
         (((Val) & IENABLE_REG_IRQ0_UNSHIFTED_MASK) << IENABLE_REG_IRQ0_LSB))
#define IENABLE_REG_IRQ1_LSB 1
#define IENABLE_REG_IRQ1_MSB 1
#define IENABLE_REG_IRQ1_SZ 1
#define IENABLE_REG_IRQ1_UNSHIFTED_MASK 0x1
#define IENABLE_REG_IRQ1_SHIFTED_MASK 0x2
#define IENABLE_REG_IRQ1_MASK (IENABLE_REG_IRQ1_UNSHIFTED_MASK)
#define GET_IENABLE_REG_IRQ1(Reg) \
    (((Reg) >> IENABLE_REG_IRQ1_LSB) & IENABLE_REG_IRQ1_UNSHIFTED_MASK)
#define SET_IENABLE_REG_IRQ1(Reg, Val) \
    Reg = (((Reg) & (~IENABLE_REG_IRQ1_SHIFTED_MASK)) | \
         (((Val) & IENABLE_REG_IRQ1_UNSHIFTED_MASK) << IENABLE_REG_IRQ1_LSB))
#define IENABLE_REG_IRQ2_LSB 2
#define IENABLE_REG_IRQ2_MSB 2
#define IENABLE_REG_IRQ2_SZ 1
#define IENABLE_REG_IRQ2_UNSHIFTED_MASK 0x1
#define IENABLE_REG_IRQ2_SHIFTED_MASK 0x4
#define IENABLE_REG_IRQ2_MASK (IENABLE_REG_IRQ2_UNSHIFTED_MASK)
#define GET_IENABLE_REG_IRQ2(Reg) \
    (((Reg) >> IENABLE_REG_IRQ2_LSB) & IENABLE_REG_IRQ2_UNSHIFTED_MASK)
#define SET_IENABLE_REG_IRQ2(Reg, Val) \
    Reg = (((Reg) & (~IENABLE_REG_IRQ2_SHIFTED_MASK)) | \
         (((Val) & IENABLE_REG_IRQ2_UNSHIFTED_MASK) << IENABLE_REG_IRQ2_LSB))
#define IENABLE_REG_IRQ3_LSB 3
#define IENABLE_REG_IRQ3_MSB 3
#define IENABLE_REG_IRQ3_SZ 1
#define IENABLE_REG_IRQ3_UNSHIFTED_MASK 0x1
#define IENABLE_REG_IRQ3_SHIFTED_MASK 0x8
#define IENABLE_REG_IRQ3_MASK (IENABLE_REG_IRQ3_UNSHIFTED_MASK)
#define GET_IENABLE_REG_IRQ3(Reg) \
    (((Reg) >> IENABLE_REG_IRQ3_LSB) & IENABLE_REG_IRQ3_UNSHIFTED_MASK)
#define SET_IENABLE_REG_IRQ3(Reg, Val) \
    Reg = (((Reg) & (~IENABLE_REG_IRQ3_SHIFTED_MASK)) | \
         (((Val) & IENABLE_REG_IRQ3_UNSHIFTED_MASK) << IENABLE_REG_IRQ3_LSB))
#define IENABLE_REG_IRQ4_LSB 4
#define IENABLE_REG_IRQ4_MSB 4
#define IENABLE_REG_IRQ4_SZ 1
#define IENABLE_REG_IRQ4_UNSHIFTED_MASK 0x1
#define IENABLE_REG_IRQ4_SHIFTED_MASK 0x10
#define IENABLE_REG_IRQ4_MASK (IENABLE_REG_IRQ4_UNSHIFTED_MASK)
#define GET_IENABLE_REG_IRQ4(Reg) \
    (((Reg) >> IENABLE_REG_IRQ4_LSB) & IENABLE_REG_IRQ4_UNSHIFTED_MASK)
#define SET_IENABLE_REG_IRQ4(Reg, Val) \
    Reg = (((Reg) & (~IENABLE_REG_IRQ4_SHIFTED_MASK)) | \
         (((Val) & IENABLE_REG_IRQ4_UNSHIFTED_MASK) << IENABLE_REG_IRQ4_LSB))
#define IENABLE_REG_IRQ5_LSB 5
#define IENABLE_REG_IRQ5_MSB 5
#define IENABLE_REG_IRQ5_SZ 1
#define IENABLE_REG_IRQ5_UNSHIFTED_MASK 0x1
#define IENABLE_REG_IRQ5_SHIFTED_MASK 0x20
#define IENABLE_REG_IRQ5_MASK (IENABLE_REG_IRQ5_UNSHIFTED_MASK)
#define GET_IENABLE_REG_IRQ5(Reg) \
    (((Reg) >> IENABLE_REG_IRQ5_LSB) & IENABLE_REG_IRQ5_UNSHIFTED_MASK)
#define SET_IENABLE_REG_IRQ5(Reg, Val) \
    Reg = (((Reg) & (~IENABLE_REG_IRQ5_SHIFTED_MASK)) | \
         (((Val) & IENABLE_REG_IRQ5_UNSHIFTED_MASK) << IENABLE_REG_IRQ5_LSB))
#define IENABLE_REG_IRQ6_LSB 6
#define IENABLE_REG_IRQ6_MSB 6
#define IENABLE_REG_IRQ6_SZ 1
#define IENABLE_REG_IRQ6_UNSHIFTED_MASK 0x1
#define IENABLE_REG_IRQ6_SHIFTED_MASK 0x40
#define IENABLE_REG_IRQ6_MASK (IENABLE_REG_IRQ6_UNSHIFTED_MASK)
#define GET_IENABLE_REG_IRQ6(Reg) \
    (((Reg) >> IENABLE_REG_IRQ6_LSB) & IENABLE_REG_IRQ6_UNSHIFTED_MASK)
#define SET_IENABLE_REG_IRQ6(Reg, Val) \
    Reg = (((Reg) & (~IENABLE_REG_IRQ6_SHIFTED_MASK)) | \
         (((Val) & IENABLE_REG_IRQ6_UNSHIFTED_MASK) << IENABLE_REG_IRQ6_LSB))
#define IENABLE_REG_IRQ7_LSB 7
#define IENABLE_REG_IRQ7_MSB 7
#define IENABLE_REG_IRQ7_SZ 1
#define IENABLE_REG_IRQ7_UNSHIFTED_MASK 0x1
#define IENABLE_REG_IRQ7_SHIFTED_MASK 0x80
#define IENABLE_REG_IRQ7_MASK (IENABLE_REG_IRQ7_UNSHIFTED_MASK)
#define GET_IENABLE_REG_IRQ7(Reg) \
    (((Reg) >> IENABLE_REG_IRQ7_LSB) & IENABLE_REG_IRQ7_UNSHIFTED_MASK)
#define SET_IENABLE_REG_IRQ7(Reg, Val) \
    Reg = (((Reg) & (~IENABLE_REG_IRQ7_SHIFTED_MASK)) | \
         (((Val) & IENABLE_REG_IRQ7_UNSHIFTED_MASK) << IENABLE_REG_IRQ7_LSB))
#define IENABLE_REG_IRQ8_LSB 8
#define IENABLE_REG_IRQ8_MSB 8
#define IENABLE_REG_IRQ8_SZ 1
#define IENABLE_REG_IRQ8_UNSHIFTED_MASK 0x1
#define IENABLE_REG_IRQ8_SHIFTED_MASK 0x100
#define IENABLE_REG_IRQ8_MASK (IENABLE_REG_IRQ8_UNSHIFTED_MASK)
#define GET_IENABLE_REG_IRQ8(Reg) \
    (((Reg) >> IENABLE_REG_IRQ8_LSB) & IENABLE_REG_IRQ8_UNSHIFTED_MASK)
#define SET_IENABLE_REG_IRQ8(Reg, Val) \
    Reg = (((Reg) & (~IENABLE_REG_IRQ8_SHIFTED_MASK)) | \
         (((Val) & IENABLE_REG_IRQ8_UNSHIFTED_MASK) << IENABLE_REG_IRQ8_LSB))
#define IENABLE_REG_IRQ9_LSB 9
#define IENABLE_REG_IRQ9_MSB 9
#define IENABLE_REG_IRQ9_SZ 1
#define IENABLE_REG_IRQ9_UNSHIFTED_MASK 0x1
#define IENABLE_REG_IRQ9_SHIFTED_MASK 0x200
#define IENABLE_REG_IRQ9_MASK (IENABLE_REG_IRQ9_UNSHIFTED_MASK)
#define GET_IENABLE_REG_IRQ9(Reg) \
    (((Reg) >> IENABLE_REG_IRQ9_LSB) & IENABLE_REG_IRQ9_UNSHIFTED_MASK)
#define SET_IENABLE_REG_IRQ9(Reg, Val) \
    Reg = (((Reg) & (~IENABLE_REG_IRQ9_SHIFTED_MASK)) | \
         (((Val) & IENABLE_REG_IRQ9_UNSHIFTED_MASK) << IENABLE_REG_IRQ9_LSB))
#define IENABLE_REG_IRQ10_LSB 10
#define IENABLE_REG_IRQ10_MSB 10
#define IENABLE_REG_IRQ10_SZ 1
#define IENABLE_REG_IRQ10_UNSHIFTED_MASK 0x1
#define IENABLE_REG_IRQ10_SHIFTED_MASK 0x400
#define IENABLE_REG_IRQ10_MASK (IENABLE_REG_IRQ10_UNSHIFTED_MASK)
#define GET_IENABLE_REG_IRQ10(Reg) \
    (((Reg) >> IENABLE_REG_IRQ10_LSB) & IENABLE_REG_IRQ10_UNSHIFTED_MASK)
#define SET_IENABLE_REG_IRQ10(Reg, Val) \
    Reg = (((Reg) & (~IENABLE_REG_IRQ10_SHIFTED_MASK)) | \
         (((Val) & IENABLE_REG_IRQ10_UNSHIFTED_MASK) << IENABLE_REG_IRQ10_LSB))
#define IENABLE_REG_IRQ11_LSB 11
#define IENABLE_REG_IRQ11_MSB 11
#define IENABLE_REG_IRQ11_SZ 1
#define IENABLE_REG_IRQ11_UNSHIFTED_MASK 0x1
#define IENABLE_REG_IRQ11_SHIFTED_MASK 0x800
#define IENABLE_REG_IRQ11_MASK (IENABLE_REG_IRQ11_UNSHIFTED_MASK)
#define GET_IENABLE_REG_IRQ11(Reg) \
    (((Reg) >> IENABLE_REG_IRQ11_LSB) & IENABLE_REG_IRQ11_UNSHIFTED_MASK)
#define SET_IENABLE_REG_IRQ11(Reg, Val) \
    Reg = (((Reg) & (~IENABLE_REG_IRQ11_SHIFTED_MASK)) | \
         (((Val) & IENABLE_REG_IRQ11_UNSHIFTED_MASK) << IENABLE_REG_IRQ11_LSB))
#define IENABLE_REG_IRQ12_LSB 12
#define IENABLE_REG_IRQ12_MSB 12
#define IENABLE_REG_IRQ12_SZ 1
#define IENABLE_REG_IRQ12_UNSHIFTED_MASK 0x1
#define IENABLE_REG_IRQ12_SHIFTED_MASK 0x1000
#define IENABLE_REG_IRQ12_MASK (IENABLE_REG_IRQ12_UNSHIFTED_MASK)
#define GET_IENABLE_REG_IRQ12(Reg) \
    (((Reg) >> IENABLE_REG_IRQ12_LSB) & IENABLE_REG_IRQ12_UNSHIFTED_MASK)
#define SET_IENABLE_REG_IRQ12(Reg, Val) \
    Reg = (((Reg) & (~IENABLE_REG_IRQ12_SHIFTED_MASK)) | \
         (((Val) & IENABLE_REG_IRQ12_UNSHIFTED_MASK) << IENABLE_REG_IRQ12_LSB))
#define IENABLE_REG_IRQ13_LSB 13
#define IENABLE_REG_IRQ13_MSB 13
#define IENABLE_REG_IRQ13_SZ 1
#define IENABLE_REG_IRQ13_UNSHIFTED_MASK 0x1
#define IENABLE_REG_IRQ13_SHIFTED_MASK 0x2000
#define IENABLE_REG_IRQ13_MASK (IENABLE_REG_IRQ13_UNSHIFTED_MASK)
#define GET_IENABLE_REG_IRQ13(Reg) \
    (((Reg) >> IENABLE_REG_IRQ13_LSB) & IENABLE_REG_IRQ13_UNSHIFTED_MASK)
#define SET_IENABLE_REG_IRQ13(Reg, Val) \
    Reg = (((Reg) & (~IENABLE_REG_IRQ13_SHIFTED_MASK)) | \
         (((Val) & IENABLE_REG_IRQ13_UNSHIFTED_MASK) << IENABLE_REG_IRQ13_LSB))
#define IENABLE_REG_IRQ14_LSB 14
#define IENABLE_REG_IRQ14_MSB 14
#define IENABLE_REG_IRQ14_SZ 1
#define IENABLE_REG_IRQ14_UNSHIFTED_MASK 0x1
#define IENABLE_REG_IRQ14_SHIFTED_MASK 0x4000
#define IENABLE_REG_IRQ14_MASK (IENABLE_REG_IRQ14_UNSHIFTED_MASK)
#define GET_IENABLE_REG_IRQ14(Reg) \
    (((Reg) >> IENABLE_REG_IRQ14_LSB) & IENABLE_REG_IRQ14_UNSHIFTED_MASK)
#define SET_IENABLE_REG_IRQ14(Reg, Val) \
    Reg = (((Reg) & (~IENABLE_REG_IRQ14_SHIFTED_MASK)) | \
         (((Val) & IENABLE_REG_IRQ14_UNSHIFTED_MASK) << IENABLE_REG_IRQ14_LSB))
#define IENABLE_REG_IRQ15_LSB 15
#define IENABLE_REG_IRQ15_MSB 15
#define IENABLE_REG_IRQ15_SZ 1
#define IENABLE_REG_IRQ15_UNSHIFTED_MASK 0x1
#define IENABLE_REG_IRQ15_SHIFTED_MASK 0x8000
#define IENABLE_REG_IRQ15_MASK (IENABLE_REG_IRQ15_UNSHIFTED_MASK)
#define GET_IENABLE_REG_IRQ15(Reg) \
    (((Reg) >> IENABLE_REG_IRQ15_LSB) & IENABLE_REG_IRQ15_UNSHIFTED_MASK)
#define SET_IENABLE_REG_IRQ15(Reg, Val) \
    Reg = (((Reg) & (~IENABLE_REG_IRQ15_SHIFTED_MASK)) | \
         (((Val) & IENABLE_REG_IRQ15_UNSHIFTED_MASK) << IENABLE_REG_IRQ15_LSB))
#define IENABLE_REG_IRQ16_LSB 16
#define IENABLE_REG_IRQ16_MSB 16
#define IENABLE_REG_IRQ16_SZ 1
#define IENABLE_REG_IRQ16_UNSHIFTED_MASK 0x1
#define IENABLE_REG_IRQ16_SHIFTED_MASK 0x10000
#define IENABLE_REG_IRQ16_MASK (IENABLE_REG_IRQ16_UNSHIFTED_MASK)
#define GET_IENABLE_REG_IRQ16(Reg) \
    (((Reg) >> IENABLE_REG_IRQ16_LSB) & IENABLE_REG_IRQ16_UNSHIFTED_MASK)
#define SET_IENABLE_REG_IRQ16(Reg, Val) \
    Reg = (((Reg) & (~IENABLE_REG_IRQ16_SHIFTED_MASK)) | \
         (((Val) & IENABLE_REG_IRQ16_UNSHIFTED_MASK) << IENABLE_REG_IRQ16_LSB))
#define IENABLE_REG_IRQ17_LSB 17
#define IENABLE_REG_IRQ17_MSB 17
#define IENABLE_REG_IRQ17_SZ 1
#define IENABLE_REG_IRQ17_UNSHIFTED_MASK 0x1
#define IENABLE_REG_IRQ17_SHIFTED_MASK 0x20000
#define IENABLE_REG_IRQ17_MASK (IENABLE_REG_IRQ17_UNSHIFTED_MASK)
#define GET_IENABLE_REG_IRQ17(Reg) \
    (((Reg) >> IENABLE_REG_IRQ17_LSB) & IENABLE_REG_IRQ17_UNSHIFTED_MASK)
#define SET_IENABLE_REG_IRQ17(Reg, Val) \
    Reg = (((Reg) & (~IENABLE_REG_IRQ17_SHIFTED_MASK)) | \
         (((Val) & IENABLE_REG_IRQ17_UNSHIFTED_MASK) << IENABLE_REG_IRQ17_LSB))
#define IENABLE_REG_IRQ18_LSB 18
#define IENABLE_REG_IRQ18_MSB 18
#define IENABLE_REG_IRQ18_SZ 1
#define IENABLE_REG_IRQ18_UNSHIFTED_MASK 0x1
#define IENABLE_REG_IRQ18_SHIFTED_MASK 0x40000
#define IENABLE_REG_IRQ18_MASK (IENABLE_REG_IRQ18_UNSHIFTED_MASK)
#define GET_IENABLE_REG_IRQ18(Reg) \
    (((Reg) >> IENABLE_REG_IRQ18_LSB) & IENABLE_REG_IRQ18_UNSHIFTED_MASK)
#define SET_IENABLE_REG_IRQ18(Reg, Val) \
    Reg = (((Reg) & (~IENABLE_REG_IRQ18_SHIFTED_MASK)) | \
         (((Val) & IENABLE_REG_IRQ18_UNSHIFTED_MASK) << IENABLE_REG_IRQ18_LSB))
#define IENABLE_REG_IRQ19_LSB 19
#define IENABLE_REG_IRQ19_MSB 19
#define IENABLE_REG_IRQ19_SZ 1
#define IENABLE_REG_IRQ19_UNSHIFTED_MASK 0x1
#define IENABLE_REG_IRQ19_SHIFTED_MASK 0x80000
#define IENABLE_REG_IRQ19_MASK (IENABLE_REG_IRQ19_UNSHIFTED_MASK)
#define GET_IENABLE_REG_IRQ19(Reg) \
    (((Reg) >> IENABLE_REG_IRQ19_LSB) & IENABLE_REG_IRQ19_UNSHIFTED_MASK)
#define SET_IENABLE_REG_IRQ19(Reg, Val) \
    Reg = (((Reg) & (~IENABLE_REG_IRQ19_SHIFTED_MASK)) | \
         (((Val) & IENABLE_REG_IRQ19_UNSHIFTED_MASK) << IENABLE_REG_IRQ19_LSB))
#define IENABLE_REG_IRQ20_LSB 20
#define IENABLE_REG_IRQ20_MSB 20
#define IENABLE_REG_IRQ20_SZ 1
#define IENABLE_REG_IRQ20_UNSHIFTED_MASK 0x1
#define IENABLE_REG_IRQ20_SHIFTED_MASK 0x100000
#define IENABLE_REG_IRQ20_MASK (IENABLE_REG_IRQ20_UNSHIFTED_MASK)
#define GET_IENABLE_REG_IRQ20(Reg) \
    (((Reg) >> IENABLE_REG_IRQ20_LSB) & IENABLE_REG_IRQ20_UNSHIFTED_MASK)
#define SET_IENABLE_REG_IRQ20(Reg, Val) \
    Reg = (((Reg) & (~IENABLE_REG_IRQ20_SHIFTED_MASK)) | \
         (((Val) & IENABLE_REG_IRQ20_UNSHIFTED_MASK) << IENABLE_REG_IRQ20_LSB))
#define IENABLE_REG_IRQ21_LSB 21
#define IENABLE_REG_IRQ21_MSB 21
#define IENABLE_REG_IRQ21_SZ 1
#define IENABLE_REG_IRQ21_UNSHIFTED_MASK 0x1
#define IENABLE_REG_IRQ21_SHIFTED_MASK 0x200000
#define IENABLE_REG_IRQ21_MASK (IENABLE_REG_IRQ21_UNSHIFTED_MASK)
#define GET_IENABLE_REG_IRQ21(Reg) \
    (((Reg) >> IENABLE_REG_IRQ21_LSB) & IENABLE_REG_IRQ21_UNSHIFTED_MASK)
#define SET_IENABLE_REG_IRQ21(Reg, Val) \
    Reg = (((Reg) & (~IENABLE_REG_IRQ21_SHIFTED_MASK)) | \
         (((Val) & IENABLE_REG_IRQ21_UNSHIFTED_MASK) << IENABLE_REG_IRQ21_LSB))
#define IENABLE_REG_IRQ22_LSB 22
#define IENABLE_REG_IRQ22_MSB 22
#define IENABLE_REG_IRQ22_SZ 1
#define IENABLE_REG_IRQ22_UNSHIFTED_MASK 0x1
#define IENABLE_REG_IRQ22_SHIFTED_MASK 0x400000
#define IENABLE_REG_IRQ22_MASK (IENABLE_REG_IRQ22_UNSHIFTED_MASK)
#define GET_IENABLE_REG_IRQ22(Reg) \
    (((Reg) >> IENABLE_REG_IRQ22_LSB) & IENABLE_REG_IRQ22_UNSHIFTED_MASK)
#define SET_IENABLE_REG_IRQ22(Reg, Val) \
    Reg = (((Reg) & (~IENABLE_REG_IRQ22_SHIFTED_MASK)) | \
         (((Val) & IENABLE_REG_IRQ22_UNSHIFTED_MASK) << IENABLE_REG_IRQ22_LSB))
#define IENABLE_REG_IRQ23_LSB 23
#define IENABLE_REG_IRQ23_MSB 23
#define IENABLE_REG_IRQ23_SZ 1
#define IENABLE_REG_IRQ23_UNSHIFTED_MASK 0x1
#define IENABLE_REG_IRQ23_SHIFTED_MASK 0x800000
#define IENABLE_REG_IRQ23_MASK (IENABLE_REG_IRQ23_UNSHIFTED_MASK)
#define GET_IENABLE_REG_IRQ23(Reg) \
    (((Reg) >> IENABLE_REG_IRQ23_LSB) & IENABLE_REG_IRQ23_UNSHIFTED_MASK)
#define SET_IENABLE_REG_IRQ23(Reg, Val) \
    Reg = (((Reg) & (~IENABLE_REG_IRQ23_SHIFTED_MASK)) | \
         (((Val) & IENABLE_REG_IRQ23_UNSHIFTED_MASK) << IENABLE_REG_IRQ23_LSB))
#define IENABLE_REG_IRQ24_LSB 24
#define IENABLE_REG_IRQ24_MSB 24
#define IENABLE_REG_IRQ24_SZ 1
#define IENABLE_REG_IRQ24_UNSHIFTED_MASK 0x1
#define IENABLE_REG_IRQ24_SHIFTED_MASK 0x1000000
#define IENABLE_REG_IRQ24_MASK (IENABLE_REG_IRQ24_UNSHIFTED_MASK)
#define GET_IENABLE_REG_IRQ24(Reg) \
    (((Reg) >> IENABLE_REG_IRQ24_LSB) & IENABLE_REG_IRQ24_UNSHIFTED_MASK)
#define SET_IENABLE_REG_IRQ24(Reg, Val) \
    Reg = (((Reg) & (~IENABLE_REG_IRQ24_SHIFTED_MASK)) | \
         (((Val) & IENABLE_REG_IRQ24_UNSHIFTED_MASK) << IENABLE_REG_IRQ24_LSB))
#define IENABLE_REG_IRQ25_LSB 25
#define IENABLE_REG_IRQ25_MSB 25
#define IENABLE_REG_IRQ25_SZ 1
#define IENABLE_REG_IRQ25_UNSHIFTED_MASK 0x1
#define IENABLE_REG_IRQ25_SHIFTED_MASK 0x2000000
#define IENABLE_REG_IRQ25_MASK (IENABLE_REG_IRQ25_UNSHIFTED_MASK)
#define GET_IENABLE_REG_IRQ25(Reg) \
    (((Reg) >> IENABLE_REG_IRQ25_LSB) & IENABLE_REG_IRQ25_UNSHIFTED_MASK)
#define SET_IENABLE_REG_IRQ25(Reg, Val) \
    Reg = (((Reg) & (~IENABLE_REG_IRQ25_SHIFTED_MASK)) | \
         (((Val) & IENABLE_REG_IRQ25_UNSHIFTED_MASK) << IENABLE_REG_IRQ25_LSB))
#define IENABLE_REG_IRQ26_LSB 26
#define IENABLE_REG_IRQ26_MSB 26
#define IENABLE_REG_IRQ26_SZ 1
#define IENABLE_REG_IRQ26_UNSHIFTED_MASK 0x1
#define IENABLE_REG_IRQ26_SHIFTED_MASK 0x4000000
#define IENABLE_REG_IRQ26_MASK (IENABLE_REG_IRQ26_UNSHIFTED_MASK)
#define GET_IENABLE_REG_IRQ26(Reg) \
    (((Reg) >> IENABLE_REG_IRQ26_LSB) & IENABLE_REG_IRQ26_UNSHIFTED_MASK)
#define SET_IENABLE_REG_IRQ26(Reg, Val) \
    Reg = (((Reg) & (~IENABLE_REG_IRQ26_SHIFTED_MASK)) | \
         (((Val) & IENABLE_REG_IRQ26_UNSHIFTED_MASK) << IENABLE_REG_IRQ26_LSB))
#define IENABLE_REG_IRQ27_LSB 27
#define IENABLE_REG_IRQ27_MSB 27
#define IENABLE_REG_IRQ27_SZ 1
#define IENABLE_REG_IRQ27_UNSHIFTED_MASK 0x1
#define IENABLE_REG_IRQ27_SHIFTED_MASK 0x8000000
#define IENABLE_REG_IRQ27_MASK (IENABLE_REG_IRQ27_UNSHIFTED_MASK)
#define GET_IENABLE_REG_IRQ27(Reg) \
    (((Reg) >> IENABLE_REG_IRQ27_LSB) & IENABLE_REG_IRQ27_UNSHIFTED_MASK)
#define SET_IENABLE_REG_IRQ27(Reg, Val) \
    Reg = (((Reg) & (~IENABLE_REG_IRQ27_SHIFTED_MASK)) | \
         (((Val) & IENABLE_REG_IRQ27_UNSHIFTED_MASK) << IENABLE_REG_IRQ27_LSB))
#define IENABLE_REG_IRQ28_LSB 28
#define IENABLE_REG_IRQ28_MSB 28
#define IENABLE_REG_IRQ28_SZ 1
#define IENABLE_REG_IRQ28_UNSHIFTED_MASK 0x1
#define IENABLE_REG_IRQ28_SHIFTED_MASK 0x10000000
#define IENABLE_REG_IRQ28_MASK (IENABLE_REG_IRQ28_UNSHIFTED_MASK)
#define GET_IENABLE_REG_IRQ28(Reg) \
    (((Reg) >> IENABLE_REG_IRQ28_LSB) & IENABLE_REG_IRQ28_UNSHIFTED_MASK)
#define SET_IENABLE_REG_IRQ28(Reg, Val) \
    Reg = (((Reg) & (~IENABLE_REG_IRQ28_SHIFTED_MASK)) | \
         (((Val) & IENABLE_REG_IRQ28_UNSHIFTED_MASK) << IENABLE_REG_IRQ28_LSB))
#define IENABLE_REG_IRQ29_LSB 29
#define IENABLE_REG_IRQ29_MSB 29
#define IENABLE_REG_IRQ29_SZ 1
#define IENABLE_REG_IRQ29_UNSHIFTED_MASK 0x1
#define IENABLE_REG_IRQ29_SHIFTED_MASK 0x20000000
#define IENABLE_REG_IRQ29_MASK (IENABLE_REG_IRQ29_UNSHIFTED_MASK)
#define GET_IENABLE_REG_IRQ29(Reg) \
    (((Reg) >> IENABLE_REG_IRQ29_LSB) & IENABLE_REG_IRQ29_UNSHIFTED_MASK)
#define SET_IENABLE_REG_IRQ29(Reg, Val) \
    Reg = (((Reg) & (~IENABLE_REG_IRQ29_SHIFTED_MASK)) | \
         (((Val) & IENABLE_REG_IRQ29_UNSHIFTED_MASK) << IENABLE_REG_IRQ29_LSB))
#define IENABLE_REG_IRQ30_LSB 30
#define IENABLE_REG_IRQ30_MSB 30
#define IENABLE_REG_IRQ30_SZ 1
#define IENABLE_REG_IRQ30_UNSHIFTED_MASK 0x1
#define IENABLE_REG_IRQ30_SHIFTED_MASK 0x40000000
#define IENABLE_REG_IRQ30_MASK (IENABLE_REG_IRQ30_UNSHIFTED_MASK)
#define GET_IENABLE_REG_IRQ30(Reg) \
    (((Reg) >> IENABLE_REG_IRQ30_LSB) & IENABLE_REG_IRQ30_UNSHIFTED_MASK)
#define SET_IENABLE_REG_IRQ30(Reg, Val) \
    Reg = (((Reg) & (~IENABLE_REG_IRQ30_SHIFTED_MASK)) | \
         (((Val) & IENABLE_REG_IRQ30_UNSHIFTED_MASK) << IENABLE_REG_IRQ30_LSB))
#define IENABLE_REG_IRQ31_LSB 31
#define IENABLE_REG_IRQ31_MSB 31
#define IENABLE_REG_IRQ31_SZ 1
#define IENABLE_REG_IRQ31_UNSHIFTED_MASK 0x1
#define IENABLE_REG_IRQ31_SHIFTED_MASK 0x80000000
#define IENABLE_REG_IRQ31_MASK (IENABLE_REG_IRQ31_UNSHIFTED_MASK)
#define GET_IENABLE_REG_IRQ31(Reg) \
    (((Reg) >> IENABLE_REG_IRQ31_LSB) & IENABLE_REG_IRQ31_UNSHIFTED_MASK)
#define SET_IENABLE_REG_IRQ31(Reg, Val) \
    Reg = (((Reg) & (~IENABLE_REG_IRQ31_SHIFTED_MASK)) | \
         (((Val) & IENABLE_REG_IRQ31_UNSHIFTED_MASK) << IENABLE_REG_IRQ31_LSB))

/* IPENDING register */
#define IPENDING_REG_REGNUM 4
#define IPENDING_REG_LSB 0
#define IPENDING_REG_MSB 31
#define IPENDING_REG_SZ 32
#define IPENDING_REG_UNSHIFTED_MASK 0xffffffff
#define IPENDING_REG_SHIFTED_MASK 0xffffffff
#define IPENDING_REG_MASK (IPENDING_REG_SHIFTED_MASK)
#define IPENDING_REG_IRQ0_LSB 0
#define IPENDING_REG_IRQ0_MSB 0
#define IPENDING_REG_IRQ0_SZ 1
#define IPENDING_REG_IRQ0_UNSHIFTED_MASK 0x1
#define IPENDING_REG_IRQ0_SHIFTED_MASK 0x1
#define IPENDING_REG_IRQ0_MASK (IPENDING_REG_IRQ0_UNSHIFTED_MASK)
#define GET_IPENDING_REG_IRQ0(Reg) \
    (((Reg) >> IPENDING_REG_IRQ0_LSB) & IPENDING_REG_IRQ0_UNSHIFTED_MASK)
#define SET_IPENDING_REG_IRQ0(Reg, Val) \
    Reg = (((Reg) & (~IPENDING_REG_IRQ0_SHIFTED_MASK)) | \
         (((Val) & IPENDING_REG_IRQ0_UNSHIFTED_MASK) << IPENDING_REG_IRQ0_LSB))
#define IPENDING_REG_IRQ1_LSB 1
#define IPENDING_REG_IRQ1_MSB 1
#define IPENDING_REG_IRQ1_SZ 1
#define IPENDING_REG_IRQ1_UNSHIFTED_MASK 0x1
#define IPENDING_REG_IRQ1_SHIFTED_MASK 0x2
#define IPENDING_REG_IRQ1_MASK (IPENDING_REG_IRQ1_UNSHIFTED_MASK)
#define GET_IPENDING_REG_IRQ1(Reg) \
    (((Reg) >> IPENDING_REG_IRQ1_LSB) & IPENDING_REG_IRQ1_UNSHIFTED_MASK)
#define SET_IPENDING_REG_IRQ1(Reg, Val) \
    Reg = (((Reg) & (~IPENDING_REG_IRQ1_SHIFTED_MASK)) | \
         (((Val) & IPENDING_REG_IRQ1_UNSHIFTED_MASK) << IPENDING_REG_IRQ1_LSB))
#define IPENDING_REG_IRQ2_LSB 2
#define IPENDING_REG_IRQ2_MSB 2
#define IPENDING_REG_IRQ2_SZ 1
#define IPENDING_REG_IRQ2_UNSHIFTED_MASK 0x1
#define IPENDING_REG_IRQ2_SHIFTED_MASK 0x4
#define IPENDING_REG_IRQ2_MASK (IPENDING_REG_IRQ2_UNSHIFTED_MASK)
#define GET_IPENDING_REG_IRQ2(Reg) \
    (((Reg) >> IPENDING_REG_IRQ2_LSB) & IPENDING_REG_IRQ2_UNSHIFTED_MASK)
#define SET_IPENDING_REG_IRQ2(Reg, Val) \
    Reg = (((Reg) & (~IPENDING_REG_IRQ2_SHIFTED_MASK)) | \
         (((Val) & IPENDING_REG_IRQ2_UNSHIFTED_MASK) << IPENDING_REG_IRQ2_LSB))
#define IPENDING_REG_IRQ3_LSB 3
#define IPENDING_REG_IRQ3_MSB 3
#define IPENDING_REG_IRQ3_SZ 1
#define IPENDING_REG_IRQ3_UNSHIFTED_MASK 0x1
#define IPENDING_REG_IRQ3_SHIFTED_MASK 0x8
#define IPENDING_REG_IRQ3_MASK (IPENDING_REG_IRQ3_UNSHIFTED_MASK)
#define GET_IPENDING_REG_IRQ3(Reg) \
    (((Reg) >> IPENDING_REG_IRQ3_LSB) & IPENDING_REG_IRQ3_UNSHIFTED_MASK)
#define SET_IPENDING_REG_IRQ3(Reg, Val) \
    Reg = (((Reg) & (~IPENDING_REG_IRQ3_SHIFTED_MASK)) | \
         (((Val) & IPENDING_REG_IRQ3_UNSHIFTED_MASK) << IPENDING_REG_IRQ3_LSB))
#define IPENDING_REG_IRQ4_LSB 4
#define IPENDING_REG_IRQ4_MSB 4
#define IPENDING_REG_IRQ4_SZ 1
#define IPENDING_REG_IRQ4_UNSHIFTED_MASK 0x1
#define IPENDING_REG_IRQ4_SHIFTED_MASK 0x10
#define IPENDING_REG_IRQ4_MASK (IPENDING_REG_IRQ4_UNSHIFTED_MASK)
#define GET_IPENDING_REG_IRQ4(Reg) \
    (((Reg) >> IPENDING_REG_IRQ4_LSB) & IPENDING_REG_IRQ4_UNSHIFTED_MASK)
#define SET_IPENDING_REG_IRQ4(Reg, Val) \
    Reg = (((Reg) & (~IPENDING_REG_IRQ4_SHIFTED_MASK)) | \
         (((Val) & IPENDING_REG_IRQ4_UNSHIFTED_MASK) << IPENDING_REG_IRQ4_LSB))
#define IPENDING_REG_IRQ5_LSB 5
#define IPENDING_REG_IRQ5_MSB 5
#define IPENDING_REG_IRQ5_SZ 1
#define IPENDING_REG_IRQ5_UNSHIFTED_MASK 0x1
#define IPENDING_REG_IRQ5_SHIFTED_MASK 0x20
#define IPENDING_REG_IRQ5_MASK (IPENDING_REG_IRQ5_UNSHIFTED_MASK)
#define GET_IPENDING_REG_IRQ5(Reg) \
    (((Reg) >> IPENDING_REG_IRQ5_LSB) & IPENDING_REG_IRQ5_UNSHIFTED_MASK)
#define SET_IPENDING_REG_IRQ5(Reg, Val) \
    Reg = (((Reg) & (~IPENDING_REG_IRQ5_SHIFTED_MASK)) | \
         (((Val) & IPENDING_REG_IRQ5_UNSHIFTED_MASK) << IPENDING_REG_IRQ5_LSB))
#define IPENDING_REG_IRQ6_LSB 6
#define IPENDING_REG_IRQ6_MSB 6
#define IPENDING_REG_IRQ6_SZ 1
#define IPENDING_REG_IRQ6_UNSHIFTED_MASK 0x1
#define IPENDING_REG_IRQ6_SHIFTED_MASK 0x40
#define IPENDING_REG_IRQ6_MASK (IPENDING_REG_IRQ6_UNSHIFTED_MASK)
#define GET_IPENDING_REG_IRQ6(Reg) \
    (((Reg) >> IPENDING_REG_IRQ6_LSB) & IPENDING_REG_IRQ6_UNSHIFTED_MASK)
#define SET_IPENDING_REG_IRQ6(Reg, Val) \
    Reg = (((Reg) & (~IPENDING_REG_IRQ6_SHIFTED_MASK)) | \
         (((Val) & IPENDING_REG_IRQ6_UNSHIFTED_MASK) << IPENDING_REG_IRQ6_LSB))
#define IPENDING_REG_IRQ7_LSB 7
#define IPENDING_REG_IRQ7_MSB 7
#define IPENDING_REG_IRQ7_SZ 1
#define IPENDING_REG_IRQ7_UNSHIFTED_MASK 0x1
#define IPENDING_REG_IRQ7_SHIFTED_MASK 0x80
#define IPENDING_REG_IRQ7_MASK (IPENDING_REG_IRQ7_UNSHIFTED_MASK)
#define GET_IPENDING_REG_IRQ7(Reg) \
    (((Reg) >> IPENDING_REG_IRQ7_LSB) & IPENDING_REG_IRQ7_UNSHIFTED_MASK)
#define SET_IPENDING_REG_IRQ7(Reg, Val) \
    Reg = (((Reg) & (~IPENDING_REG_IRQ7_SHIFTED_MASK)) | \
         (((Val) & IPENDING_REG_IRQ7_UNSHIFTED_MASK) << IPENDING_REG_IRQ7_LSB))
#define IPENDING_REG_IRQ8_LSB 8
#define IPENDING_REG_IRQ8_MSB 8
#define IPENDING_REG_IRQ8_SZ 1
#define IPENDING_REG_IRQ8_UNSHIFTED_MASK 0x1
#define IPENDING_REG_IRQ8_SHIFTED_MASK 0x100
#define IPENDING_REG_IRQ8_MASK (IPENDING_REG_IRQ8_UNSHIFTED_MASK)
#define GET_IPENDING_REG_IRQ8(Reg) \
    (((Reg) >> IPENDING_REG_IRQ8_LSB) & IPENDING_REG_IRQ8_UNSHIFTED_MASK)
#define SET_IPENDING_REG_IRQ8(Reg, Val) \
    Reg = (((Reg) & (~IPENDING_REG_IRQ8_SHIFTED_MASK)) | \
         (((Val) & IPENDING_REG_IRQ8_UNSHIFTED_MASK) << IPENDING_REG_IRQ8_LSB))
#define IPENDING_REG_IRQ9_LSB 9
#define IPENDING_REG_IRQ9_MSB 9
#define IPENDING_REG_IRQ9_SZ 1
#define IPENDING_REG_IRQ9_UNSHIFTED_MASK 0x1
#define IPENDING_REG_IRQ9_SHIFTED_MASK 0x200
#define IPENDING_REG_IRQ9_MASK (IPENDING_REG_IRQ9_UNSHIFTED_MASK)
#define GET_IPENDING_REG_IRQ9(Reg) \
    (((Reg) >> IPENDING_REG_IRQ9_LSB) & IPENDING_REG_IRQ9_UNSHIFTED_MASK)
#define SET_IPENDING_REG_IRQ9(Reg, Val) \
    Reg = (((Reg) & (~IPENDING_REG_IRQ9_SHIFTED_MASK)) | \
         (((Val) & IPENDING_REG_IRQ9_UNSHIFTED_MASK) << IPENDING_REG_IRQ9_LSB))
#define IPENDING_REG_IRQ10_LSB 10
#define IPENDING_REG_IRQ10_MSB 10
#define IPENDING_REG_IRQ10_SZ 1
#define IPENDING_REG_IRQ10_UNSHIFTED_MASK 0x1
#define IPENDING_REG_IRQ10_SHIFTED_MASK 0x400
#define IPENDING_REG_IRQ10_MASK (IPENDING_REG_IRQ10_UNSHIFTED_MASK)
#define GET_IPENDING_REG_IRQ10(Reg) \
    (((Reg) >> IPENDING_REG_IRQ10_LSB) & IPENDING_REG_IRQ10_UNSHIFTED_MASK)
#define SET_IPENDING_REG_IRQ10(Reg, Val) \
    Reg = (((Reg) & (~IPENDING_REG_IRQ10_SHIFTED_MASK)) | \
         (((Val) & IPENDING_REG_IRQ10_UNSHIFTED_MASK) << IPENDING_REG_IRQ10_LSB))
#define IPENDING_REG_IRQ11_LSB 11
#define IPENDING_REG_IRQ11_MSB 11
#define IPENDING_REG_IRQ11_SZ 1
#define IPENDING_REG_IRQ11_UNSHIFTED_MASK 0x1
#define IPENDING_REG_IRQ11_SHIFTED_MASK 0x800
#define IPENDING_REG_IRQ11_MASK (IPENDING_REG_IRQ11_UNSHIFTED_MASK)
#define GET_IPENDING_REG_IRQ11(Reg) \
    (((Reg) >> IPENDING_REG_IRQ11_LSB) & IPENDING_REG_IRQ11_UNSHIFTED_MASK)
#define SET_IPENDING_REG_IRQ11(Reg, Val) \
    Reg = (((Reg) & (~IPENDING_REG_IRQ11_SHIFTED_MASK)) | \
         (((Val) & IPENDING_REG_IRQ11_UNSHIFTED_MASK) << IPENDING_REG_IRQ11_LSB))
#define IPENDING_REG_IRQ12_LSB 12
#define IPENDING_REG_IRQ12_MSB 12
#define IPENDING_REG_IRQ12_SZ 1
#define IPENDING_REG_IRQ12_UNSHIFTED_MASK 0x1
#define IPENDING_REG_IRQ12_SHIFTED_MASK 0x1000
#define IPENDING_REG_IRQ12_MASK (IPENDING_REG_IRQ12_UNSHIFTED_MASK)
#define GET_IPENDING_REG_IRQ12(Reg) \
    (((Reg) >> IPENDING_REG_IRQ12_LSB) & IPENDING_REG_IRQ12_UNSHIFTED_MASK)
#define SET_IPENDING_REG_IRQ12(Reg, Val) \
    Reg = (((Reg) & (~IPENDING_REG_IRQ12_SHIFTED_MASK)) | \
         (((Val) & IPENDING_REG_IRQ12_UNSHIFTED_MASK) << IPENDING_REG_IRQ12_LSB))
#define IPENDING_REG_IRQ13_LSB 13
#define IPENDING_REG_IRQ13_MSB 13
#define IPENDING_REG_IRQ13_SZ 1
#define IPENDING_REG_IRQ13_UNSHIFTED_MASK 0x1
#define IPENDING_REG_IRQ13_SHIFTED_MASK 0x2000
#define IPENDING_REG_IRQ13_MASK (IPENDING_REG_IRQ13_UNSHIFTED_MASK)
#define GET_IPENDING_REG_IRQ13(Reg) \
    (((Reg) >> IPENDING_REG_IRQ13_LSB) & IPENDING_REG_IRQ13_UNSHIFTED_MASK)
#define SET_IPENDING_REG_IRQ13(Reg, Val) \
    Reg = (((Reg) & (~IPENDING_REG_IRQ13_SHIFTED_MASK)) | \
         (((Val) & IPENDING_REG_IRQ13_UNSHIFTED_MASK) << IPENDING_REG_IRQ13_LSB))
#define IPENDING_REG_IRQ14_LSB 14
#define IPENDING_REG_IRQ14_MSB 14
#define IPENDING_REG_IRQ14_SZ 1
#define IPENDING_REG_IRQ14_UNSHIFTED_MASK 0x1
#define IPENDING_REG_IRQ14_SHIFTED_MASK 0x4000
#define IPENDING_REG_IRQ14_MASK (IPENDING_REG_IRQ14_UNSHIFTED_MASK)
#define GET_IPENDING_REG_IRQ14(Reg) \
    (((Reg) >> IPENDING_REG_IRQ14_LSB) & IPENDING_REG_IRQ14_UNSHIFTED_MASK)
#define SET_IPENDING_REG_IRQ14(Reg, Val) \
    Reg = (((Reg) & (~IPENDING_REG_IRQ14_SHIFTED_MASK)) | \
         (((Val) & IPENDING_REG_IRQ14_UNSHIFTED_MASK) << IPENDING_REG_IRQ14_LSB))
#define IPENDING_REG_IRQ15_LSB 15
#define IPENDING_REG_IRQ15_MSB 15
#define IPENDING_REG_IRQ15_SZ 1
#define IPENDING_REG_IRQ15_UNSHIFTED_MASK 0x1
#define IPENDING_REG_IRQ15_SHIFTED_MASK 0x8000
#define IPENDING_REG_IRQ15_MASK (IPENDING_REG_IRQ15_UNSHIFTED_MASK)
#define GET_IPENDING_REG_IRQ15(Reg) \
    (((Reg) >> IPENDING_REG_IRQ15_LSB) & IPENDING_REG_IRQ15_UNSHIFTED_MASK)
#define SET_IPENDING_REG_IRQ15(Reg, Val) \
    Reg = (((Reg) & (~IPENDING_REG_IRQ15_SHIFTED_MASK)) | \
         (((Val) & IPENDING_REG_IRQ15_UNSHIFTED_MASK) << IPENDING_REG_IRQ15_LSB))
#define IPENDING_REG_IRQ16_LSB 16
#define IPENDING_REG_IRQ16_MSB 16
#define IPENDING_REG_IRQ16_SZ 1
#define IPENDING_REG_IRQ16_UNSHIFTED_MASK 0x1
#define IPENDING_REG_IRQ16_SHIFTED_MASK 0x10000
#define IPENDING_REG_IRQ16_MASK (IPENDING_REG_IRQ16_UNSHIFTED_MASK)
#define GET_IPENDING_REG_IRQ16(Reg) \
    (((Reg) >> IPENDING_REG_IRQ16_LSB) & IPENDING_REG_IRQ16_UNSHIFTED_MASK)
#define SET_IPENDING_REG_IRQ16(Reg, Val) \
    Reg = (((Reg) & (~IPENDING_REG_IRQ16_SHIFTED_MASK)) | \
         (((Val) & IPENDING_REG_IRQ16_UNSHIFTED_MASK) << IPENDING_REG_IRQ16_LSB))
#define IPENDING_REG_IRQ17_LSB 17
#define IPENDING_REG_IRQ17_MSB 17
#define IPENDING_REG_IRQ17_SZ 1
#define IPENDING_REG_IRQ17_UNSHIFTED_MASK 0x1
#define IPENDING_REG_IRQ17_SHIFTED_MASK 0x20000
#define IPENDING_REG_IRQ17_MASK (IPENDING_REG_IRQ17_UNSHIFTED_MASK)
#define GET_IPENDING_REG_IRQ17(Reg) \
    (((Reg) >> IPENDING_REG_IRQ17_LSB) & IPENDING_REG_IRQ17_UNSHIFTED_MASK)
#define SET_IPENDING_REG_IRQ17(Reg, Val) \
    Reg = (((Reg) & (~IPENDING_REG_IRQ17_SHIFTED_MASK)) | \
         (((Val) & IPENDING_REG_IRQ17_UNSHIFTED_MASK) << IPENDING_REG_IRQ17_LSB))
#define IPENDING_REG_IRQ18_LSB 18
#define IPENDING_REG_IRQ18_MSB 18
#define IPENDING_REG_IRQ18_SZ 1
#define IPENDING_REG_IRQ18_UNSHIFTED_MASK 0x1
#define IPENDING_REG_IRQ18_SHIFTED_MASK 0x40000
#define IPENDING_REG_IRQ18_MASK (IPENDING_REG_IRQ18_UNSHIFTED_MASK)
#define GET_IPENDING_REG_IRQ18(Reg) \
    (((Reg) >> IPENDING_REG_IRQ18_LSB) & IPENDING_REG_IRQ18_UNSHIFTED_MASK)
#define SET_IPENDING_REG_IRQ18(Reg, Val) \
    Reg = (((Reg) & (~IPENDING_REG_IRQ18_SHIFTED_MASK)) | \
         (((Val) & IPENDING_REG_IRQ18_UNSHIFTED_MASK) << IPENDING_REG_IRQ18_LSB))
#define IPENDING_REG_IRQ19_LSB 19
#define IPENDING_REG_IRQ19_MSB 19
#define IPENDING_REG_IRQ19_SZ 1
#define IPENDING_REG_IRQ19_UNSHIFTED_MASK 0x1
#define IPENDING_REG_IRQ19_SHIFTED_MASK 0x80000
#define IPENDING_REG_IRQ19_MASK (IPENDING_REG_IRQ19_UNSHIFTED_MASK)
#define GET_IPENDING_REG_IRQ19(Reg) \
    (((Reg) >> IPENDING_REG_IRQ19_LSB) & IPENDING_REG_IRQ19_UNSHIFTED_MASK)
#define SET_IPENDING_REG_IRQ19(Reg, Val) \
    Reg = (((Reg) & (~IPENDING_REG_IRQ19_SHIFTED_MASK)) | \
         (((Val) & IPENDING_REG_IRQ19_UNSHIFTED_MASK) << IPENDING_REG_IRQ19_LSB))
#define IPENDING_REG_IRQ20_LSB 20
#define IPENDING_REG_IRQ20_MSB 20
#define IPENDING_REG_IRQ20_SZ 1
#define IPENDING_REG_IRQ20_UNSHIFTED_MASK 0x1
#define IPENDING_REG_IRQ20_SHIFTED_MASK 0x100000
#define IPENDING_REG_IRQ20_MASK (IPENDING_REG_IRQ20_UNSHIFTED_MASK)
#define GET_IPENDING_REG_IRQ20(Reg) \
    (((Reg) >> IPENDING_REG_IRQ20_LSB) & IPENDING_REG_IRQ20_UNSHIFTED_MASK)
#define SET_IPENDING_REG_IRQ20(Reg, Val) \
    Reg = (((Reg) & (~IPENDING_REG_IRQ20_SHIFTED_MASK)) | \
         (((Val) & IPENDING_REG_IRQ20_UNSHIFTED_MASK) << IPENDING_REG_IRQ20_LSB))
#define IPENDING_REG_IRQ21_LSB 21
#define IPENDING_REG_IRQ21_MSB 21
#define IPENDING_REG_IRQ21_SZ 1
#define IPENDING_REG_IRQ21_UNSHIFTED_MASK 0x1
#define IPENDING_REG_IRQ21_SHIFTED_MASK 0x200000
#define IPENDING_REG_IRQ21_MASK (IPENDING_REG_IRQ21_UNSHIFTED_MASK)
#define GET_IPENDING_REG_IRQ21(Reg) \
    (((Reg) >> IPENDING_REG_IRQ21_LSB) & IPENDING_REG_IRQ21_UNSHIFTED_MASK)
#define SET_IPENDING_REG_IRQ21(Reg, Val) \
    Reg = (((Reg) & (~IPENDING_REG_IRQ21_SHIFTED_MASK)) | \
         (((Val) & IPENDING_REG_IRQ21_UNSHIFTED_MASK) << IPENDING_REG_IRQ21_LSB))
#define IPENDING_REG_IRQ22_LSB 22
#define IPENDING_REG_IRQ22_MSB 22
#define IPENDING_REG_IRQ22_SZ 1
#define IPENDING_REG_IRQ22_UNSHIFTED_MASK 0x1
#define IPENDING_REG_IRQ22_SHIFTED_MASK 0x400000
#define IPENDING_REG_IRQ22_MASK (IPENDING_REG_IRQ22_UNSHIFTED_MASK)
#define GET_IPENDING_REG_IRQ22(Reg) \
    (((Reg) >> IPENDING_REG_IRQ22_LSB) & IPENDING_REG_IRQ22_UNSHIFTED_MASK)
#define SET_IPENDING_REG_IRQ22(Reg, Val) \
    Reg = (((Reg) & (~IPENDING_REG_IRQ22_SHIFTED_MASK)) | \
         (((Val) & IPENDING_REG_IRQ22_UNSHIFTED_MASK) << IPENDING_REG_IRQ22_LSB))
#define IPENDING_REG_IRQ23_LSB 23
#define IPENDING_REG_IRQ23_MSB 23
#define IPENDING_REG_IRQ23_SZ 1
#define IPENDING_REG_IRQ23_UNSHIFTED_MASK 0x1
#define IPENDING_REG_IRQ23_SHIFTED_MASK 0x800000
#define IPENDING_REG_IRQ23_MASK (IPENDING_REG_IRQ23_UNSHIFTED_MASK)
#define GET_IPENDING_REG_IRQ23(Reg) \
    (((Reg) >> IPENDING_REG_IRQ23_LSB) & IPENDING_REG_IRQ23_UNSHIFTED_MASK)
#define SET_IPENDING_REG_IRQ23(Reg, Val) \
    Reg = (((Reg) & (~IPENDING_REG_IRQ23_SHIFTED_MASK)) | \
         (((Val) & IPENDING_REG_IRQ23_UNSHIFTED_MASK) << IPENDING_REG_IRQ23_LSB))
#define IPENDING_REG_IRQ24_LSB 24
#define IPENDING_REG_IRQ24_MSB 24
#define IPENDING_REG_IRQ24_SZ 1
#define IPENDING_REG_IRQ24_UNSHIFTED_MASK 0x1
#define IPENDING_REG_IRQ24_SHIFTED_MASK 0x1000000
#define IPENDING_REG_IRQ24_MASK (IPENDING_REG_IRQ24_UNSHIFTED_MASK)
#define GET_IPENDING_REG_IRQ24(Reg) \
    (((Reg) >> IPENDING_REG_IRQ24_LSB) & IPENDING_REG_IRQ24_UNSHIFTED_MASK)
#define SET_IPENDING_REG_IRQ24(Reg, Val) \
    Reg = (((Reg) & (~IPENDING_REG_IRQ24_SHIFTED_MASK)) | \
         (((Val) & IPENDING_REG_IRQ24_UNSHIFTED_MASK) << IPENDING_REG_IRQ24_LSB))
#define IPENDING_REG_IRQ25_LSB 25
#define IPENDING_REG_IRQ25_MSB 25
#define IPENDING_REG_IRQ25_SZ 1
#define IPENDING_REG_IRQ25_UNSHIFTED_MASK 0x1
#define IPENDING_REG_IRQ25_SHIFTED_MASK 0x2000000
#define IPENDING_REG_IRQ25_MASK (IPENDING_REG_IRQ25_UNSHIFTED_MASK)
#define GET_IPENDING_REG_IRQ25(Reg) \
    (((Reg) >> IPENDING_REG_IRQ25_LSB) & IPENDING_REG_IRQ25_UNSHIFTED_MASK)
#define SET_IPENDING_REG_IRQ25(Reg, Val) \
    Reg = (((Reg) & (~IPENDING_REG_IRQ25_SHIFTED_MASK)) | \
         (((Val) & IPENDING_REG_IRQ25_UNSHIFTED_MASK) << IPENDING_REG_IRQ25_LSB))
#define IPENDING_REG_IRQ26_LSB 26
#define IPENDING_REG_IRQ26_MSB 26
#define IPENDING_REG_IRQ26_SZ 1
#define IPENDING_REG_IRQ26_UNSHIFTED_MASK 0x1
#define IPENDING_REG_IRQ26_SHIFTED_MASK 0x4000000
#define IPENDING_REG_IRQ26_MASK (IPENDING_REG_IRQ26_UNSHIFTED_MASK)
#define GET_IPENDING_REG_IRQ26(Reg) \
    (((Reg) >> IPENDING_REG_IRQ26_LSB) & IPENDING_REG_IRQ26_UNSHIFTED_MASK)
#define SET_IPENDING_REG_IRQ26(Reg, Val) \
    Reg = (((Reg) & (~IPENDING_REG_IRQ26_SHIFTED_MASK)) | \
         (((Val) & IPENDING_REG_IRQ26_UNSHIFTED_MASK) << IPENDING_REG_IRQ26_LSB))
#define IPENDING_REG_IRQ27_LSB 27
#define IPENDING_REG_IRQ27_MSB 27
#define IPENDING_REG_IRQ27_SZ 1
#define IPENDING_REG_IRQ27_UNSHIFTED_MASK 0x1
#define IPENDING_REG_IRQ27_SHIFTED_MASK 0x8000000
#define IPENDING_REG_IRQ27_MASK (IPENDING_REG_IRQ27_UNSHIFTED_MASK)
#define GET_IPENDING_REG_IRQ27(Reg) \
    (((Reg) >> IPENDING_REG_IRQ27_LSB) & IPENDING_REG_IRQ27_UNSHIFTED_MASK)
#define SET_IPENDING_REG_IRQ27(Reg, Val) \
    Reg = (((Reg) & (~IPENDING_REG_IRQ27_SHIFTED_MASK)) | \
         (((Val) & IPENDING_REG_IRQ27_UNSHIFTED_MASK) << IPENDING_REG_IRQ27_LSB))
#define IPENDING_REG_IRQ28_LSB 28
#define IPENDING_REG_IRQ28_MSB 28
#define IPENDING_REG_IRQ28_SZ 1
#define IPENDING_REG_IRQ28_UNSHIFTED_MASK 0x1
#define IPENDING_REG_IRQ28_SHIFTED_MASK 0x10000000
#define IPENDING_REG_IRQ28_MASK (IPENDING_REG_IRQ28_UNSHIFTED_MASK)
#define GET_IPENDING_REG_IRQ28(Reg) \
    (((Reg) >> IPENDING_REG_IRQ28_LSB) & IPENDING_REG_IRQ28_UNSHIFTED_MASK)
#define SET_IPENDING_REG_IRQ28(Reg, Val) \
    Reg = (((Reg) & (~IPENDING_REG_IRQ28_SHIFTED_MASK)) | \
         (((Val) & IPENDING_REG_IRQ28_UNSHIFTED_MASK) << IPENDING_REG_IRQ28_LSB))
#define IPENDING_REG_IRQ29_LSB 29
#define IPENDING_REG_IRQ29_MSB 29
#define IPENDING_REG_IRQ29_SZ 1
#define IPENDING_REG_IRQ29_UNSHIFTED_MASK 0x1
#define IPENDING_REG_IRQ29_SHIFTED_MASK 0x20000000
#define IPENDING_REG_IRQ29_MASK (IPENDING_REG_IRQ29_UNSHIFTED_MASK)
#define GET_IPENDING_REG_IRQ29(Reg) \
    (((Reg) >> IPENDING_REG_IRQ29_LSB) & IPENDING_REG_IRQ29_UNSHIFTED_MASK)
#define SET_IPENDING_REG_IRQ29(Reg, Val) \
    Reg = (((Reg) & (~IPENDING_REG_IRQ29_SHIFTED_MASK)) | \
         (((Val) & IPENDING_REG_IRQ29_UNSHIFTED_MASK) << IPENDING_REG_IRQ29_LSB))
#define IPENDING_REG_IRQ30_LSB 30
#define IPENDING_REG_IRQ30_MSB 30
#define IPENDING_REG_IRQ30_SZ 1
#define IPENDING_REG_IRQ30_UNSHIFTED_MASK 0x1
#define IPENDING_REG_IRQ30_SHIFTED_MASK 0x40000000
#define IPENDING_REG_IRQ30_MASK (IPENDING_REG_IRQ30_UNSHIFTED_MASK)
#define GET_IPENDING_REG_IRQ30(Reg) \
    (((Reg) >> IPENDING_REG_IRQ30_LSB) & IPENDING_REG_IRQ30_UNSHIFTED_MASK)
#define SET_IPENDING_REG_IRQ30(Reg, Val) \
    Reg = (((Reg) & (~IPENDING_REG_IRQ30_SHIFTED_MASK)) | \
         (((Val) & IPENDING_REG_IRQ30_UNSHIFTED_MASK) << IPENDING_REG_IRQ30_LSB))
#define IPENDING_REG_IRQ31_LSB 31
#define IPENDING_REG_IRQ31_MSB 31
#define IPENDING_REG_IRQ31_SZ 1
#define IPENDING_REG_IRQ31_UNSHIFTED_MASK 0x1
#define IPENDING_REG_IRQ31_SHIFTED_MASK 0x80000000
#define IPENDING_REG_IRQ31_MASK (IPENDING_REG_IRQ31_UNSHIFTED_MASK)
#define GET_IPENDING_REG_IRQ31(Reg) \
    (((Reg) >> IPENDING_REG_IRQ31_LSB) & IPENDING_REG_IRQ31_UNSHIFTED_MASK)
#define SET_IPENDING_REG_IRQ31(Reg, Val) \
    Reg = (((Reg) & (~IPENDING_REG_IRQ31_SHIFTED_MASK)) | \
         (((Val) & IPENDING_REG_IRQ31_UNSHIFTED_MASK) << IPENDING_REG_IRQ31_LSB))

/* CPUID register */
#define CPUID_REG_REGNUM 5
#define CPUID_REG_LSB 0
#define CPUID_REG_MSB 0
#define CPUID_REG_SZ 1
#define CPUID_REG_UNSHIFTED_MASK 0x1
#define CPUID_REG_SHIFTED_MASK 0x1
#define CPUID_REG_MASK (CPUID_REG_SHIFTED_MASK)
#define CPUID_REG_CPUID_LSB 0
#define CPUID_REG_CPUID_MSB 0
#define CPUID_REG_CPUID_SZ 1
#define CPUID_REG_CPUID_UNSHIFTED_MASK 0x1
#define CPUID_REG_CPUID_SHIFTED_MASK 0x1
#define CPUID_REG_CPUID_MASK (CPUID_REG_CPUID_UNSHIFTED_MASK)
#define GET_CPUID_REG_CPUID(Reg) \
    (((Reg) >> CPUID_REG_CPUID_LSB) & CPUID_REG_CPUID_UNSHIFTED_MASK)
#define SET_CPUID_REG_CPUID(Reg, Val) \
    Reg = (((Reg) & (~CPUID_REG_CPUID_SHIFTED_MASK)) | \
         (((Val) & CPUID_REG_CPUID_UNSHIFTED_MASK) << CPUID_REG_CPUID_LSB))
#define CPUID_REG_RSV0_LSB 1
#define CPUID_REG_RSV0_MSB 31
#define CPUID_REG_RSV0_SZ 31
#define CPUID_REG_RSV0_UNSHIFTED_MASK 0x7fffffff
#define CPUID_REG_RSV0_SHIFTED_MASK 0xfffffffe
#define CPUID_REG_RSV0_MASK (CPUID_REG_RSV0_UNSHIFTED_MASK)
#define GET_CPUID_REG_RSV0(Reg) \
    (((Reg) >> CPUID_REG_RSV0_LSB) & CPUID_REG_RSV0_UNSHIFTED_MASK)
#define SET_CPUID_REG_RSV0(Reg, Val) \
    Reg = (((Reg) & (~CPUID_REG_RSV0_SHIFTED_MASK)) | \
         (((Val) & CPUID_REG_RSV0_UNSHIFTED_MASK) << CPUID_REG_RSV0_LSB))

/* SIM register */
#define SIM_REG_REGNUM 6
#define SIM_REG_LSB 0
#define SIM_REG_MSB 8
#define SIM_REG_SZ 9
#define SIM_REG_UNSHIFTED_MASK 0x1ff
#define SIM_REG_SHIFTED_MASK 0x1ff
#define SIM_REG_MASK (SIM_REG_SHIFTED_MASK)
#define SIM_REG_STOP_LSB 0
#define SIM_REG_STOP_MSB 0
#define SIM_REG_STOP_SZ 1
#define SIM_REG_STOP_UNSHIFTED_MASK 0x1
#define SIM_REG_STOP_SHIFTED_MASK 0x1
#define SIM_REG_STOP_MASK (SIM_REG_STOP_UNSHIFTED_MASK)
#define GET_SIM_REG_STOP(Reg) \
    (((Reg) >> SIM_REG_STOP_LSB) & SIM_REG_STOP_UNSHIFTED_MASK)
#define SET_SIM_REG_STOP(Reg, Val) \
    Reg = (((Reg) & (~SIM_REG_STOP_SHIFTED_MASK)) | \
         (((Val) & SIM_REG_STOP_UNSHIFTED_MASK) << SIM_REG_STOP_LSB))
#define SIM_REG_PERF_CNT_EN_LSB 1
#define SIM_REG_PERF_CNT_EN_MSB 1
#define SIM_REG_PERF_CNT_EN_SZ 1
#define SIM_REG_PERF_CNT_EN_UNSHIFTED_MASK 0x1
#define SIM_REG_PERF_CNT_EN_SHIFTED_MASK 0x2
#define SIM_REG_PERF_CNT_EN_MASK (SIM_REG_PERF_CNT_EN_UNSHIFTED_MASK)
#define GET_SIM_REG_PERF_CNT_EN(Reg) \
    (((Reg) >> SIM_REG_PERF_CNT_EN_LSB) & SIM_REG_PERF_CNT_EN_UNSHIFTED_MASK)
#define SET_SIM_REG_PERF_CNT_EN(Reg, Val) \
    Reg = (((Reg) & (~SIM_REG_PERF_CNT_EN_SHIFTED_MASK)) | \
         (((Val) & SIM_REG_PERF_CNT_EN_UNSHIFTED_MASK) << SIM_REG_PERF_CNT_EN_LSB))
#define SIM_REG_PERF_CNT_CLR_LSB 2
#define SIM_REG_PERF_CNT_CLR_MSB 2
#define SIM_REG_PERF_CNT_CLR_SZ 1
#define SIM_REG_PERF_CNT_CLR_UNSHIFTED_MASK 0x1
#define SIM_REG_PERF_CNT_CLR_SHIFTED_MASK 0x4
#define SIM_REG_PERF_CNT_CLR_MASK (SIM_REG_PERF_CNT_CLR_UNSHIFTED_MASK)
#define GET_SIM_REG_PERF_CNT_CLR(Reg) \
    (((Reg) >> SIM_REG_PERF_CNT_CLR_LSB) & SIM_REG_PERF_CNT_CLR_UNSHIFTED_MASK)
#define SET_SIM_REG_PERF_CNT_CLR(Reg, Val) \
    Reg = (((Reg) & (~SIM_REG_PERF_CNT_CLR_SHIFTED_MASK)) | \
         (((Val) & SIM_REG_PERF_CNT_CLR_UNSHIFTED_MASK) << SIM_REG_PERF_CNT_CLR_LSB))
#define SIM_REG_INST_TRACE_LSB 3
#define SIM_REG_INST_TRACE_MSB 3
#define SIM_REG_INST_TRACE_SZ 1
#define SIM_REG_INST_TRACE_UNSHIFTED_MASK 0x1
#define SIM_REG_INST_TRACE_SHIFTED_MASK 0x8
#define SIM_REG_INST_TRACE_MASK (SIM_REG_INST_TRACE_UNSHIFTED_MASK)
#define GET_SIM_REG_INST_TRACE(Reg) \
    (((Reg) >> SIM_REG_INST_TRACE_LSB) & SIM_REG_INST_TRACE_UNSHIFTED_MASK)
#define SET_SIM_REG_INST_TRACE(Reg, Val) \
    Reg = (((Reg) & (~SIM_REG_INST_TRACE_SHIFTED_MASK)) | \
         (((Val) & SIM_REG_INST_TRACE_UNSHIFTED_MASK) << SIM_REG_INST_TRACE_LSB))
#define SIM_REG_MEM_TRAFFIC_LSB 4
#define SIM_REG_MEM_TRAFFIC_MSB 4
#define SIM_REG_MEM_TRAFFIC_SZ 1
#define SIM_REG_MEM_TRAFFIC_UNSHIFTED_MASK 0x1
#define SIM_REG_MEM_TRAFFIC_SHIFTED_MASK 0x10
#define SIM_REG_MEM_TRAFFIC_MASK (SIM_REG_MEM_TRAFFIC_UNSHIFTED_MASK)
#define GET_SIM_REG_MEM_TRAFFIC(Reg) \
    (((Reg) >> SIM_REG_MEM_TRAFFIC_LSB) & SIM_REG_MEM_TRAFFIC_UNSHIFTED_MASK)
#define SET_SIM_REG_MEM_TRAFFIC(Reg, Val) \
    Reg = (((Reg) & (~SIM_REG_MEM_TRAFFIC_SHIFTED_MASK)) | \
         (((Val) & SIM_REG_MEM_TRAFFIC_UNSHIFTED_MASK) << SIM_REG_MEM_TRAFFIC_LSB))
#define SIM_REG_SHOW_ICACHE_LSB 5
#define SIM_REG_SHOW_ICACHE_MSB 5
#define SIM_REG_SHOW_ICACHE_SZ 1
#define SIM_REG_SHOW_ICACHE_UNSHIFTED_MASK 0x1
#define SIM_REG_SHOW_ICACHE_SHIFTED_MASK 0x20
#define SIM_REG_SHOW_ICACHE_MASK (SIM_REG_SHOW_ICACHE_UNSHIFTED_MASK)
#define GET_SIM_REG_SHOW_ICACHE(Reg) \
    (((Reg) >> SIM_REG_SHOW_ICACHE_LSB) & SIM_REG_SHOW_ICACHE_UNSHIFTED_MASK)
#define SET_SIM_REG_SHOW_ICACHE(Reg, Val) \
    Reg = (((Reg) & (~SIM_REG_SHOW_ICACHE_SHIFTED_MASK)) | \
         (((Val) & SIM_REG_SHOW_ICACHE_UNSHIFTED_MASK) << SIM_REG_SHOW_ICACHE_LSB))
#define SIM_REG_SHOW_DCACHE_LSB 6
#define SIM_REG_SHOW_DCACHE_MSB 6
#define SIM_REG_SHOW_DCACHE_SZ 1
#define SIM_REG_SHOW_DCACHE_UNSHIFTED_MASK 0x1
#define SIM_REG_SHOW_DCACHE_SHIFTED_MASK 0x40
#define SIM_REG_SHOW_DCACHE_MASK (SIM_REG_SHOW_DCACHE_UNSHIFTED_MASK)
#define GET_SIM_REG_SHOW_DCACHE(Reg) \
    (((Reg) >> SIM_REG_SHOW_DCACHE_LSB) & SIM_REG_SHOW_DCACHE_UNSHIFTED_MASK)
#define SET_SIM_REG_SHOW_DCACHE(Reg, Val) \
    Reg = (((Reg) & (~SIM_REG_SHOW_DCACHE_SHIFTED_MASK)) | \
         (((Val) & SIM_REG_SHOW_DCACHE_UNSHIFTED_MASK) << SIM_REG_SHOW_DCACHE_LSB))
#define SIM_REG_SHOW_TLB_LSB 7
#define SIM_REG_SHOW_TLB_MSB 7
#define SIM_REG_SHOW_TLB_SZ 1
#define SIM_REG_SHOW_TLB_UNSHIFTED_MASK 0x1
#define SIM_REG_SHOW_TLB_SHIFTED_MASK 0x80
#define SIM_REG_SHOW_TLB_MASK (SIM_REG_SHOW_TLB_UNSHIFTED_MASK)
#define GET_SIM_REG_SHOW_TLB(Reg) \
    (((Reg) >> SIM_REG_SHOW_TLB_LSB) & SIM_REG_SHOW_TLB_UNSHIFTED_MASK)
#define SET_SIM_REG_SHOW_TLB(Reg, Val) \
    Reg = (((Reg) & (~SIM_REG_SHOW_TLB_SHIFTED_MASK)) | \
         (((Val) & SIM_REG_SHOW_TLB_UNSHIFTED_MASK) << SIM_REG_SHOW_TLB_LSB))
#define SIM_REG_SHOW_MMU_REGS_LSB 8
#define SIM_REG_SHOW_MMU_REGS_MSB 8
#define SIM_REG_SHOW_MMU_REGS_SZ 1
#define SIM_REG_SHOW_MMU_REGS_UNSHIFTED_MASK 0x1
#define SIM_REG_SHOW_MMU_REGS_SHIFTED_MASK 0x100
#define SIM_REG_SHOW_MMU_REGS_MASK (SIM_REG_SHOW_MMU_REGS_UNSHIFTED_MASK)
#define GET_SIM_REG_SHOW_MMU_REGS(Reg) \
    (((Reg) >> SIM_REG_SHOW_MMU_REGS_LSB) & SIM_REG_SHOW_MMU_REGS_UNSHIFTED_MASK)
#define SET_SIM_REG_SHOW_MMU_REGS(Reg, Val) \
    Reg = (((Reg) & (~SIM_REG_SHOW_MMU_REGS_SHIFTED_MASK)) | \
         (((Val) & SIM_REG_SHOW_MMU_REGS_UNSHIFTED_MASK) << SIM_REG_SHOW_MMU_REGS_LSB))
#define SIM_REG_RSV0_LSB 9
#define SIM_REG_RSV0_MSB 31
#define SIM_REG_RSV0_SZ 23
#define SIM_REG_RSV0_UNSHIFTED_MASK 0x7fffff
#define SIM_REG_RSV0_SHIFTED_MASK 0xfffffe00
#define SIM_REG_RSV0_MASK (SIM_REG_RSV0_UNSHIFTED_MASK)
#define GET_SIM_REG_RSV0(Reg) \
    (((Reg) >> SIM_REG_RSV0_LSB) & SIM_REG_RSV0_UNSHIFTED_MASK)
#define SET_SIM_REG_RSV0(Reg, Val) \
    Reg = (((Reg) & (~SIM_REG_RSV0_SHIFTED_MASK)) | \
         (((Val) & SIM_REG_RSV0_UNSHIFTED_MASK) << SIM_REG_RSV0_LSB))

/* EXCEPTION register */
#define EXCEPTION_REG_REGNUM 7
#define EXCEPTION_REG_LSB 0
#define EXCEPTION_REG_MSB 6
#define EXCEPTION_REG_SZ 7
#define EXCEPTION_REG_UNSHIFTED_MASK 0x7f
#define EXCEPTION_REG_SHIFTED_MASK 0x7f
#define EXCEPTION_REG_MASK (EXCEPTION_REG_SHIFTED_MASK)
#define EXCEPTION_REG_MEA_LSB 0
#define EXCEPTION_REG_MEA_MSB 0
#define EXCEPTION_REG_MEA_SZ 1
#define EXCEPTION_REG_MEA_UNSHIFTED_MASK 0x1
#define EXCEPTION_REG_MEA_SHIFTED_MASK 0x1
#define EXCEPTION_REG_MEA_MASK (EXCEPTION_REG_MEA_UNSHIFTED_MASK)
#define GET_EXCEPTION_REG_MEA(Reg) \
    (((Reg) >> EXCEPTION_REG_MEA_LSB) & EXCEPTION_REG_MEA_UNSHIFTED_MASK)
#define SET_EXCEPTION_REG_MEA(Reg, Val) \
    Reg = (((Reg) & (~EXCEPTION_REG_MEA_SHIFTED_MASK)) | \
         (((Val) & EXCEPTION_REG_MEA_UNSHIFTED_MASK) << EXCEPTION_REG_MEA_LSB))
#define EXCEPTION_REG_MEE_LSB 1
#define EXCEPTION_REG_MEE_MSB 1
#define EXCEPTION_REG_MEE_SZ 1
#define EXCEPTION_REG_MEE_UNSHIFTED_MASK 0x1
#define EXCEPTION_REG_MEE_SHIFTED_MASK 0x2
#define EXCEPTION_REG_MEE_MASK (EXCEPTION_REG_MEE_UNSHIFTED_MASK)
#define GET_EXCEPTION_REG_MEE(Reg) \
    (((Reg) >> EXCEPTION_REG_MEE_LSB) & EXCEPTION_REG_MEE_UNSHIFTED_MASK)
#define SET_EXCEPTION_REG_MEE(Reg, Val) \
    Reg = (((Reg) & (~EXCEPTION_REG_MEE_SHIFTED_MASK)) | \
         (((Val) & EXCEPTION_REG_MEE_UNSHIFTED_MASK) << EXCEPTION_REG_MEE_LSB))
#define EXCEPTION_REG_CAUSE_LSB 2
#define EXCEPTION_REG_CAUSE_MSB 6
#define EXCEPTION_REG_CAUSE_SZ 5
#define EXCEPTION_REG_CAUSE_UNSHIFTED_MASK 0x1f
#define EXCEPTION_REG_CAUSE_SHIFTED_MASK 0x7c
#define EXCEPTION_REG_CAUSE_MASK (EXCEPTION_REG_CAUSE_UNSHIFTED_MASK)
#define GET_EXCEPTION_REG_CAUSE(Reg) \
    (((Reg) >> EXCEPTION_REG_CAUSE_LSB) & EXCEPTION_REG_CAUSE_UNSHIFTED_MASK)
#define SET_EXCEPTION_REG_CAUSE(Reg, Val) \
    Reg = (((Reg) & (~EXCEPTION_REG_CAUSE_SHIFTED_MASK)) | \
         (((Val) & EXCEPTION_REG_CAUSE_UNSHIFTED_MASK) << EXCEPTION_REG_CAUSE_LSB))
#define EXCEPTION_REG_RSV0_LSB 7
#define EXCEPTION_REG_RSV0_MSB 31
#define EXCEPTION_REG_RSV0_SZ 25
#define EXCEPTION_REG_RSV0_UNSHIFTED_MASK 0x1ffffff
#define EXCEPTION_REG_RSV0_SHIFTED_MASK 0xffffff80
#define EXCEPTION_REG_RSV0_MASK (EXCEPTION_REG_RSV0_UNSHIFTED_MASK)
#define GET_EXCEPTION_REG_RSV0(Reg) \
    (((Reg) >> EXCEPTION_REG_RSV0_LSB) & EXCEPTION_REG_RSV0_UNSHIFTED_MASK)
#define SET_EXCEPTION_REG_RSV0(Reg, Val) \
    Reg = (((Reg) & (~EXCEPTION_REG_RSV0_SHIFTED_MASK)) | \
         (((Val) & EXCEPTION_REG_RSV0_UNSHIFTED_MASK) << EXCEPTION_REG_RSV0_LSB))

/* PTEADDR register */
#define PTEADDR_REG_REGNUM 8
#define PTEADDR_REG_LSB 2
#define PTEADDR_REG_MSB 31
#define PTEADDR_REG_SZ 30
#define PTEADDR_REG_UNSHIFTED_MASK 0x3fffffff
#define PTEADDR_REG_SHIFTED_MASK 0xfffffffc
#define PTEADDR_REG_MASK (PTEADDR_REG_SHIFTED_MASK)
#define PTEADDR_REG_VPN_LSB 2
#define PTEADDR_REG_VPN_MSB 21
#define PTEADDR_REG_VPN_SZ 20
#define PTEADDR_REG_VPN_UNSHIFTED_MASK 0xfffff
#define PTEADDR_REG_VPN_SHIFTED_MASK 0x3ffffc
#define PTEADDR_REG_VPN_MASK (PTEADDR_REG_VPN_UNSHIFTED_MASK)
#define GET_PTEADDR_REG_VPN(Reg) \
    (((Reg) >> PTEADDR_REG_VPN_LSB) & PTEADDR_REG_VPN_UNSHIFTED_MASK)
#define SET_PTEADDR_REG_VPN(Reg, Val) \
    Reg = (((Reg) & (~PTEADDR_REG_VPN_SHIFTED_MASK)) | \
         (((Val) & PTEADDR_REG_VPN_UNSHIFTED_MASK) << PTEADDR_REG_VPN_LSB))
#define PTEADDR_REG_PTBASE_LSB 22
#define PTEADDR_REG_PTBASE_MSB 31
#define PTEADDR_REG_PTBASE_SZ 10
#define PTEADDR_REG_PTBASE_UNSHIFTED_MASK 0x3ff
#define PTEADDR_REG_PTBASE_SHIFTED_MASK 0xffc00000
#define PTEADDR_REG_PTBASE_MASK (PTEADDR_REG_PTBASE_UNSHIFTED_MASK)
#define GET_PTEADDR_REG_PTBASE(Reg) \
    (((Reg) >> PTEADDR_REG_PTBASE_LSB) & PTEADDR_REG_PTBASE_UNSHIFTED_MASK)
#define SET_PTEADDR_REG_PTBASE(Reg, Val) \
    Reg = (((Reg) & (~PTEADDR_REG_PTBASE_SHIFTED_MASK)) | \
         (((Val) & PTEADDR_REG_PTBASE_UNSHIFTED_MASK) << PTEADDR_REG_PTBASE_LSB))
#define PTEADDR_REG_RSV0_LSB 0
#define PTEADDR_REG_RSV0_MSB 1
#define PTEADDR_REG_RSV0_SZ 2
#define PTEADDR_REG_RSV0_UNSHIFTED_MASK 0x3
#define PTEADDR_REG_RSV0_SHIFTED_MASK 0x3
#define PTEADDR_REG_RSV0_MASK (PTEADDR_REG_RSV0_UNSHIFTED_MASK)
#define GET_PTEADDR_REG_RSV0(Reg) \
    (((Reg) >> PTEADDR_REG_RSV0_LSB) & PTEADDR_REG_RSV0_UNSHIFTED_MASK)
#define SET_PTEADDR_REG_RSV0(Reg, Val) \
    Reg = (((Reg) & (~PTEADDR_REG_RSV0_SHIFTED_MASK)) | \
         (((Val) & PTEADDR_REG_RSV0_UNSHIFTED_MASK) << PTEADDR_REG_RSV0_LSB))

/* TLBACC register */
#define TLBACC_REG_REGNUM 9
#define TLBACC_REG_LSB 0
#define TLBACC_REG_MSB 24
#define TLBACC_REG_SZ 25
#define TLBACC_REG_UNSHIFTED_MASK 0x1ffffff
#define TLBACC_REG_SHIFTED_MASK 0x1ffffff
#define TLBACC_REG_MASK (TLBACC_REG_SHIFTED_MASK)
#define TLBACC_REG_PFN_LSB 0
#define TLBACC_REG_PFN_MSB 19
#define TLBACC_REG_PFN_SZ 20
#define TLBACC_REG_PFN_UNSHIFTED_MASK 0xfffff
#define TLBACC_REG_PFN_SHIFTED_MASK 0xfffff
#define TLBACC_REG_PFN_MASK (TLBACC_REG_PFN_UNSHIFTED_MASK)
#define GET_TLBACC_REG_PFN(Reg) \
    (((Reg) >> TLBACC_REG_PFN_LSB) & TLBACC_REG_PFN_UNSHIFTED_MASK)
#define SET_TLBACC_REG_PFN(Reg, Val) \
    Reg = (((Reg) & (~TLBACC_REG_PFN_SHIFTED_MASK)) | \
         (((Val) & TLBACC_REG_PFN_UNSHIFTED_MASK) << TLBACC_REG_PFN_LSB))
#define TLBACC_REG_G_LSB 20
#define TLBACC_REG_G_MSB 20
#define TLBACC_REG_G_SZ 1
#define TLBACC_REG_G_UNSHIFTED_MASK 0x1
#define TLBACC_REG_G_SHIFTED_MASK 0x100000
#define TLBACC_REG_G_MASK (TLBACC_REG_G_UNSHIFTED_MASK)
#define GET_TLBACC_REG_G(Reg) \
    (((Reg) >> TLBACC_REG_G_LSB) & TLBACC_REG_G_UNSHIFTED_MASK)
#define SET_TLBACC_REG_G(Reg, Val) \
    Reg = (((Reg) & (~TLBACC_REG_G_SHIFTED_MASK)) | \
         (((Val) & TLBACC_REG_G_UNSHIFTED_MASK) << TLBACC_REG_G_LSB))
#define TLBACC_REG_X_LSB 21
#define TLBACC_REG_X_MSB 21
#define TLBACC_REG_X_SZ 1
#define TLBACC_REG_X_UNSHIFTED_MASK 0x1
#define TLBACC_REG_X_SHIFTED_MASK 0x200000
#define TLBACC_REG_X_MASK (TLBACC_REG_X_UNSHIFTED_MASK)
#define GET_TLBACC_REG_X(Reg) \
    (((Reg) >> TLBACC_REG_X_LSB) & TLBACC_REG_X_UNSHIFTED_MASK)
#define SET_TLBACC_REG_X(Reg, Val) \
    Reg = (((Reg) & (~TLBACC_REG_X_SHIFTED_MASK)) | \
         (((Val) & TLBACC_REG_X_UNSHIFTED_MASK) << TLBACC_REG_X_LSB))
#define TLBACC_REG_W_LSB 22
#define TLBACC_REG_W_MSB 22
#define TLBACC_REG_W_SZ 1
#define TLBACC_REG_W_UNSHIFTED_MASK 0x1
#define TLBACC_REG_W_SHIFTED_MASK 0x400000
#define TLBACC_REG_W_MASK (TLBACC_REG_W_UNSHIFTED_MASK)
#define GET_TLBACC_REG_W(Reg) \
    (((Reg) >> TLBACC_REG_W_LSB) & TLBACC_REG_W_UNSHIFTED_MASK)
#define SET_TLBACC_REG_W(Reg, Val) \
    Reg = (((Reg) & (~TLBACC_REG_W_SHIFTED_MASK)) | \
         (((Val) & TLBACC_REG_W_UNSHIFTED_MASK) << TLBACC_REG_W_LSB))
#define TLBACC_REG_R_LSB 23
#define TLBACC_REG_R_MSB 23
#define TLBACC_REG_R_SZ 1
#define TLBACC_REG_R_UNSHIFTED_MASK 0x1
#define TLBACC_REG_R_SHIFTED_MASK 0x800000
#define TLBACC_REG_R_MASK (TLBACC_REG_R_UNSHIFTED_MASK)
#define GET_TLBACC_REG_R(Reg) \
    (((Reg) >> TLBACC_REG_R_LSB) & TLBACC_REG_R_UNSHIFTED_MASK)
#define SET_TLBACC_REG_R(Reg, Val) \
    Reg = (((Reg) & (~TLBACC_REG_R_SHIFTED_MASK)) | \
         (((Val) & TLBACC_REG_R_UNSHIFTED_MASK) << TLBACC_REG_R_LSB))
#define TLBACC_REG_C_LSB 24
#define TLBACC_REG_C_MSB 24
#define TLBACC_REG_C_SZ 1
#define TLBACC_REG_C_UNSHIFTED_MASK 0x1
#define TLBACC_REG_C_SHIFTED_MASK 0x1000000
#define TLBACC_REG_C_MASK (TLBACC_REG_C_UNSHIFTED_MASK)
#define GET_TLBACC_REG_C(Reg) \
    (((Reg) >> TLBACC_REG_C_LSB) & TLBACC_REG_C_UNSHIFTED_MASK)
#define SET_TLBACC_REG_C(Reg, Val) \
    Reg = (((Reg) & (~TLBACC_REG_C_SHIFTED_MASK)) | \
         (((Val) & TLBACC_REG_C_UNSHIFTED_MASK) << TLBACC_REG_C_LSB))
#define TLBACC_REG_IG_LSB 25
#define TLBACC_REG_IG_MSB 31
#define TLBACC_REG_IG_SZ 7
#define TLBACC_REG_IG_UNSHIFTED_MASK 0x7f
#define TLBACC_REG_IG_SHIFTED_MASK 0xfe000000
#define TLBACC_REG_IG_MASK (TLBACC_REG_IG_UNSHIFTED_MASK)
#define GET_TLBACC_REG_IG(Reg) \
    (((Reg) >> TLBACC_REG_IG_LSB) & TLBACC_REG_IG_UNSHIFTED_MASK)
#define SET_TLBACC_REG_IG(Reg, Val) \
    Reg = (((Reg) & (~TLBACC_REG_IG_SHIFTED_MASK)) | \
         (((Val) & TLBACC_REG_IG_UNSHIFTED_MASK) << TLBACC_REG_IG_LSB))

/* TLBMISC register */
#define TLBMISC_REG_REGNUM 10
#define TLBMISC_REG_LSB 0
#define TLBMISC_REG_MSB 23
#define TLBMISC_REG_SZ 24
#define TLBMISC_REG_UNSHIFTED_MASK 0xffffff
#define TLBMISC_REG_SHIFTED_MASK 0xffffff
#define TLBMISC_REG_MASK (TLBMISC_REG_SHIFTED_MASK)
#define TLBMISC_REG_D_LSB 0
#define TLBMISC_REG_D_MSB 0
#define TLBMISC_REG_D_SZ 1
#define TLBMISC_REG_D_UNSHIFTED_MASK 0x1
#define TLBMISC_REG_D_SHIFTED_MASK 0x1
#define TLBMISC_REG_D_MASK (TLBMISC_REG_D_UNSHIFTED_MASK)
#define GET_TLBMISC_REG_D(Reg) \
    (((Reg) >> TLBMISC_REG_D_LSB) & TLBMISC_REG_D_UNSHIFTED_MASK)
#define SET_TLBMISC_REG_D(Reg, Val) \
    Reg = (((Reg) & (~TLBMISC_REG_D_SHIFTED_MASK)) | \
         (((Val) & TLBMISC_REG_D_UNSHIFTED_MASK) << TLBMISC_REG_D_LSB))
#define TLBMISC_REG_PERM_LSB 1
#define TLBMISC_REG_PERM_MSB 1
#define TLBMISC_REG_PERM_SZ 1
#define TLBMISC_REG_PERM_UNSHIFTED_MASK 0x1
#define TLBMISC_REG_PERM_SHIFTED_MASK 0x2
#define TLBMISC_REG_PERM_MASK (TLBMISC_REG_PERM_UNSHIFTED_MASK)
#define GET_TLBMISC_REG_PERM(Reg) \
    (((Reg) >> TLBMISC_REG_PERM_LSB) & TLBMISC_REG_PERM_UNSHIFTED_MASK)
#define SET_TLBMISC_REG_PERM(Reg, Val) \
    Reg = (((Reg) & (~TLBMISC_REG_PERM_SHIFTED_MASK)) | \
         (((Val) & TLBMISC_REG_PERM_UNSHIFTED_MASK) << TLBMISC_REG_PERM_LSB))
#define TLBMISC_REG_BAD_LSB 2
#define TLBMISC_REG_BAD_MSB 2
#define TLBMISC_REG_BAD_SZ 1
#define TLBMISC_REG_BAD_UNSHIFTED_MASK 0x1
#define TLBMISC_REG_BAD_SHIFTED_MASK 0x4
#define TLBMISC_REG_BAD_MASK (TLBMISC_REG_BAD_UNSHIFTED_MASK)
#define GET_TLBMISC_REG_BAD(Reg) \
    (((Reg) >> TLBMISC_REG_BAD_LSB) & TLBMISC_REG_BAD_UNSHIFTED_MASK)
#define SET_TLBMISC_REG_BAD(Reg, Val) \
    Reg = (((Reg) & (~TLBMISC_REG_BAD_SHIFTED_MASK)) | \
         (((Val) & TLBMISC_REG_BAD_UNSHIFTED_MASK) << TLBMISC_REG_BAD_LSB))
#define TLBMISC_REG_DBL_LSB 3
#define TLBMISC_REG_DBL_MSB 3
#define TLBMISC_REG_DBL_SZ 1
#define TLBMISC_REG_DBL_UNSHIFTED_MASK 0x1
#define TLBMISC_REG_DBL_SHIFTED_MASK 0x8
#define TLBMISC_REG_DBL_MASK (TLBMISC_REG_DBL_UNSHIFTED_MASK)
#define GET_TLBMISC_REG_DBL(Reg) \
    (((Reg) >> TLBMISC_REG_DBL_LSB) & TLBMISC_REG_DBL_UNSHIFTED_MASK)
#define SET_TLBMISC_REG_DBL(Reg, Val) \
    Reg = (((Reg) & (~TLBMISC_REG_DBL_SHIFTED_MASK)) | \
         (((Val) & TLBMISC_REG_DBL_UNSHIFTED_MASK) << TLBMISC_REG_DBL_LSB))
#define TLBMISC_REG_PID_LSB 4
#define TLBMISC_REG_PID_MSB 17
#define TLBMISC_REG_PID_SZ 14
#define TLBMISC_REG_PID_UNSHIFTED_MASK 0x3fff
#define TLBMISC_REG_PID_SHIFTED_MASK 0x3fff0
#define TLBMISC_REG_PID_MASK (TLBMISC_REG_PID_UNSHIFTED_MASK)
#define GET_TLBMISC_REG_PID(Reg) \
    (((Reg) >> TLBMISC_REG_PID_LSB) & TLBMISC_REG_PID_UNSHIFTED_MASK)
#define SET_TLBMISC_REG_PID(Reg, Val) \
    Reg = (((Reg) & (~TLBMISC_REG_PID_SHIFTED_MASK)) | \
         (((Val) & TLBMISC_REG_PID_UNSHIFTED_MASK) << TLBMISC_REG_PID_LSB))
#define TLBMISC_REG_WE_LSB 18
#define TLBMISC_REG_WE_MSB 18
#define TLBMISC_REG_WE_SZ 1
#define TLBMISC_REG_WE_UNSHIFTED_MASK 0x1
#define TLBMISC_REG_WE_SHIFTED_MASK 0x40000
#define TLBMISC_REG_WE_MASK (TLBMISC_REG_WE_UNSHIFTED_MASK)
#define GET_TLBMISC_REG_WE(Reg) \
    (((Reg) >> TLBMISC_REG_WE_LSB) & TLBMISC_REG_WE_UNSHIFTED_MASK)
#define SET_TLBMISC_REG_WE(Reg, Val) \
    Reg = (((Reg) & (~TLBMISC_REG_WE_SHIFTED_MASK)) | \
         (((Val) & TLBMISC_REG_WE_UNSHIFTED_MASK) << TLBMISC_REG_WE_LSB))
#define TLBMISC_REG_RD_LSB 19
#define TLBMISC_REG_RD_MSB 19
#define TLBMISC_REG_RD_SZ 1
#define TLBMISC_REG_RD_UNSHIFTED_MASK 0x1
#define TLBMISC_REG_RD_SHIFTED_MASK 0x80000
#define TLBMISC_REG_RD_MASK (TLBMISC_REG_RD_UNSHIFTED_MASK)
#define GET_TLBMISC_REG_RD(Reg) \
    (((Reg) >> TLBMISC_REG_RD_LSB) & TLBMISC_REG_RD_UNSHIFTED_MASK)
#define SET_TLBMISC_REG_RD(Reg, Val) \
    Reg = (((Reg) & (~TLBMISC_REG_RD_SHIFTED_MASK)) | \
         (((Val) & TLBMISC_REG_RD_UNSHIFTED_MASK) << TLBMISC_REG_RD_LSB))
#define TLBMISC_REG_WAY_LSB 20
#define TLBMISC_REG_WAY_MSB 23
#define TLBMISC_REG_WAY_SZ 4
#define TLBMISC_REG_WAY_UNSHIFTED_MASK 0xf
#define TLBMISC_REG_WAY_SHIFTED_MASK 0xf00000
#define TLBMISC_REG_WAY_MASK (TLBMISC_REG_WAY_UNSHIFTED_MASK)
#define GET_TLBMISC_REG_WAY(Reg) \
    (((Reg) >> TLBMISC_REG_WAY_LSB) & TLBMISC_REG_WAY_UNSHIFTED_MASK)
#define SET_TLBMISC_REG_WAY(Reg, Val) \
    Reg = (((Reg) & (~TLBMISC_REG_WAY_SHIFTED_MASK)) | \
         (((Val) & TLBMISC_REG_WAY_UNSHIFTED_MASK) << TLBMISC_REG_WAY_LSB))
#define TLBMISC_REG_RSV0_LSB 24
#define TLBMISC_REG_RSV0_MSB 31
#define TLBMISC_REG_RSV0_SZ 8
#define TLBMISC_REG_RSV0_UNSHIFTED_MASK 0xff
#define TLBMISC_REG_RSV0_SHIFTED_MASK 0xff000000
#define TLBMISC_REG_RSV0_MASK (TLBMISC_REG_RSV0_UNSHIFTED_MASK)
#define GET_TLBMISC_REG_RSV0(Reg) \
    (((Reg) >> TLBMISC_REG_RSV0_LSB) & TLBMISC_REG_RSV0_UNSHIFTED_MASK)
#define SET_TLBMISC_REG_RSV0(Reg, Val) \
    Reg = (((Reg) & (~TLBMISC_REG_RSV0_SHIFTED_MASK)) | \
         (((Val) & TLBMISC_REG_RSV0_UNSHIFTED_MASK) << TLBMISC_REG_RSV0_LSB))

/* BADADDR register */
#define BADADDR_REG_REGNUM 12
#define BADADDR_REG_LSB 0
#define BADADDR_REG_MSB 31
#define BADADDR_REG_SZ 32
#define BADADDR_REG_UNSHIFTED_MASK 0xffffffff
#define BADADDR_REG_SHIFTED_MASK 0xffffffff
#define BADADDR_REG_MASK (BADADDR_REG_SHIFTED_MASK)
#define BADADDR_REG_BADDR_LSB 0
#define BADADDR_REG_BADDR_MSB 31
#define BADADDR_REG_BADDR_SZ 32
#define BADADDR_REG_BADDR_UNSHIFTED_MASK 0xffffffff
#define BADADDR_REG_BADDR_SHIFTED_MASK 0xffffffff
#define BADADDR_REG_BADDR_MASK (BADADDR_REG_BADDR_UNSHIFTED_MASK)
#define GET_BADADDR_REG_BADDR(Reg) \
    (((Reg) >> BADADDR_REG_BADDR_LSB) & BADADDR_REG_BADDR_UNSHIFTED_MASK)
#define SET_BADADDR_REG_BADDR(Reg, Val) \
    Reg = (((Reg) & (~BADADDR_REG_BADDR_SHIFTED_MASK)) | \
         (((Val) & BADADDR_REG_BADDR_UNSHIFTED_MASK) << BADADDR_REG_BADDR_LSB))

/* CONFIG register */
#define CONFIG_REG_REGNUM 13
#define CONFIG_REG_LSB 0
#define CONFIG_REG_MSB 1
#define CONFIG_REG_SZ 2
#define CONFIG_REG_UNSHIFTED_MASK 0x3
#define CONFIG_REG_SHIFTED_MASK 0x3
#define CONFIG_REG_MASK (CONFIG_REG_SHIFTED_MASK)
#define CONFIG_REG_PE_LSB 0
#define CONFIG_REG_PE_MSB 0
#define CONFIG_REG_PE_SZ 1
#define CONFIG_REG_PE_UNSHIFTED_MASK 0x1
#define CONFIG_REG_PE_SHIFTED_MASK 0x1
#define CONFIG_REG_PE_MASK (CONFIG_REG_PE_UNSHIFTED_MASK)
#define GET_CONFIG_REG_PE(Reg) \
    (((Reg) >> CONFIG_REG_PE_LSB) & CONFIG_REG_PE_UNSHIFTED_MASK)
#define SET_CONFIG_REG_PE(Reg, Val) \
    Reg = (((Reg) & (~CONFIG_REG_PE_SHIFTED_MASK)) | \
         (((Val) & CONFIG_REG_PE_UNSHIFTED_MASK) << CONFIG_REG_PE_LSB))
#define CONFIG_REG_ANI_LSB 1
#define CONFIG_REG_ANI_MSB 1
#define CONFIG_REG_ANI_SZ 1
#define CONFIG_REG_ANI_UNSHIFTED_MASK 0x1
#define CONFIG_REG_ANI_SHIFTED_MASK 0x2
#define CONFIG_REG_ANI_MASK (CONFIG_REG_ANI_UNSHIFTED_MASK)
#define GET_CONFIG_REG_ANI(Reg) \
    (((Reg) >> CONFIG_REG_ANI_LSB) & CONFIG_REG_ANI_UNSHIFTED_MASK)
#define SET_CONFIG_REG_ANI(Reg, Val) \
    Reg = (((Reg) & (~CONFIG_REG_ANI_SHIFTED_MASK)) | \
         (((Val) & CONFIG_REG_ANI_UNSHIFTED_MASK) << CONFIG_REG_ANI_LSB))
#define CONFIG_REG_RSV0_LSB 2
#define CONFIG_REG_RSV0_MSB 31
#define CONFIG_REG_RSV0_SZ 30
#define CONFIG_REG_RSV0_UNSHIFTED_MASK 0x3fffffff
#define CONFIG_REG_RSV0_SHIFTED_MASK 0xfffffffc
#define CONFIG_REG_RSV0_MASK (CONFIG_REG_RSV0_UNSHIFTED_MASK)
#define GET_CONFIG_REG_RSV0(Reg) \
    (((Reg) >> CONFIG_REG_RSV0_LSB) & CONFIG_REG_RSV0_UNSHIFTED_MASK)
#define SET_CONFIG_REG_RSV0(Reg, Val) \
    Reg = (((Reg) & (~CONFIG_REG_RSV0_SHIFTED_MASK)) | \
         (((Val) & CONFIG_REG_RSV0_UNSHIFTED_MASK) << CONFIG_REG_RSV0_LSB))

/* MPUBASE register */
#define MPUBASE_REG_REGNUM 14
#define MPUBASE_REG_LSB 0
#define MPUBASE_REG_MSB 31
#define MPUBASE_REG_SZ 32
#define MPUBASE_REG_UNSHIFTED_MASK 0xffffffff
#define MPUBASE_REG_SHIFTED_MASK 0xffffffff
#define MPUBASE_REG_MASK (MPUBASE_REG_SHIFTED_MASK)
#define MPUBASE_REG_D_LSB 0
#define MPUBASE_REG_D_MSB 0
#define MPUBASE_REG_D_SZ 1
#define MPUBASE_REG_D_UNSHIFTED_MASK 0x1
#define MPUBASE_REG_D_SHIFTED_MASK 0x1
#define MPUBASE_REG_D_MASK (MPUBASE_REG_D_UNSHIFTED_MASK)
#define GET_MPUBASE_REG_D(Reg) \
    (((Reg) >> MPUBASE_REG_D_LSB) & MPUBASE_REG_D_UNSHIFTED_MASK)
#define SET_MPUBASE_REG_D(Reg, Val) \
    Reg = (((Reg) & (~MPUBASE_REG_D_SHIFTED_MASK)) | \
         (((Val) & MPUBASE_REG_D_UNSHIFTED_MASK) << MPUBASE_REG_D_LSB))
#define MPUBASE_REG_INDEX_LSB 1
#define MPUBASE_REG_INDEX_MSB 5
#define MPUBASE_REG_INDEX_SZ 5
#define MPUBASE_REG_INDEX_UNSHIFTED_MASK 0x1f
#define MPUBASE_REG_INDEX_SHIFTED_MASK 0x3e
#define MPUBASE_REG_INDEX_MASK (MPUBASE_REG_INDEX_UNSHIFTED_MASK)
#define GET_MPUBASE_REG_INDEX(Reg) \
    (((Reg) >> MPUBASE_REG_INDEX_LSB) & MPUBASE_REG_INDEX_UNSHIFTED_MASK)
#define SET_MPUBASE_REG_INDEX(Reg, Val) \
    Reg = (((Reg) & (~MPUBASE_REG_INDEX_SHIFTED_MASK)) | \
         (((Val) & MPUBASE_REG_INDEX_UNSHIFTED_MASK) << MPUBASE_REG_INDEX_LSB))
#define MPUBASE_REG_BASE_LSB 6
#define MPUBASE_REG_BASE_MSB 31
#define MPUBASE_REG_BASE_SZ 26
#define MPUBASE_REG_BASE_UNSHIFTED_MASK 0x3ffffff
#define MPUBASE_REG_BASE_SHIFTED_MASK 0xffffffc0
#define MPUBASE_REG_BASE_MASK (MPUBASE_REG_BASE_UNSHIFTED_MASK)
#define GET_MPUBASE_REG_BASE(Reg) \
    (((Reg) >> MPUBASE_REG_BASE_LSB) & MPUBASE_REG_BASE_UNSHIFTED_MASK)
#define SET_MPUBASE_REG_BASE(Reg, Val) \
    Reg = (((Reg) & (~MPUBASE_REG_BASE_SHIFTED_MASK)) | \
         (((Val) & MPUBASE_REG_BASE_UNSHIFTED_MASK) << MPUBASE_REG_BASE_LSB))

/* MPUACC register */
#define MPUACC_REG_REGNUM 15
#define MPUACC_REG_LSB 0
#define MPUACC_REG_MSB 31
#define MPUACC_REG_SZ 32
#define MPUACC_REG_UNSHIFTED_MASK 0xffffffff
#define MPUACC_REG_SHIFTED_MASK 0xffffffff
#define MPUACC_REG_MASK (MPUACC_REG_SHIFTED_MASK)
#define MPUACC_REG_WR_LSB 0
#define MPUACC_REG_WR_MSB 0
#define MPUACC_REG_WR_SZ 1
#define MPUACC_REG_WR_UNSHIFTED_MASK 0x1
#define MPUACC_REG_WR_SHIFTED_MASK 0x1
#define MPUACC_REG_WR_MASK (MPUACC_REG_WR_UNSHIFTED_MASK)
#define GET_MPUACC_REG_WR(Reg) \
    (((Reg) >> MPUACC_REG_WR_LSB) & MPUACC_REG_WR_UNSHIFTED_MASK)
#define SET_MPUACC_REG_WR(Reg, Val) \
    Reg = (((Reg) & (~MPUACC_REG_WR_SHIFTED_MASK)) | \
         (((Val) & MPUACC_REG_WR_UNSHIFTED_MASK) << MPUACC_REG_WR_LSB))
#define MPUACC_REG_RD_LSB 1
#define MPUACC_REG_RD_MSB 1
#define MPUACC_REG_RD_SZ 1
#define MPUACC_REG_RD_UNSHIFTED_MASK 0x1
#define MPUACC_REG_RD_SHIFTED_MASK 0x2
#define MPUACC_REG_RD_MASK (MPUACC_REG_RD_UNSHIFTED_MASK)
#define GET_MPUACC_REG_RD(Reg) \
    (((Reg) >> MPUACC_REG_RD_LSB) & MPUACC_REG_RD_UNSHIFTED_MASK)
#define SET_MPUACC_REG_RD(Reg, Val) \
    Reg = (((Reg) & (~MPUACC_REG_RD_SHIFTED_MASK)) | \
         (((Val) & MPUACC_REG_RD_UNSHIFTED_MASK) << MPUACC_REG_RD_LSB))
#define MPUACC_REG_PERM_LSB 2
#define MPUACC_REG_PERM_MSB 4
#define MPUACC_REG_PERM_SZ 3
#define MPUACC_REG_PERM_UNSHIFTED_MASK 0x7
#define MPUACC_REG_PERM_SHIFTED_MASK 0x1c
#define MPUACC_REG_PERM_MASK (MPUACC_REG_PERM_UNSHIFTED_MASK)
#define GET_MPUACC_REG_PERM(Reg) \
    (((Reg) >> MPUACC_REG_PERM_LSB) & MPUACC_REG_PERM_UNSHIFTED_MASK)
#define SET_MPUACC_REG_PERM(Reg, Val) \
    Reg = (((Reg) & (~MPUACC_REG_PERM_SHIFTED_MASK)) | \
         (((Val) & MPUACC_REG_PERM_UNSHIFTED_MASK) << MPUACC_REG_PERM_LSB))
#define MPUACC_REG_C_LSB 5
#define MPUACC_REG_C_MSB 5
#define MPUACC_REG_C_SZ 1
#define MPUACC_REG_C_UNSHIFTED_MASK 0x1
#define MPUACC_REG_C_SHIFTED_MASK 0x20
#define MPUACC_REG_C_MASK (MPUACC_REG_C_UNSHIFTED_MASK)
#define GET_MPUACC_REG_C(Reg) \
    (((Reg) >> MPUACC_REG_C_LSB) & MPUACC_REG_C_UNSHIFTED_MASK)
#define SET_MPUACC_REG_C(Reg, Val) \
    Reg = (((Reg) & (~MPUACC_REG_C_SHIFTED_MASK)) | \
         (((Val) & MPUACC_REG_C_UNSHIFTED_MASK) << MPUACC_REG_C_LSB))
#define MPUACC_REG_LIMIT_LSB 6
#define MPUACC_REG_LIMIT_MSB 31
#define MPUACC_REG_LIMIT_SZ 26
#define MPUACC_REG_LIMIT_UNSHIFTED_MASK 0x3ffffff
#define MPUACC_REG_LIMIT_SHIFTED_MASK 0xffffffc0
#define MPUACC_REG_LIMIT_MASK (MPUACC_REG_LIMIT_UNSHIFTED_MASK)
#define GET_MPUACC_REG_LIMIT(Reg) \
    (((Reg) >> MPUACC_REG_LIMIT_LSB) & MPUACC_REG_LIMIT_UNSHIFTED_MASK)
#define SET_MPUACC_REG_LIMIT(Reg, Val) \
    Reg = (((Reg) & (~MPUACC_REG_LIMIT_SHIFTED_MASK)) | \
         (((Val) & MPUACC_REG_LIMIT_UNSHIFTED_MASK) << MPUACC_REG_LIMIT_LSB))

/* OP instruction opcode values (index is OP field) */
#define NUM_OP_INSTS 64
#ifndef ALT_ASM_SRC
extern const char* op_names[NUM_OP_INSTS];
#endif /* ALT_ASM_SRC */

/* OP instruction values */
#define OP_CALL 0
#define OP_JMPI 1
#define OP_LDBU 3
#define OP_ADDI 4
#define OP_STB 5
#define OP_BR 6
#define OP_LDB 7
#define OP_CMPGEI 8
#define OP_LDHU 11
#define OP_ANDI 12
#define OP_STH 13
#define OP_BGE 14
#define OP_LDH 15
#define OP_CMPLTI 16
#define OP_INITDA 19
#define OP_ORI 20
#define OP_STW 21
#define OP_BLT 22
#define OP_LDW 23
#define OP_CMPNEI 24
#define OP_FLUSHDA 27
#define OP_XORI 28
#define OP_STC 29
#define OP_BNE 30
#define OP_LDL 31
#define OP_CMPEQI 32
#define OP_LDBUIO 35
#define OP_MULI 36
#define OP_STBIO 37
#define OP_BEQ 38
#define OP_LDBIO 39
#define OP_CMPGEUI 40
#define OP_LDHUIO 43
#define OP_ANDHI 44
#define OP_STHIO 45
#define OP_BGEU 46
#define OP_LDHIO 47
#define OP_CMPLTUI 48
#define OP_CUSTOM 50
#define OP_INITD 51
#define OP_ORHI 52
#define OP_STWIO 53
#define OP_BLTU 54
#define OP_LDWIO 55
#define OP_RDPRS 56
#define OP_OPX 58
#define OP_FLUSHD 59
#define OP_XORHI 60

/* OPX instruction opcode values (index is OPX field) */
#define NUM_OPX_INSTS 64

#ifndef ALT_ASM_SRC
extern const char* opx_names[NUM_OPX_INSTS];
#endif /* ALT_ASM_SRC */

/* OPX instruction values */
#define OPX_ERET 1
#define OPX_ROLI 2
#define OPX_ROL 3
#define OPX_FLUSHP 4
#define OPX_RET 5
#define OPX_NOR 6
#define OPX_MULXUU 7
#define OPX_CMPGE 8
#define OPX_BRET 9
#define OPX_ROR 11
#define OPX_FLUSHI 12
#define OPX_JMP 13
#define OPX_AND 14
#define OPX_CMPLT 16
#define OPX_SLLI 18
#define OPX_SLL 19
#define OPX_WRPRS 20
#define OPX_OR 22
#define OPX_MULXSU 23
#define OPX_CMPNE 24
#define OPX_SRLI 26
#define OPX_SRL 27
#define OPX_NEXTPC 28
#define OPX_CALLR 29
#define OPX_XOR 30
#define OPX_MULXSS 31
#define OPX_CMPEQ 32
#define OPX_DIVU 36
#define OPX_DIV 37
#define OPX_RDCTL 38
#define OPX_MUL 39
#define OPX_CMPGEU 40
#define OPX_INITI 41
#define OPX_TRAP 45
#define OPX_WRCTL 46
#define OPX_CMPLTU 48
#define OPX_ADD 49
#define OPX_BREAK 52
#define OPX_HBREAK 53
#define OPX_SYNC 54
#define OPX_SUB 57
#define OPX_SRAI 58
#define OPX_SRA 59
#define OPX_INTR 61
#define OPX_CRST 62

/* Macros to detect sub-opcode instructions */
#define IS_OPX_INST(Iw) (GET_IW_OP(Iw) == OP_OPX)
#define IS_CUSTOM_INST(Iw) (GET_IW_OP(Iw) == OP_CUSTOM)

/* Instruction Constants */
#define COMPARE_OP_EQ 0x0
#define COMPARE_OP_GE 0x1
#define COMPARE_OP_LSB 3
#define COMPARE_OP_LT 0x2
#define COMPARE_OP_MSB 4
#define COMPARE_OP_NE 0x3
#define COMPARE_OP_SZ 2
#define EMPTY_CRST_IW 127034
#define EMPTY_HBREAK_IW 4040762
#define EMPTY_INTR_IW 3926074
#define EMPTY_NOP_IW 100410
#define EMPTY_RET_IW 4160759866
#define IW_MEMSZ_BYTE 0x0
#define IW_MEMSZ_HWORD 0x1
#define IW_MEMSZ_WORD_MSB 0x1
#define JMP_CALLR_VS_RET_IS_RET 0
#define JMP_CALLR_VS_RET_OPX_BIT 3
#define LOGIC_OP_AND 0x1
#define LOGIC_OP_LSB 3
#define LOGIC_OP_MSB 4
#define LOGIC_OP_NOR 0x0
#define LOGIC_OP_OR 0x2
#define LOGIC_OP_SZ 2
#define LOGIC_OP_XOR 0x3

/*
 * Instruction field macros
 */
#define IW_A_LSB 27
#define IW_A_MSB 31
#define IW_A_SZ 5
#define IW_A_UNSHIFTED_MASK 0x1f
#define IW_A_SHIFTED_MASK 0xf8000000
#define IW_A_MASK (IW_A_UNSHIFTED_MASK)
#define GET_IW_A(Iw) \
    (((Iw) >> IW_A_LSB) & IW_A_UNSHIFTED_MASK)
#define SET_IW_A(Iw, Val) \
    Iw = (((Iw) & (~IW_A_SHIFTED_MASK)) | \
         (((Val) & IW_A_UNSHIFTED_MASK) << IW_A_LSB))
#define IW_B_LSB 22
#define IW_B_MSB 26
#define IW_B_SZ 5
#define IW_B_UNSHIFTED_MASK 0x1f
#define IW_B_SHIFTED_MASK 0x7c00000
#define IW_B_MASK (IW_B_UNSHIFTED_MASK)
#define GET_IW_B(Iw) \
    (((Iw) >> IW_B_LSB) & IW_B_UNSHIFTED_MASK)
#define SET_IW_B(Iw, Val) \
    Iw = (((Iw) & (~IW_B_SHIFTED_MASK)) | \
         (((Val) & IW_B_UNSHIFTED_MASK) << IW_B_LSB))
#define IW_C_LSB 17
#define IW_C_MSB 21
#define IW_C_SZ 5
#define IW_C_UNSHIFTED_MASK 0x1f
#define IW_C_SHIFTED_MASK 0x3e0000
#define IW_C_MASK (IW_C_UNSHIFTED_MASK)
#define GET_IW_C(Iw) \
    (((Iw) >> IW_C_LSB) & IW_C_UNSHIFTED_MASK)
#define SET_IW_C(Iw, Val) \
    Iw = (((Iw) & (~IW_C_SHIFTED_MASK)) | \
         (((Val) & IW_C_UNSHIFTED_MASK) << IW_C_LSB))
#define IW_CUSTOM_N_LSB 6
#define IW_CUSTOM_N_MSB 13
#define IW_CUSTOM_N_SZ 8
#define IW_CUSTOM_N_UNSHIFTED_MASK 0xff
#define IW_CUSTOM_N_SHIFTED_MASK 0x3fc0
#define IW_CUSTOM_N_MASK (IW_CUSTOM_N_UNSHIFTED_MASK)
#define GET_IW_CUSTOM_N(Iw) \
    (((Iw) >> IW_CUSTOM_N_LSB) & IW_CUSTOM_N_UNSHIFTED_MASK)
#define SET_IW_CUSTOM_N(Iw, Val) \
    Iw = (((Iw) & (~IW_CUSTOM_N_SHIFTED_MASK)) | \
         (((Val) & IW_CUSTOM_N_UNSHIFTED_MASK) << IW_CUSTOM_N_LSB))
#define IW_CUSTOM_READRA_LSB 16
#define IW_CUSTOM_READRA_MSB 16
#define IW_CUSTOM_READRA_SZ 1
#define IW_CUSTOM_READRA_UNSHIFTED_MASK 0x1
#define IW_CUSTOM_READRA_SHIFTED_MASK 0x10000
#define IW_CUSTOM_READRA_MASK (IW_CUSTOM_READRA_UNSHIFTED_MASK)
#define GET_IW_CUSTOM_READRA(Iw) \
    (((Iw) >> IW_CUSTOM_READRA_LSB) & IW_CUSTOM_READRA_UNSHIFTED_MASK)
#define SET_IW_CUSTOM_READRA(Iw, Val) \
    Iw = (((Iw) & (~IW_CUSTOM_READRA_SHIFTED_MASK)) | \
         (((Val) & IW_CUSTOM_READRA_UNSHIFTED_MASK) << IW_CUSTOM_READRA_LSB))
#define IW_CUSTOM_READRB_LSB 15
#define IW_CUSTOM_READRB_MSB 15
#define IW_CUSTOM_READRB_SZ 1
#define IW_CUSTOM_READRB_UNSHIFTED_MASK 0x1
#define IW_CUSTOM_READRB_SHIFTED_MASK 0x8000
#define IW_CUSTOM_READRB_MASK (IW_CUSTOM_READRB_UNSHIFTED_MASK)
#define GET_IW_CUSTOM_READRB(Iw) \
    (((Iw) >> IW_CUSTOM_READRB_LSB) & IW_CUSTOM_READRB_UNSHIFTED_MASK)
#define SET_IW_CUSTOM_READRB(Iw, Val) \
    Iw = (((Iw) & (~IW_CUSTOM_READRB_SHIFTED_MASK)) | \
         (((Val) & IW_CUSTOM_READRB_UNSHIFTED_MASK) << IW_CUSTOM_READRB_LSB))
#define IW_CUSTOM_WRITERC_LSB 14
#define IW_CUSTOM_WRITERC_MSB 14
#define IW_CUSTOM_WRITERC_SZ 1
#define IW_CUSTOM_WRITERC_UNSHIFTED_MASK 0x1
#define IW_CUSTOM_WRITERC_SHIFTED_MASK 0x4000
#define IW_CUSTOM_WRITERC_MASK (IW_CUSTOM_WRITERC_UNSHIFTED_MASK)
#define GET_IW_CUSTOM_WRITERC(Iw) \
    (((Iw) >> IW_CUSTOM_WRITERC_LSB) & IW_CUSTOM_WRITERC_UNSHIFTED_MASK)
#define SET_IW_CUSTOM_WRITERC(Iw, Val) \
    Iw = (((Iw) & (~IW_CUSTOM_WRITERC_SHIFTED_MASK)) | \
         (((Val) & IW_CUSTOM_WRITERC_UNSHIFTED_MASK) << IW_CUSTOM_WRITERC_LSB))
#define IW_OPX_LSB 11
#define IW_OPX_MSB 16
#define IW_OPX_SZ 6
#define IW_OPX_UNSHIFTED_MASK 0x3f
#define IW_OPX_SHIFTED_MASK 0x1f800
#define IW_OPX_MASK (IW_OPX_UNSHIFTED_MASK)
#define GET_IW_OPX(Iw) \
    (((Iw) >> IW_OPX_LSB) & IW_OPX_UNSHIFTED_MASK)
#define SET_IW_OPX(Iw, Val) \
    Iw = (((Iw) & (~IW_OPX_SHIFTED_MASK)) | \
         (((Val) & IW_OPX_UNSHIFTED_MASK) << IW_OPX_LSB))
#define IW_OP_LSB 0
#define IW_OP_MSB 5
#define IW_OP_SZ 6
#define IW_OP_UNSHIFTED_MASK 0x3f
#define IW_OP_SHIFTED_MASK 0x3f
#define IW_OP_MASK (IW_OP_UNSHIFTED_MASK)
#define GET_IW_OP(Iw) \
    (((Iw) >> IW_OP_LSB) & IW_OP_UNSHIFTED_MASK)
#define SET_IW_OP(Iw, Val) \
    Iw = (((Iw) & (~IW_OP_SHIFTED_MASK)) | \
         (((Val) & IW_OP_UNSHIFTED_MASK) << IW_OP_LSB))
#define IW_SHIFT_IMM5_LSB 6
#define IW_SHIFT_IMM5_MSB 10
#define IW_SHIFT_IMM5_SZ 5
#define IW_SHIFT_IMM5_UNSHIFTED_MASK 0x1f
#define IW_SHIFT_IMM5_SHIFTED_MASK 0x7c0
#define IW_SHIFT_IMM5_MASK (IW_SHIFT_IMM5_UNSHIFTED_MASK)
#define GET_IW_SHIFT_IMM5(Iw) \
    (((Iw) >> IW_SHIFT_IMM5_LSB) & IW_SHIFT_IMM5_UNSHIFTED_MASK)
#define SET_IW_SHIFT_IMM5(Iw, Val) \
    Iw = (((Iw) & (~IW_SHIFT_IMM5_SHIFTED_MASK)) | \
         (((Val) & IW_SHIFT_IMM5_UNSHIFTED_MASK) << IW_SHIFT_IMM5_LSB))
#define IW_TRAP_BREAK_IMM5_LSB 6
#define IW_TRAP_BREAK_IMM5_MSB 10
#define IW_TRAP_BREAK_IMM5_SZ 5
#define IW_TRAP_BREAK_IMM5_UNSHIFTED_MASK 0x1f
#define IW_TRAP_BREAK_IMM5_SHIFTED_MASK 0x7c0
#define IW_TRAP_BREAK_IMM5_MASK (IW_TRAP_BREAK_IMM5_UNSHIFTED_MASK)
#define GET_IW_TRAP_BREAK_IMM5(Iw) \
    (((Iw) >> IW_TRAP_BREAK_IMM5_LSB) & IW_TRAP_BREAK_IMM5_UNSHIFTED_MASK)
#define SET_IW_TRAP_BREAK_IMM5(Iw, Val) \
    Iw = (((Iw) & (~IW_TRAP_BREAK_IMM5_SHIFTED_MASK)) | \
         (((Val) & IW_TRAP_BREAK_IMM5_UNSHIFTED_MASK) << IW_TRAP_BREAK_IMM5_LSB))
#define IW_IMM5_LSB 6
#define IW_IMM5_MSB 10
#define IW_IMM5_SZ 5
#define IW_IMM5_UNSHIFTED_MASK 0x1f
#define IW_IMM5_SHIFTED_MASK 0x7c0
#define IW_IMM5_MASK (IW_IMM5_UNSHIFTED_MASK)
#define GET_IW_IMM5(Iw) \
    (((Iw) >> IW_IMM5_LSB) & IW_IMM5_UNSHIFTED_MASK)
#define SET_IW_IMM5(Iw, Val) \
    Iw = (((Iw) & (~IW_IMM5_SHIFTED_MASK)) | \
         (((Val) & IW_IMM5_UNSHIFTED_MASK) << IW_IMM5_LSB))
#define IW_IMM16_LSB 6
#define IW_IMM16_MSB 21
#define IW_IMM16_SZ 16
#define IW_IMM16_UNSHIFTED_MASK 0xffff
#define IW_IMM16_SHIFTED_MASK 0x3fffc0
#define IW_IMM16_MASK (IW_IMM16_UNSHIFTED_MASK)
#define GET_IW_IMM16(Iw) \
    (((Iw) >> IW_IMM16_LSB) & IW_IMM16_UNSHIFTED_MASK)
#define SET_IW_IMM16(Iw, Val) \
    Iw = (((Iw) & (~IW_IMM16_SHIFTED_MASK)) | \
         (((Val) & IW_IMM16_UNSHIFTED_MASK) << IW_IMM16_LSB))
#define IW_IMM26_LSB 6
#define IW_IMM26_MSB 31
#define IW_IMM26_SZ 26
#define IW_IMM26_UNSHIFTED_MASK 0x3ffffff
#define IW_IMM26_SHIFTED_MASK 0xffffffc0
#define IW_IMM26_MASK (IW_IMM26_UNSHIFTED_MASK)
#define GET_IW_IMM26(Iw) \
    (((Iw) >> IW_IMM26_LSB) & IW_IMM26_UNSHIFTED_MASK)
#define SET_IW_IMM26(Iw, Val) \
    Iw = (((Iw) & (~IW_IMM26_SHIFTED_MASK)) | \
         (((Val) & IW_IMM26_UNSHIFTED_MASK) << IW_IMM26_LSB))
#define IW_MEMSZ_LSB 3
#define IW_MEMSZ_MSB 4
#define IW_MEMSZ_SZ 2
#define IW_MEMSZ_UNSHIFTED_MASK 0x3
#define IW_MEMSZ_SHIFTED_MASK 0x18
#define IW_MEMSZ_MASK (IW_MEMSZ_UNSHIFTED_MASK)
#define GET_IW_MEMSZ(Iw) \
    (((Iw) >> IW_MEMSZ_LSB) & IW_MEMSZ_UNSHIFTED_MASK)
#define SET_IW_MEMSZ(Iw, Val) \
    Iw = (((Iw) & (~IW_MEMSZ_SHIFTED_MASK)) | \
         (((Val) & IW_MEMSZ_UNSHIFTED_MASK) << IW_MEMSZ_LSB))
#define IW_CONTROL_REGNUM_LSB 6
#define IW_CONTROL_REGNUM_MSB 10
#define IW_CONTROL_REGNUM_SZ 5
#define IW_CONTROL_REGNUM_UNSHIFTED_MASK 0x1f
#define IW_CONTROL_REGNUM_SHIFTED_MASK 0x7c0
#define IW_CONTROL_REGNUM_MASK (IW_CONTROL_REGNUM_UNSHIFTED_MASK)
#define GET_IW_CONTROL_REGNUM(Iw) \
    (((Iw) >> IW_CONTROL_REGNUM_LSB) & IW_CONTROL_REGNUM_UNSHIFTED_MASK)
#define SET_IW_CONTROL_REGNUM(Iw, Val) \
    Iw = (((Iw) & (~IW_CONTROL_REGNUM_SHIFTED_MASK)) | \
         (((Val) & IW_CONTROL_REGNUM_UNSHIFTED_MASK) << IW_CONTROL_REGNUM_LSB))

/*
 * Instruction property macros
 */
#define IW_PROP_UNIMP_TRAP(Iw) (0)

#define IW_PROP_UNIMP_NOP(Iw) (0)

#define IW_PROP_ILLEGAL(Iw) (0)

#define IW_PROP_RESERVED(Iw) (0)

#define IW_PROP_CUSTOM(Iw) (0)

#define IW_PROP_CUSTOM_COMBO(Iw) (0)

#define IW_PROP_CUSTOM_MULTI(Iw) (0)

#define IW_PROP_SUPERVISOR_ONLY(Iw) ( \
    (op_prop_supervisor_only[GET_IW_OP(Iw)] || \
    (IS_OPX_INST(Iw) && opx_prop_supervisor_only[GET_IW_OPX(Iw)])))

#ifndef ALT_ASM_SRC
extern unsigned char op_prop_supervisor_only[64];
#endif /* ALT_ASM_SRC */

#ifndef ALT_ASM_SRC
extern unsigned char opx_prop_supervisor_only[64];
#endif /* ALT_ASM_SRC */

#define IW_PROP_IC_INDEX_INV(Iw) ( \
  ( \
    ((GET_IW_OPX((Iw)) == OPX_INITI) && IS_OPX_INST(Iw)) || \
    ((GET_IW_OPX((Iw)) == OPX_FLUSHI) && IS_OPX_INST(Iw)) \
  ) \
 \
)

#define IW_PROP_INVALIDATE_I(Iw) ( \
  ( \
    ((GET_IW_OPX((Iw)) == OPX_INITI) && IS_OPX_INST(Iw)) || \
    ((GET_IW_OPX((Iw)) == OPX_FLUSHI) && IS_OPX_INST(Iw)) \
  ) \
 \
)

#define IW_PROP_FLUSH_PIPE(Iw) ( \
    (IS_OPX_INST(Iw) && opx_prop_flush_pipe[GET_IW_OPX(Iw)]))

#ifndef ALT_ASM_SRC
extern unsigned char opx_prop_flush_pipe[64];
#endif /* ALT_ASM_SRC */

#define IW_PROP_JMP_INDIRECT_NON_TRAP(Iw) ( \
    (IS_OPX_INST(Iw) && opx_prop_jmp_indirect_non_trap[GET_IW_OPX(Iw)]))

#ifndef ALT_ASM_SRC
extern unsigned char opx_prop_jmp_indirect_non_trap[64];
#endif /* ALT_ASM_SRC */

#define IW_PROP_JMP_INDIRECT(Iw) ( \
    (IS_OPX_INST(Iw) && opx_prop_jmp_indirect[GET_IW_OPX(Iw)]))

#ifndef ALT_ASM_SRC
extern unsigned char opx_prop_jmp_indirect[64];
#endif /* ALT_ASM_SRC */

#define IW_PROP_JMP_DIRECT(Iw) ( \
  ( \
    ((GET_IW_OP((Iw)) == OP_CALL)) || \
    ((GET_IW_OP((Iw)) == OP_JMPI)) \
  ) \
 \
)

#define IW_PROP_MUL_LSW(Iw) ( \
  ( \
    ((GET_IW_OP((Iw)) == OP_MULI)) || \
    ((GET_IW_OPX((Iw)) == OPX_MUL) && IS_OPX_INST(Iw)) \
  ) \
 \
)

#define IW_PROP_MULX(Iw) ( \
    (IS_OPX_INST(Iw) && opx_prop_mulx[GET_IW_OPX(Iw)]))

#ifndef ALT_ASM_SRC
extern unsigned char opx_prop_mulx[64];
#endif /* ALT_ASM_SRC */

#define IW_PROP_MUL(Iw) ( \
    (op_prop_mul[GET_IW_OP(Iw)] || \
    (IS_OPX_INST(Iw) && opx_prop_mul[GET_IW_OPX(Iw)])))

#ifndef ALT_ASM_SRC
extern unsigned char op_prop_mul[64];
#endif /* ALT_ASM_SRC */

#ifndef ALT_ASM_SRC
extern unsigned char opx_prop_mul[64];
#endif /* ALT_ASM_SRC */

#define IW_PROP_DIV_UNSIGNED(Iw) ( \
  ( \
    ((GET_IW_OPX((Iw)) == OPX_DIVU) && IS_OPX_INST(Iw)) \
  ) \
 \
)

#define IW_PROP_DIV_SIGNED(Iw) ( \
  ( \
    ((GET_IW_OPX((Iw)) == OPX_DIV) && IS_OPX_INST(Iw)) \
  ) \
 \
)

#define IW_PROP_DIV(Iw) ( \
  ( \
    ((GET_IW_OPX((Iw)) == OPX_DIVU) && IS_OPX_INST(Iw)) || \
    ((GET_IW_OPX((Iw)) == OPX_DIV) && IS_OPX_INST(Iw)) \
  ) \
 \
)

#define IW_PROP_IMPLICIT_DST_RETADDR(Iw) ( \
  ( \
    ((GET_IW_OP((Iw)) == OP_CALL)) \
  ) \
 \
)

#define IW_PROP_IMPLICIT_DST_ERETADDR(Iw) (0)

#define IW_PROP_INTR(Iw) ( \
  ( \
    ((GET_IW_OPX((Iw)) == OPX_INTR) && IS_OPX_INST(Iw)) \
  ) \
 \
)

#define IW_PROP_EXCEPTION(Iw) ( \
  ( \
    ((GET_IW_OPX((Iw)) == OPX_TRAP) && IS_OPX_INST(Iw)) || \
    ((GET_IW_OPX((Iw)) == OPX_INTR) && IS_OPX_INST(Iw)) \
  ) \
 \
)

#define IW_PROP_BREAK(Iw) ( \
  ( \
    ((GET_IW_OPX((Iw)) == OPX_BREAK) && IS_OPX_INST(Iw)) \
  ) \
 \
)

#define IW_PROP_CRST(Iw) (0)

#define IW_PROP_WR_CTL_REG(Iw) ( \
    (IS_OPX_INST(Iw) && opx_prop_wr_ctl_reg[GET_IW_OPX(Iw)]))

#ifndef ALT_ASM_SRC
extern unsigned char opx_prop_wr_ctl_reg[64];
#endif /* ALT_ASM_SRC */

#define IW_PROP_UNCOND_CTI_NON_BR(Iw) ( \
    (op_prop_uncond_cti_non_br[GET_IW_OP(Iw)] || \
    (IS_OPX_INST(Iw) && opx_prop_uncond_cti_non_br[GET_IW_OPX(Iw)])))

#ifndef ALT_ASM_SRC
extern unsigned char op_prop_uncond_cti_non_br[64];
#endif /* ALT_ASM_SRC */

#ifndef ALT_ASM_SRC
extern unsigned char opx_prop_uncond_cti_non_br[64];
#endif /* ALT_ASM_SRC */

#define IW_PROP_RETADDR(Iw) ( \
    (op_prop_retaddr[GET_IW_OP(Iw)] || \
    (IS_OPX_INST(Iw) && opx_prop_retaddr[GET_IW_OPX(Iw)])))

#ifndef ALT_ASM_SRC
extern unsigned char op_prop_retaddr[64];
#endif /* ALT_ASM_SRC */

#ifndef ALT_ASM_SRC
extern unsigned char opx_prop_retaddr[64];
#endif /* ALT_ASM_SRC */

#define IW_PROP_SHIFT_LEFT(Iw) ( \
  ( \
    ((GET_IW_OPX((Iw)) == OPX_SLLI) && IS_OPX_INST(Iw)) || \
    ((GET_IW_OPX((Iw)) == OPX_SLL) && IS_OPX_INST(Iw)) \
  ) \
 \
)

#define IW_PROP_SHIFT_LOGICAL(Iw) ( \
    (IS_OPX_INST(Iw) && opx_prop_shift_logical[GET_IW_OPX(Iw)]))

#ifndef ALT_ASM_SRC
extern unsigned char opx_prop_shift_logical[64];
#endif /* ALT_ASM_SRC */

#define IW_PROP_ROT_LEFT(Iw) ( \
  ( \
    ((GET_IW_OPX((Iw)) == OPX_ROLI) && IS_OPX_INST(Iw)) || \
    ((GET_IW_OPX((Iw)) == OPX_ROL) && IS_OPX_INST(Iw)) \
  ) \
 \
)

#define IW_PROP_SHIFT_ROT_LEFT(Iw) ( \
    (IS_OPX_INST(Iw) && opx_prop_shift_rot_left[GET_IW_OPX(Iw)]))

#ifndef ALT_ASM_SRC
extern unsigned char opx_prop_shift_rot_left[64];
#endif /* ALT_ASM_SRC */

#define IW_PROP_SHIFT_RIGHT_LOGICAL(Iw) ( \
  ( \
    ((GET_IW_OPX((Iw)) == OPX_SRLI) && IS_OPX_INST(Iw)) || \
    ((GET_IW_OPX((Iw)) == OPX_SRL) && IS_OPX_INST(Iw)) \
  ) \
 \
)

#define IW_PROP_SHIFT_RIGHT_ARITH(Iw) ( \
  ( \
    ((GET_IW_OPX((Iw)) == OPX_SRAI) && IS_OPX_INST(Iw)) || \
    ((GET_IW_OPX((Iw)) == OPX_SRA) && IS_OPX_INST(Iw)) \
  ) \
 \
)

#define IW_PROP_SHIFT_RIGHT(Iw) ( \
    (IS_OPX_INST(Iw) && opx_prop_shift_right[GET_IW_OPX(Iw)]))

#ifndef ALT_ASM_SRC
extern unsigned char opx_prop_shift_right[64];
#endif /* ALT_ASM_SRC */

#define IW_PROP_ROT_RIGHT(Iw) ( \
  ( \
    ((GET_IW_OPX((Iw)) == OPX_ROR) && IS_OPX_INST(Iw)) \
  ) \
 \
)

#define IW_PROP_SHIFT_ROT_RIGHT(Iw) ( \
    (IS_OPX_INST(Iw) && opx_prop_shift_rot_right[GET_IW_OPX(Iw)]))

#ifndef ALT_ASM_SRC
extern unsigned char opx_prop_shift_rot_right[64];
#endif /* ALT_ASM_SRC */

#define IW_PROP_SHIFT_ROT(Iw) ( \
    (IS_OPX_INST(Iw) && opx_prop_shift_rot[GET_IW_OPX(Iw)]))

#ifndef ALT_ASM_SRC
extern unsigned char opx_prop_shift_rot[64];
#endif /* ALT_ASM_SRC */

#define IW_PROP_SHIFT_ROT_IMM(Iw) ( \
    (IS_OPX_INST(Iw) && opx_prop_shift_rot_imm[GET_IW_OPX(Iw)]))

#ifndef ALT_ASM_SRC
extern unsigned char opx_prop_shift_rot_imm[64];
#endif /* ALT_ASM_SRC */

#define IW_PROP_ROT(Iw) ( \
    (IS_OPX_INST(Iw) && opx_prop_rot[GET_IW_OPX(Iw)]))

#ifndef ALT_ASM_SRC
extern unsigned char opx_prop_rot[64];
#endif /* ALT_ASM_SRC */

#define IW_PROP_LOGIC_REG(Iw) ( \
    (IS_OPX_INST(Iw) && opx_prop_logic_reg[GET_IW_OPX(Iw)]))

#ifndef ALT_ASM_SRC
extern unsigned char opx_prop_logic_reg[64];
#endif /* ALT_ASM_SRC */

#define IW_PROP_LOGIC_HI_IMM16(Iw) ( \
    (op_prop_logic_hi_imm16[GET_IW_OP(Iw)]))

#ifndef ALT_ASM_SRC
extern unsigned char op_prop_logic_hi_imm16[64];
#endif /* ALT_ASM_SRC */

#define IW_PROP_LOGIC_LO_IMM16(Iw) ( \
    (op_prop_logic_lo_imm16[GET_IW_OP(Iw)]))

#ifndef ALT_ASM_SRC
extern unsigned char op_prop_logic_lo_imm16[64];
#endif /* ALT_ASM_SRC */

#define IW_PROP_LOGIC_IMM16(Iw) ( \
    (op_prop_logic_imm16[GET_IW_OP(Iw)]))

#ifndef ALT_ASM_SRC
extern unsigned char op_prop_logic_imm16[64];
#endif /* ALT_ASM_SRC */

#define IW_PROP_LOGIC(Iw) ( \
    (op_prop_logic[GET_IW_OP(Iw)] || \
    (IS_OPX_INST(Iw) && opx_prop_logic[GET_IW_OPX(Iw)])))

#ifndef ALT_ASM_SRC
extern unsigned char op_prop_logic[64];
#endif /* ALT_ASM_SRC */

#ifndef ALT_ASM_SRC
extern unsigned char opx_prop_logic[64];
#endif /* ALT_ASM_SRC */

#define IW_PROP_HI_IMM16(Iw) ( \
    (op_prop_hi_imm16[GET_IW_OP(Iw)]))

#ifndef ALT_ASM_SRC
extern unsigned char op_prop_hi_imm16[64];
#endif /* ALT_ASM_SRC */

#define IW_PROP_UNSIGNED_LO_IMM16(Iw) ( \
    (op_prop_unsigned_lo_imm16[GET_IW_OP(Iw)] || \
    (IS_OPX_INST(Iw) && opx_prop_unsigned_lo_imm16[GET_IW_OPX(Iw)])))

#ifndef ALT_ASM_SRC
extern unsigned char op_prop_unsigned_lo_imm16[64];
#endif /* ALT_ASM_SRC */

#ifndef ALT_ASM_SRC
extern unsigned char opx_prop_unsigned_lo_imm16[64];
#endif /* ALT_ASM_SRC */

#define IW_PROP_ARITH_IMM16(Iw) ( \
  ( \
    ((GET_IW_OP((Iw)) == OP_ADDI)) || \
    ((GET_IW_OP((Iw)) == OP_MULI)) \
  ) \
 \
)

#define IW_PROP_CMP_IMM16(Iw) ( \
    (op_prop_cmp_imm16[GET_IW_OP(Iw)]))

#ifndef ALT_ASM_SRC
extern unsigned char op_prop_cmp_imm16[64];
#endif /* ALT_ASM_SRC */

#define IW_PROP_JMPI(Iw) ( \
  ( \
    ((GET_IW_OP((Iw)) == OP_JMPI)) \
  ) \
 \
)

#define IW_PROP_CMP_IMM16_WITH_CALL_JMPI_RDPRS(Iw) ( \
    (op_prop_cmp_imm16_with_call_jmpi_rdprs[GET_IW_OP(Iw)]))

#ifndef ALT_ASM_SRC
extern unsigned char op_prop_cmp_imm16_with_call_jmpi_rdprs[64];
#endif /* ALT_ASM_SRC */

#define IW_PROP_CMP_REG(Iw) ( \
    (IS_OPX_INST(Iw) && opx_prop_cmp_reg[GET_IW_OPX(Iw)]))

#ifndef ALT_ASM_SRC
extern unsigned char opx_prop_cmp_reg[64];
#endif /* ALT_ASM_SRC */

#define IW_PROP_SRC_IMM5(Iw) ( \
    (IS_OPX_INST(Iw) && opx_prop_src_imm5[GET_IW_OPX(Iw)]))

#ifndef ALT_ASM_SRC
extern unsigned char opx_prop_src_imm5[64];
#endif /* ALT_ASM_SRC */

#define IW_PROP_CMP_WITH_LT(Iw) ( \
    (op_prop_cmp_with_lt[GET_IW_OP(Iw)] || \
    (IS_OPX_INST(Iw) && opx_prop_cmp_with_lt[GET_IW_OPX(Iw)])))

#ifndef ALT_ASM_SRC
extern unsigned char op_prop_cmp_with_lt[64];
#endif /* ALT_ASM_SRC */

#ifndef ALT_ASM_SRC
extern unsigned char opx_prop_cmp_with_lt[64];
#endif /* ALT_ASM_SRC */

#define IW_PROP_CMP_WITH_EQ(Iw) ( \
    (op_prop_cmp_with_eq[GET_IW_OP(Iw)] || \
    (IS_OPX_INST(Iw) && opx_prop_cmp_with_eq[GET_IW_OPX(Iw)])))

#ifndef ALT_ASM_SRC
extern unsigned char op_prop_cmp_with_eq[64];
#endif /* ALT_ASM_SRC */

#ifndef ALT_ASM_SRC
extern unsigned char opx_prop_cmp_with_eq[64];
#endif /* ALT_ASM_SRC */

#define IW_PROP_CMP_WITH_GE(Iw) ( \
    (op_prop_cmp_with_ge[GET_IW_OP(Iw)] || \
    (IS_OPX_INST(Iw) && opx_prop_cmp_with_ge[GET_IW_OPX(Iw)])))

#ifndef ALT_ASM_SRC
extern unsigned char op_prop_cmp_with_ge[64];
#endif /* ALT_ASM_SRC */

#ifndef ALT_ASM_SRC
extern unsigned char opx_prop_cmp_with_ge[64];
#endif /* ALT_ASM_SRC */

#define IW_PROP_CMP_WITH_NE(Iw) ( \
  ( \
    ((GET_IW_OP((Iw)) == OP_CMPNEI)) || \
    ((GET_IW_OPX((Iw)) == OPX_CMPNE) && IS_OPX_INST(Iw)) \
  ) \
 \
)

#define IW_PROP_CMP_ALU_SIGNED(Iw) ( \
    (op_prop_cmp_alu_signed[GET_IW_OP(Iw)] || \
    (IS_OPX_INST(Iw) && opx_prop_cmp_alu_signed[GET_IW_OPX(Iw)])))

#ifndef ALT_ASM_SRC
extern unsigned char op_prop_cmp_alu_signed[64];
#endif /* ALT_ASM_SRC */

#ifndef ALT_ASM_SRC
extern unsigned char opx_prop_cmp_alu_signed[64];
#endif /* ALT_ASM_SRC */

#define IW_PROP_CMP(Iw) ( \
    (op_prop_cmp[GET_IW_OP(Iw)] || \
    (IS_OPX_INST(Iw) && opx_prop_cmp[GET_IW_OPX(Iw)])))

#ifndef ALT_ASM_SRC
extern unsigned char op_prop_cmp[64];
#endif /* ALT_ASM_SRC */

#ifndef ALT_ASM_SRC
extern unsigned char opx_prop_cmp[64];
#endif /* ALT_ASM_SRC */

#define IW_PROP_BR_WITH_LT(Iw) ( \
  ( \
    ((GET_IW_OP((Iw)) == OP_BLT)) || \
    ((GET_IW_OP((Iw)) == OP_BLTU)) \
  ) \
 \
)

#define IW_PROP_BR_WITH_GE(Iw) ( \
  ( \
    ((GET_IW_OP((Iw)) == OP_BGE)) || \
    ((GET_IW_OP((Iw)) == OP_BGEU)) \
  ) \
 \
)

#define IW_PROP_BR_WITH_EQ(Iw) ( \
    (op_prop_br_with_eq[GET_IW_OP(Iw)]))

#ifndef ALT_ASM_SRC
extern unsigned char op_prop_br_with_eq[64];
#endif /* ALT_ASM_SRC */

#define IW_PROP_BR_WITH_NE(Iw) ( \
  ( \
    ((GET_IW_OP((Iw)) == OP_BNE)) \
  ) \
 \
)

#define IW_PROP_BR_ALU_SIGNED(Iw) ( \
  ( \
    ((GET_IW_OP((Iw)) == OP_BGE)) || \
    ((GET_IW_OP((Iw)) == OP_BLT)) \
  ) \
 \
)

#define IW_PROP_BR_COND(Iw) ( \
    (op_prop_br_cond[GET_IW_OP(Iw)]))

#ifndef ALT_ASM_SRC
extern unsigned char op_prop_br_cond[64];
#endif /* ALT_ASM_SRC */

#define IW_PROP_BR_UNCOND(Iw) ( \
  ( \
    ((GET_IW_OP((Iw)) == OP_BR)) \
  ) \
 \
)

#define IW_PROP_BR_ALWAYS_PRED_TAKEN(Iw) (0)

#define IW_PROP_BR(Iw) ( \
    (op_prop_br[GET_IW_OP(Iw)]))

#ifndef ALT_ASM_SRC
extern unsigned char op_prop_br[64];
#endif /* ALT_ASM_SRC */

#define IW_PROP_ALU_SUBTRACT(Iw) ( \
    (op_prop_alu_subtract[GET_IW_OP(Iw)] || \
    (IS_OPX_INST(Iw) && opx_prop_alu_subtract[GET_IW_OPX(Iw)])))

#ifndef ALT_ASM_SRC
extern unsigned char op_prop_alu_subtract[64];
#endif /* ALT_ASM_SRC */

#ifndef ALT_ASM_SRC
extern unsigned char opx_prop_alu_subtract[64];
#endif /* ALT_ASM_SRC */

#define IW_PROP_ALU_SIGNED_COMPARISON(Iw) ( \
    (op_prop_alu_signed_comparison[GET_IW_OP(Iw)] || \
    (IS_OPX_INST(Iw) && opx_prop_alu_signed_comparison[GET_IW_OPX(Iw)])))

#ifndef ALT_ASM_SRC
extern unsigned char op_prop_alu_signed_comparison[64];
#endif /* ALT_ASM_SRC */

#ifndef ALT_ASM_SRC
extern unsigned char opx_prop_alu_signed_comparison[64];
#endif /* ALT_ASM_SRC */

#define IW_PROP_BR_CMP(Iw) ( \
    (op_prop_br_cmp[GET_IW_OP(Iw)] || \
    (IS_OPX_INST(Iw) && opx_prop_br_cmp[GET_IW_OPX(Iw)])))

#ifndef ALT_ASM_SRC
extern unsigned char op_prop_br_cmp[64];
#endif /* ALT_ASM_SRC */

#ifndef ALT_ASM_SRC
extern unsigned char opx_prop_br_cmp[64];
#endif /* ALT_ASM_SRC */

#define IW_PROP_BR_CMP_EQ_NE(Iw) ( \
    (op_prop_br_cmp_eq_ne[GET_IW_OP(Iw)] || \
    (IS_OPX_INST(Iw) && opx_prop_br_cmp_eq_ne[GET_IW_OPX(Iw)])))

#ifndef ALT_ASM_SRC
extern unsigned char op_prop_br_cmp_eq_ne[64];
#endif /* ALT_ASM_SRC */

#ifndef ALT_ASM_SRC
extern unsigned char opx_prop_br_cmp_eq_ne[64];
#endif /* ALT_ASM_SRC */

#define IW_PROP_LD8(Iw) ( \
    (op_prop_ld8[GET_IW_OP(Iw)]))

#ifndef ALT_ASM_SRC
extern unsigned char op_prop_ld8[64];
#endif /* ALT_ASM_SRC */

#define IW_PROP_LD16(Iw) ( \
    (op_prop_ld16[GET_IW_OP(Iw)]))

#ifndef ALT_ASM_SRC
extern unsigned char op_prop_ld16[64];
#endif /* ALT_ASM_SRC */

#define IW_PROP_LD8_LD16(Iw) ( \
    (op_prop_ld8_ld16[GET_IW_OP(Iw)]))

#ifndef ALT_ASM_SRC
extern unsigned char op_prop_ld8_ld16[64];
#endif /* ALT_ASM_SRC */

#define IW_PROP_LD32(Iw) ( \
  ( \
    ((GET_IW_OP((Iw)) == OP_LDW)) || \
    ((GET_IW_OP((Iw)) == OP_LDWIO)) \
  ) \
 \
)

#define IW_PROP_LD_SIGNED(Iw) ( \
    (op_prop_ld_signed[GET_IW_OP(Iw)]))

#ifndef ALT_ASM_SRC
extern unsigned char op_prop_ld_signed[64];
#endif /* ALT_ASM_SRC */

#define IW_PROP_LD_UNSIGNED(Iw) ( \
    (op_prop_ld_unsigned[GET_IW_OP(Iw)]))

#ifndef ALT_ASM_SRC
extern unsigned char op_prop_ld_unsigned[64];
#endif /* ALT_ASM_SRC */

#define IW_PROP_LD(Iw) ( \
    (op_prop_ld[GET_IW_OP(Iw)]))

#ifndef ALT_ASM_SRC
extern unsigned char op_prop_ld[64];
#endif /* ALT_ASM_SRC */

#define IW_PROP_DCACHE_MANAGEMENT_NOP(Iw) ( \
    (op_prop_dcache_management_nop[GET_IW_OP(Iw)]))

#ifndef ALT_ASM_SRC
extern unsigned char op_prop_dcache_management_nop[64];
#endif /* ALT_ASM_SRC */

#define IW_PROP_LD_DCACHE_MANAGEMENT(Iw) ( \
    (op_prop_ld_dcache_management[GET_IW_OP(Iw)]))

#ifndef ALT_ASM_SRC
extern unsigned char op_prop_ld_dcache_management[64];
#endif /* ALT_ASM_SRC */

#define IW_PROP_LD_NON_IO(Iw) ( \
    (op_prop_ld_non_io[GET_IW_OP(Iw)]))

#ifndef ALT_ASM_SRC
extern unsigned char op_prop_ld_non_io[64];
#endif /* ALT_ASM_SRC */

#define IW_PROP_ST8(Iw) ( \
  ( \
    ((GET_IW_OP((Iw)) == OP_STB)) || \
    ((GET_IW_OP((Iw)) == OP_STBIO)) \
  ) \
 \
)

#define IW_PROP_ST16(Iw) ( \
  ( \
    ((GET_IW_OP((Iw)) == OP_STH)) || \
    ((GET_IW_OP((Iw)) == OP_STHIO)) \
  ) \
 \
)

#define IW_PROP_ST32(Iw) ( \
  ( \
    ((GET_IW_OP((Iw)) == OP_STW)) || \
    ((GET_IW_OP((Iw)) == OP_STWIO)) \
  ) \
 \
)

#define IW_PROP_ST(Iw) ( \
    (op_prop_st[GET_IW_OP(Iw)]))

#ifndef ALT_ASM_SRC
extern unsigned char op_prop_st[64];
#endif /* ALT_ASM_SRC */

#define IW_PROP_ST_NON_IO(Iw) ( \
    (op_prop_st_non_io[GET_IW_OP(Iw)]))

#ifndef ALT_ASM_SRC
extern unsigned char op_prop_st_non_io[64];
#endif /* ALT_ASM_SRC */

#define IW_PROP_LD_ST(Iw) ( \
    (op_prop_ld_st[GET_IW_OP(Iw)]))

#ifndef ALT_ASM_SRC
extern unsigned char op_prop_ld_st[64];
#endif /* ALT_ASM_SRC */

#define IW_PROP_LD_ST_IO(Iw) ( \
    (op_prop_ld_st_io[GET_IW_OP(Iw)]))

#ifndef ALT_ASM_SRC
extern unsigned char op_prop_ld_st_io[64];
#endif /* ALT_ASM_SRC */

#define IW_PROP_LD_ST_NON_IO(Iw) ( \
    (op_prop_ld_st_non_io[GET_IW_OP(Iw)]))

#ifndef ALT_ASM_SRC
extern unsigned char op_prop_ld_st_non_io[64];
#endif /* ALT_ASM_SRC */

#define IW_PROP_LD_ST_NON_IO_NON_ST32(Iw) ( \
    (op_prop_ld_st_non_io_non_st32[GET_IW_OP(Iw)]))

#ifndef ALT_ASM_SRC
extern unsigned char op_prop_ld_st_non_io_non_st32[64];
#endif /* ALT_ASM_SRC */

#define IW_PROP_LD_ST_NON_ST32(Iw) ( \
    (op_prop_ld_st_non_st32[GET_IW_OP(Iw)]))

#ifndef ALT_ASM_SRC
extern unsigned char op_prop_ld_st_non_st32[64];
#endif /* ALT_ASM_SRC */

#define IW_PROP_MEM(Iw) ( \
    (op_prop_mem[GET_IW_OP(Iw)]))

#ifndef ALT_ASM_SRC
extern unsigned char op_prop_mem[64];
#endif /* ALT_ASM_SRC */

#define IW_PROP_MEM_DATA_ACCESS(Iw) ( \
    (op_prop_mem_data_access[GET_IW_OP(Iw)]))

#ifndef ALT_ASM_SRC
extern unsigned char op_prop_mem_data_access[64];
#endif /* ALT_ASM_SRC */

#define IW_PROP_MEM8(Iw) ( \
    (op_prop_mem8[GET_IW_OP(Iw)]))

#ifndef ALT_ASM_SRC
extern unsigned char op_prop_mem8[64];
#endif /* ALT_ASM_SRC */

#define IW_PROP_MEM16(Iw) ( \
    (op_prop_mem16[GET_IW_OP(Iw)]))

#ifndef ALT_ASM_SRC
extern unsigned char op_prop_mem16[64];
#endif /* ALT_ASM_SRC */

#define IW_PROP_MEM32(Iw) ( \
    (op_prop_mem32[GET_IW_OP(Iw)]))

#ifndef ALT_ASM_SRC
extern unsigned char op_prop_mem32[64];
#endif /* ALT_ASM_SRC */

#define IW_PROP_DC_INDEX_NOWB_INV(Iw) ( \
  ( \
    ((GET_IW_OP((Iw)) == OP_INITD)) \
  ) \
 \
)

#define IW_PROP_DC_ADDR_NOWB_INV(Iw) ( \
  ( \
    ((GET_IW_OP((Iw)) == OP_INITDA)) \
  ) \
 \
)

#define IW_PROP_DC_INDEX_WB_INV(Iw) ( \
  ( \
    ((GET_IW_OP((Iw)) == OP_FLUSHD)) \
  ) \
 \
)

#define IW_PROP_DC_ADDR_WB_INV(Iw) ( \
  ( \
    ((GET_IW_OP((Iw)) == OP_FLUSHDA)) \
  ) \
 \
)

#define IW_PROP_DC_INDEX_INV(Iw) ( \
  ( \
    ((GET_IW_OP((Iw)) == OP_INITD)) || \
    ((GET_IW_OP((Iw)) == OP_FLUSHD)) \
  ) \
 \
)

#define IW_PROP_DC_ADDR_INV(Iw) ( \
  ( \
    ((GET_IW_OP((Iw)) == OP_INITDA)) || \
    ((GET_IW_OP((Iw)) == OP_FLUSHDA)) \
  ) \
 \
)

#define IW_PROP_DC_WB_INV(Iw) ( \
  ( \
    ((GET_IW_OP((Iw)) == OP_FLUSHD)) || \
    ((GET_IW_OP((Iw)) == OP_FLUSHDA)) \
  ) \
 \
)

#define IW_PROP_DC_NOWB_INV(Iw) ( \
  ( \
    ((GET_IW_OP((Iw)) == OP_INITD)) || \
    ((GET_IW_OP((Iw)) == OP_INITDA)) \
  ) \
 \
)

#define IW_PROP_DCACHE_MANAGEMENT(Iw) ( \
    (op_prop_dcache_management[GET_IW_OP(Iw)]))

#ifndef ALT_ASM_SRC
extern unsigned char op_prop_dcache_management[64];
#endif /* ALT_ASM_SRC */

#define IW_PROP_LD_IO(Iw) ( \
    (op_prop_ld_io[GET_IW_OP(Iw)]))

#ifndef ALT_ASM_SRC
extern unsigned char op_prop_ld_io[64];
#endif /* ALT_ASM_SRC */

#define IW_PROP_ST_IO(Iw) ( \
    (op_prop_st_io[GET_IW_OP(Iw)]))

#ifndef ALT_ASM_SRC
extern unsigned char op_prop_st_io[64];
#endif /* ALT_ASM_SRC */

#define IW_PROP_MEM_IO(Iw) ( \
    (op_prop_mem_io[GET_IW_OP(Iw)]))

#ifndef ALT_ASM_SRC
extern unsigned char op_prop_mem_io[64];
#endif /* ALT_ASM_SRC */

#define IW_PROP_A_NOT_SRC(Iw) ( \
  ( \
    ((GET_IW_OP((Iw)) == OP_CALL)) || \
    ((GET_IW_OP((Iw)) == OP_JMPI)) \
  ) \
  || (IS_CUSTOM_INST(Iw) && !GET_IW_CUSTOM_READRA(Iw)) \
)

#define IW_PROP_B_NOT_SRC(Iw) ( \
    (op_prop_b_not_src[GET_IW_OP(Iw)])  || (IS_CUSTOM_INST(Iw) && !GET_IW_CUSTOM_READRB(Iw)))

#ifndef ALT_ASM_SRC
extern unsigned char op_prop_b_not_src[64];
#endif /* ALT_ASM_SRC */

#define IW_PROP_B_IS_DST(Iw) ( \
    (op_prop_b_is_dst[GET_IW_OP(Iw)]))

#ifndef ALT_ASM_SRC
extern unsigned char op_prop_b_is_dst[64];
#endif /* ALT_ASM_SRC */

#define IW_PROP_IGNORE_DST(Iw) ( \
    (op_prop_ignore_dst[GET_IW_OP(Iw)])  || (IS_CUSTOM_INST(Iw) && !GET_IW_CUSTOM_WRITERC(Iw)))

#ifndef ALT_ASM_SRC
extern unsigned char op_prop_ignore_dst[64];
#endif /* ALT_ASM_SRC */

#define IW_PROP_IGNORE_DST_OR_LD(Iw) ( \
    (op_prop_ignore_dst_or_ld[GET_IW_OP(Iw)]))

#ifndef ALT_ASM_SRC
extern unsigned char op_prop_ignore_dst_or_ld[64];
#endif /* ALT_ASM_SRC */

#define IW_PROP_SRC2_CHOOSE_IMM(Iw) ( \
    (op_prop_src2_choose_imm[GET_IW_OP(Iw)] || \
    (IS_OPX_INST(Iw) && opx_prop_src2_choose_imm[GET_IW_OPX(Iw)])))

#ifndef ALT_ASM_SRC
extern unsigned char op_prop_src2_choose_imm[64];
#endif /* ALT_ASM_SRC */

#ifndef ALT_ASM_SRC
extern unsigned char opx_prop_src2_choose_imm[64];
#endif /* ALT_ASM_SRC */

#define IW_PROP_WRCTL_INST(Iw) ( \
  ( \
    ((GET_IW_OPX((Iw)) == OPX_WRCTL) && IS_OPX_INST(Iw)) \
  ) \
 \
)

#define IW_PROP_RDCTL_INST(Iw) ( \
  ( \
    ((GET_IW_OPX((Iw)) == OPX_RDCTL) && IS_OPX_INST(Iw)) \
  ) \
 \
)

#define IW_PROP_RDPRS(Iw) ( \
  ( \
    ((GET_IW_OP((Iw)) == OP_RDPRS)) \
  ) \
 \
)

#define IW_PROP_MUL_SRC1_SIGNED(Iw) ( \
  ( \
    ((GET_IW_OPX((Iw)) == OPX_MULXSS) && IS_OPX_INST(Iw)) || \
    ((GET_IW_OPX((Iw)) == OPX_MULXSU) && IS_OPX_INST(Iw)) \
  ) \
 \
)

#define IW_PROP_MUL_SRC2_SIGNED(Iw) ( \
  ( \
    ((GET_IW_OPX((Iw)) == OPX_MULXSS) && IS_OPX_INST(Iw)) \
  ) \
 \
)

#define IW_PROP_MUL_SHIFT_SRC1_SIGNED(Iw) ( \
    (IS_OPX_INST(Iw) && opx_prop_mul_shift_src1_signed[GET_IW_OPX(Iw)]))

#ifndef ALT_ASM_SRC
extern unsigned char opx_prop_mul_shift_src1_signed[64];
#endif /* ALT_ASM_SRC */

#define IW_PROP_MUL_SHIFT_SRC2_SIGNED(Iw) ( \
  ( \
    ((GET_IW_OPX((Iw)) == OPX_MULXSS) && IS_OPX_INST(Iw)) \
  ) \
 \
)

#define IW_PROP_MUL_SHIFT_ROT(Iw) ( \
    (op_prop_mul_shift_rot[GET_IW_OP(Iw)] || \
    (IS_OPX_INST(Iw) && opx_prop_mul_shift_rot[GET_IW_OPX(Iw)])))

#ifndef ALT_ASM_SRC
extern unsigned char op_prop_mul_shift_rot[64];
#endif /* ALT_ASM_SRC */

#ifndef ALT_ASM_SRC
extern unsigned char opx_prop_mul_shift_rot[64];
#endif /* ALT_ASM_SRC */

#define IW_PROP_DONT_DISPLAY_DST_REG(Iw) ( \
    (op_prop_dont_display_dst_reg[GET_IW_OP(Iw)] || \
    (IS_OPX_INST(Iw) && opx_prop_dont_display_dst_reg[GET_IW_OPX(Iw)])))

#ifndef ALT_ASM_SRC
extern unsigned char op_prop_dont_display_dst_reg[64];
#endif /* ALT_ASM_SRC */

#ifndef ALT_ASM_SRC
extern unsigned char opx_prop_dont_display_dst_reg[64];
#endif /* ALT_ASM_SRC */

#define IW_PROP_DONT_DISPLAY_SRC1_REG(Iw) ( \
    (op_prop_dont_display_src1_reg[GET_IW_OP(Iw)] || \
    (IS_OPX_INST(Iw) && opx_prop_dont_display_src1_reg[GET_IW_OPX(Iw)])))

#ifndef ALT_ASM_SRC
extern unsigned char op_prop_dont_display_src1_reg[64];
#endif /* ALT_ASM_SRC */

#ifndef ALT_ASM_SRC
extern unsigned char opx_prop_dont_display_src1_reg[64];
#endif /* ALT_ASM_SRC */

#define IW_PROP_DONT_DISPLAY_SRC2_REG(Iw) ( \
    (op_prop_dont_display_src2_reg[GET_IW_OP(Iw)] || \
    (IS_OPX_INST(Iw) && opx_prop_dont_display_src2_reg[GET_IW_OPX(Iw)])))

#ifndef ALT_ASM_SRC
extern unsigned char op_prop_dont_display_src2_reg[64];
#endif /* ALT_ASM_SRC */

#ifndef ALT_ASM_SRC
extern unsigned char opx_prop_dont_display_src2_reg[64];
#endif /* ALT_ASM_SRC */

#define IW_PROP_SRC1_NO_X(Iw) ( \
    (op_prop_src1_no_x[GET_IW_OP(Iw)] || \
    (IS_OPX_INST(Iw) && opx_prop_src1_no_x[GET_IW_OPX(Iw)])))

#ifndef ALT_ASM_SRC
extern unsigned char op_prop_src1_no_x[64];
#endif /* ALT_ASM_SRC */

#ifndef ALT_ASM_SRC
extern unsigned char opx_prop_src1_no_x[64];
#endif /* ALT_ASM_SRC */

#define IW_PROP_SRC2_NO_X(Iw) ( \
    (op_prop_src2_no_x[GET_IW_OP(Iw)] || \
    (IS_OPX_INST(Iw) && opx_prop_src2_no_x[GET_IW_OPX(Iw)])))

#ifndef ALT_ASM_SRC
extern unsigned char op_prop_src2_no_x[64];
#endif /* ALT_ASM_SRC */

#ifndef ALT_ASM_SRC
extern unsigned char opx_prop_src2_no_x[64];
#endif /* ALT_ASM_SRC */


/* Instruction types */
#define INST_TYPE_OP  0
#define INST_TYPE_OPX 1

/* Canonical instruction codes independent of encoding */
#define CALL_INST_CODE 0
#define JMPI_INST_CODE 1
#define LDBU_INST_CODE 2
#define ADDI_INST_CODE 3
#define STB_INST_CODE 4
#define BR_INST_CODE 5
#define LDB_INST_CODE 6
#define CMPGEI_INST_CODE 7
#define LDHU_INST_CODE 8
#define ANDI_INST_CODE 9
#define STH_INST_CODE 10
#define BGE_INST_CODE 11
#define LDH_INST_CODE 12
#define CMPLTI_INST_CODE 13
#define INITDA_INST_CODE 14
#define ORI_INST_CODE 15
#define STW_INST_CODE 16
#define BLT_INST_CODE 17
#define LDW_INST_CODE 18
#define CMPNEI_INST_CODE 19
#define FLUSHDA_INST_CODE 20
#define XORI_INST_CODE 21
#define STC_INST_CODE 22
#define BNE_INST_CODE 23
#define LDL_INST_CODE 24
#define CMPEQI_INST_CODE 25
#define LDBUIO_INST_CODE 26
#define MULI_INST_CODE 27
#define STBIO_INST_CODE 28
#define BEQ_INST_CODE 29
#define LDBIO_INST_CODE 30
#define CMPGEUI_INST_CODE 31
#define LDHUIO_INST_CODE 32
#define ANDHI_INST_CODE 33
#define STHIO_INST_CODE 34
#define BGEU_INST_CODE 35
#define LDHIO_INST_CODE 36
#define CMPLTUI_INST_CODE 37
#define CUSTOM_INST_CODE 38
#define INITD_INST_CODE 39
#define ORHI_INST_CODE 40
#define STWIO_INST_CODE 41
#define BLTU_INST_CODE 42
#define LDWIO_INST_CODE 43
#define RDPRS_INST_CODE 44
#define FLUSHD_INST_CODE 45
#define XORHI_INST_CODE 46
#define ERET_INST_CODE 47
#define ROLI_INST_CODE 48
#define ROL_INST_CODE 49
#define FLUSHP_INST_CODE 50
#define RET_INST_CODE 51
#define NOR_INST_CODE 52
#define MULXUU_INST_CODE 53
#define CMPGE_INST_CODE 54
#define BRET_INST_CODE 55
#define ROR_INST_CODE 56
#define FLUSHI_INST_CODE 57
#define JMP_INST_CODE 58
#define AND_INST_CODE 59
#define CMPLT_INST_CODE 60
#define SLLI_INST_CODE 61
#define SLL_INST_CODE 62
#define WRPRS_INST_CODE 63
#define OR_INST_CODE 64
#define MULXSU_INST_CODE 65
#define CMPNE_INST_CODE 66
#define SRLI_INST_CODE 67
#define SRL_INST_CODE 68
#define NEXTPC_INST_CODE 69
#define CALLR_INST_CODE 70
#define XOR_INST_CODE 71
#define MULXSS_INST_CODE 72
#define CMPEQ_INST_CODE 73
#define DIVU_INST_CODE 74
#define DIV_INST_CODE 75
#define RDCTL_INST_CODE 76
#define MUL_INST_CODE 77
#define CMPGEU_INST_CODE 78
#define INITI_INST_CODE 79
#define TRAP_INST_CODE 80
#define WRCTL_INST_CODE 81
#define CMPLTU_INST_CODE 82
#define ADD_INST_CODE 83
#define BREAK_INST_CODE 84
#define HBREAK_INST_CODE 85
#define SYNC_INST_CODE 86
#define SUB_INST_CODE 87
#define SRAI_INST_CODE 88
#define SRA_INST_CODE 89
#define INTR_INST_CODE 90
#define CRST_INST_CODE 91
#define RSV_INST_CODE 92
#define NUM_NIOS2_INST_CODES 93

#ifndef ALT_ASM_SRC
/* Instruction information entry */
typedef struct {
     const char* name;     /* Assembly-language instruction name */
     int         instType; /* INST_TYPE_OP or INST_TYPE_OPX */
     unsigned    opcode;   /* Value of instruction word OP/OPX field */
} Nios2InstInfo;

extern Nios2InstInfo nios2InstInfo[NUM_NIOS2_INST_CODES];
#endif /* ALT_ASM_SRC */

/* Returns the instruction code given the 32-bit instruction word */
#define GET_INST_CODE(Iw) \
         (IS_OPX_INST(Iw) ? opxToInstCode[GET_IW_OPX(Iw)] : opToInstCode[GET_IW_OP(Iw)])

#ifndef ALT_ASM_SRC
extern int opToInstCode[64];
extern int opxToInstCode[64];
#endif /* ALT_ASM_SRC */

/* MMU Constants */
#define MMU_ADDR_BYPASS_TLB 0x3
#define MMU_ADDR_BYPASS_TLB_CACHEABLE 0x0
#define MMU_ADDR_IO_REGION 0x7
#define MMU_ADDR_IO_REGION_VPN 0xe0000
#define MMU_ADDR_KERNEL_MMU_REGION 0x2
#define MMU_ADDR_KERNEL_REGION 0x6
#define MMU_ADDR_KERNEL_REGION_INT 6
#define MMU_ADDR_USER_REGION 0x0
#define TLB_MAX_ENTRIES 1024
#define TLB_MAX_LINES 128
#define TLB_MAX_PID_SZ 14
#define TLB_MAX_PTR_SZ 10
#define TLB_MAX_WAYS 16
#define TLB_MIN_PID_SZ 8
#define TLB_MIN_PTR_SZ 7
#define TLB_MIN_WAYS 8
#define UDTLB_INDEX_SZ 3
#define UITLB_INDEX_SZ 3

/*
 * MMU address bit field macros
 */
#define MMU_ADDR_VPN_LSB 12
#define MMU_ADDR_VPN_MSB 31
#define MMU_ADDR_VPN_SZ 20
#define MMU_ADDR_VPN_UNSHIFTED_MASK 0xfffff
#define MMU_ADDR_VPN_SHIFTED_MASK 0xfffff000
#define MMU_ADDR_VPN_MASK (MMU_ADDR_VPN_UNSHIFTED_MASK)
#define GET_MMU_ADDR_VPN(Addr) \
    (((Addr) >> MMU_ADDR_VPN_LSB) & MMU_ADDR_VPN_UNSHIFTED_MASK)
#define SET_MMU_ADDR_VPN(Addr, Val) \
    Addr = (((Addr) & (~MMU_ADDR_VPN_SHIFTED_MASK)) | \
         (((Val) & MMU_ADDR_VPN_UNSHIFTED_MASK) << MMU_ADDR_VPN_LSB))
#define MMU_ADDR_PFN_LSB 12
#define MMU_ADDR_PFN_MSB 31
#define MMU_ADDR_PFN_SZ 20
#define MMU_ADDR_PFN_UNSHIFTED_MASK 0xfffff
#define MMU_ADDR_PFN_SHIFTED_MASK 0xfffff000
#define MMU_ADDR_PFN_MASK (MMU_ADDR_PFN_UNSHIFTED_MASK)
#define GET_MMU_ADDR_PFN(Addr) \
    (((Addr) >> MMU_ADDR_PFN_LSB) & MMU_ADDR_PFN_UNSHIFTED_MASK)
#define SET_MMU_ADDR_PFN(Addr, Val) \
    Addr = (((Addr) & (~MMU_ADDR_PFN_SHIFTED_MASK)) | \
         (((Val) & MMU_ADDR_PFN_UNSHIFTED_MASK) << MMU_ADDR_PFN_LSB))
#define MMU_ADDR_PAGE_OFFSET_LSB 0
#define MMU_ADDR_PAGE_OFFSET_MSB 11
#define MMU_ADDR_PAGE_OFFSET_SZ 12
#define MMU_ADDR_PAGE_OFFSET_UNSHIFTED_MASK 0xfff
#define MMU_ADDR_PAGE_OFFSET_SHIFTED_MASK 0xfff
#define MMU_ADDR_PAGE_OFFSET_MASK (MMU_ADDR_PAGE_OFFSET_UNSHIFTED_MASK)
#define GET_MMU_ADDR_PAGE_OFFSET(Addr) \
    (((Addr) >> MMU_ADDR_PAGE_OFFSET_LSB) & MMU_ADDR_PAGE_OFFSET_UNSHIFTED_MASK)
#define SET_MMU_ADDR_PAGE_OFFSET(Addr, Val) \
    Addr = (((Addr) & (~MMU_ADDR_PAGE_OFFSET_SHIFTED_MASK)) | \
         (((Val) & MMU_ADDR_PAGE_OFFSET_UNSHIFTED_MASK) << MMU_ADDR_PAGE_OFFSET_LSB))
#define MMU_ADDR_USER_REGION_LSB 31
#define MMU_ADDR_USER_REGION_MSB 31
#define MMU_ADDR_USER_REGION_SZ 1
#define MMU_ADDR_USER_REGION_UNSHIFTED_MASK 0x1
#define MMU_ADDR_USER_REGION_SHIFTED_MASK 0x80000000
#define MMU_ADDR_USER_REGION_MASK (MMU_ADDR_USER_REGION_UNSHIFTED_MASK)
#define GET_MMU_ADDR_USER_REGION(Addr) \
    (((Addr) >> MMU_ADDR_USER_REGION_LSB) & MMU_ADDR_USER_REGION_UNSHIFTED_MASK)
#define SET_MMU_ADDR_USER_REGION(Addr, Val) \
    Addr = (((Addr) & (~MMU_ADDR_USER_REGION_SHIFTED_MASK)) | \
         (((Val) & MMU_ADDR_USER_REGION_UNSHIFTED_MASK) << MMU_ADDR_USER_REGION_LSB))
#define MMU_ADDR_KERNEL_MMU_REGION_LSB 30
#define MMU_ADDR_KERNEL_MMU_REGION_MSB 31
#define MMU_ADDR_KERNEL_MMU_REGION_SZ 2
#define MMU_ADDR_KERNEL_MMU_REGION_UNSHIFTED_MASK 0x3
#define MMU_ADDR_KERNEL_MMU_REGION_SHIFTED_MASK 0xc0000000
#define MMU_ADDR_KERNEL_MMU_REGION_MASK (MMU_ADDR_KERNEL_MMU_REGION_UNSHIFTED_MASK)
#define GET_MMU_ADDR_KERNEL_MMU_REGION(Addr) \
    (((Addr) >> MMU_ADDR_KERNEL_MMU_REGION_LSB) & MMU_ADDR_KERNEL_MMU_REGION_UNSHIFTED_MASK)
#define SET_MMU_ADDR_KERNEL_MMU_REGION(Addr, Val) \
    Addr = (((Addr) & (~MMU_ADDR_KERNEL_MMU_REGION_SHIFTED_MASK)) | \
         (((Val) & MMU_ADDR_KERNEL_MMU_REGION_UNSHIFTED_MASK) << MMU_ADDR_KERNEL_MMU_REGION_LSB))
#define MMU_ADDR_KERNEL_REGION_LSB 29
#define MMU_ADDR_KERNEL_REGION_MSB 31
#define MMU_ADDR_KERNEL_REGION_SZ 3
#define MMU_ADDR_KERNEL_REGION_UNSHIFTED_MASK 0x7
#define MMU_ADDR_KERNEL_REGION_SHIFTED_MASK 0xe0000000
#define MMU_ADDR_KERNEL_REGION_MASK (MMU_ADDR_KERNEL_REGION_UNSHIFTED_MASK)
#define GET_MMU_ADDR_KERNEL_REGION(Addr) \
    (((Addr) >> MMU_ADDR_KERNEL_REGION_LSB) & MMU_ADDR_KERNEL_REGION_UNSHIFTED_MASK)
#define SET_MMU_ADDR_KERNEL_REGION(Addr, Val) \
    Addr = (((Addr) & (~MMU_ADDR_KERNEL_REGION_SHIFTED_MASK)) | \
         (((Val) & MMU_ADDR_KERNEL_REGION_UNSHIFTED_MASK) << MMU_ADDR_KERNEL_REGION_LSB))
#define MMU_ADDR_IO_REGION_LSB 29
#define MMU_ADDR_IO_REGION_MSB 31
#define MMU_ADDR_IO_REGION_SZ 3
#define MMU_ADDR_IO_REGION_UNSHIFTED_MASK 0x7
#define MMU_ADDR_IO_REGION_SHIFTED_MASK 0xe0000000
#define MMU_ADDR_IO_REGION_MASK (MMU_ADDR_IO_REGION_UNSHIFTED_MASK)
#define GET_MMU_ADDR_IO_REGION(Addr) \
    (((Addr) >> MMU_ADDR_IO_REGION_LSB) & MMU_ADDR_IO_REGION_UNSHIFTED_MASK)
#define SET_MMU_ADDR_IO_REGION(Addr, Val) \
    Addr = (((Addr) & (~MMU_ADDR_IO_REGION_SHIFTED_MASK)) | \
         (((Val) & MMU_ADDR_IO_REGION_UNSHIFTED_MASK) << MMU_ADDR_IO_REGION_LSB))
#define MMU_ADDR_BYPASS_TLB_LSB 30
#define MMU_ADDR_BYPASS_TLB_MSB 31
#define MMU_ADDR_BYPASS_TLB_SZ 2
#define MMU_ADDR_BYPASS_TLB_UNSHIFTED_MASK 0x3
#define MMU_ADDR_BYPASS_TLB_SHIFTED_MASK 0xc0000000
#define MMU_ADDR_BYPASS_TLB_MASK (MMU_ADDR_BYPASS_TLB_UNSHIFTED_MASK)
#define GET_MMU_ADDR_BYPASS_TLB(Addr) \
    (((Addr) >> MMU_ADDR_BYPASS_TLB_LSB) & MMU_ADDR_BYPASS_TLB_UNSHIFTED_MASK)
#define SET_MMU_ADDR_BYPASS_TLB(Addr, Val) \
    Addr = (((Addr) & (~MMU_ADDR_BYPASS_TLB_SHIFTED_MASK)) | \
         (((Val) & MMU_ADDR_BYPASS_TLB_UNSHIFTED_MASK) << MMU_ADDR_BYPASS_TLB_LSB))
#define MMU_ADDR_BYPASS_TLB_CACHEABLE_LSB 29
#define MMU_ADDR_BYPASS_TLB_CACHEABLE_MSB 29
#define MMU_ADDR_BYPASS_TLB_CACHEABLE_SZ 1
#define MMU_ADDR_BYPASS_TLB_CACHEABLE_UNSHIFTED_MASK 0x1
#define MMU_ADDR_BYPASS_TLB_CACHEABLE_SHIFTED_MASK 0x20000000
#define MMU_ADDR_BYPASS_TLB_CACHEABLE_MASK (MMU_ADDR_BYPASS_TLB_CACHEABLE_UNSHIFTED_MASK)
#define GET_MMU_ADDR_BYPASS_TLB_CACHEABLE(Addr) \
    (((Addr) >> MMU_ADDR_BYPASS_TLB_CACHEABLE_LSB) & MMU_ADDR_BYPASS_TLB_CACHEABLE_UNSHIFTED_MASK)
#define SET_MMU_ADDR_BYPASS_TLB_CACHEABLE(Addr, Val) \
    Addr = (((Addr) & (~MMU_ADDR_BYPASS_TLB_CACHEABLE_SHIFTED_MASK)) | \
         (((Val) & MMU_ADDR_BYPASS_TLB_CACHEABLE_UNSHIFTED_MASK) << MMU_ADDR_BYPASS_TLB_CACHEABLE_LSB))
#define MMU_ADDR_BYPASS_TLB_PADDR_LSB 0
#define MMU_ADDR_BYPASS_TLB_PADDR_MSB 28
#define MMU_ADDR_BYPASS_TLB_PADDR_SZ 29
#define MMU_ADDR_BYPASS_TLB_PADDR_UNSHIFTED_MASK 0x1fffffff
#define MMU_ADDR_BYPASS_TLB_PADDR_SHIFTED_MASK 0x1fffffff
#define MMU_ADDR_BYPASS_TLB_PADDR_MASK (MMU_ADDR_BYPASS_TLB_PADDR_UNSHIFTED_MASK)
#define GET_MMU_ADDR_BYPASS_TLB_PADDR(Addr) \
    (((Addr) >> MMU_ADDR_BYPASS_TLB_PADDR_LSB) & MMU_ADDR_BYPASS_TLB_PADDR_UNSHIFTED_MASK)
#define SET_MMU_ADDR_BYPASS_TLB_PADDR(Addr, Val) \
    Addr = (((Addr) & (~MMU_ADDR_BYPASS_TLB_PADDR_SHIFTED_MASK)) | \
         (((Val) & MMU_ADDR_BYPASS_TLB_PADDR_UNSHIFTED_MASK) << MMU_ADDR_BYPASS_TLB_PADDR_LSB))

/*
 * MMU Memory Region Macros
 */
#define USER_REGION_MIN_VADDR       0x00000000
#define USER_REGION_MAX_VADDR       0x7fffffff
#define KERNEL_MMU_REGION_MIN_VADDR 0x80000000
#define KERNEL_MMU_REGION_MAX_VADDR 0xbfffffff
#define KERNEL_REGION_MIN_VADDR     0xc0000000
#define KERNEL_REGION_MAX_VADDR     0xdfffffff
#define IO_REGION_MIN_VADDR         0xe0000000
#define IO_REGION_MAX_VADDR         0xffffffff

#define MMU_PAGE_SIZE (0x1 << (MMU_ADDR_PAGE_OFFSET_SZ))

#define isMmuUserRegion(Vaddr)          \
    (GET_MMU_ADDR_USER_REGION(Vaddr) == MMU_ADDR_USER_REGION)
#define isMmuKernelMmuRegion(Vaddr)     \
    (GET_MMU_ADDR_KERNEL_MMU_REGION(Vaddr) == MMU_ADDR_KERNEL_MMU_REGION)
#define isMmuKernelRegion(Vaddr)        \
    (GET_MMU_ADDR_KERNEL_REGION(Vaddr) == MMU_ADDR_KERNEL_REGION)
#define isMmuIORegion(Vaddr)            \
    (GET_MMU_ADDR_IO_REGION(Vaddr) == MMU_ADDR_IO_REGION)

/* Does this virtual address bypass the TLB? */
#define vaddrBypassTlb(Vaddr)                \
    (GET_MMU_ADDR_BYPASS_TLB(Vaddr) == MMU_ADDR_BYPASS_TLB)

/* If TLB is bypassed, is the address cacheable or uncachable. */
#define vaddrBypassTlbCacheable(Vaddr)       \
    (GET_MMU_ADDR_BYPASS_TLB_CACHEABLE(Vaddr) == MMU_ADDR_BYPASS_TLB_CACHEABLE)

/*
 * Compute physical address for regions that bypass the TLB.
 * Just need to clear some top bits.
 */
#define bypassTlbVaddrToPaddr(Vaddr)    \
    ((Vaddr) & (MMU_ADDR_BYPASS_TLB_PADDR_MASK << MMU_ADDR_BYPASS_TLB_PADDR_LSB))

/* 
 * Will the physical address fit in the Kernel/IO region virtual address space?
 */
#define fitsInKernelRegion(Paddr)       \
    (GET_MMU_ADDR_KERNEL_REGION(Paddr) == 0)
#define fitsInIORegion(Paddr)           \
    (GET_MMU_ADDR_IO_REGION(Paddr) == 0)

/* Convert a physical address to a Kernel/IO region virtual address. */
#define paddrToKernelRegionVaddr(Paddr) \
    ((Paddr) | (MMU_ADDR_KERNEL_REGION << MMU_ADDR_KERNEL_REGION_LSB))
#define paddrToIORegionVaddr(Paddr)     \
    ((Paddr) | (MMU_ADDR_IO_REGION << MMU_ADDR_IO_REGION_LSB))

/*
 * Convert a virtual address to a Kernel/IO region virtual address.
 * Uses bypassTlbVaddrToPaddr to clear top bits.
 */
#define vaddrToKernelRegionVaddr(Vaddr) \
    paddrToKernelRegionVaddr(bypassTlbVaddrToPaddr(Vaddr))
#define vaddrToIORegionVaddr(Vaddr) \
    paddrToIORegionVaddr(bypassTlbVaddrToPaddr(Vaddr))

/* Convert between VPN/PFN and virtual/physical addresses. */
#define vpnToVaddr(Vpn) ((Vpn) << MMU_ADDR_VPN_LSB)
#define pfnToPaddr(Pfn) ((Pfn) << MMU_ADDR_PFN_LSB)
#define vaddrToVpn(Vaddr) GET_MMU_ADDR_VPN(Vaddr)
#define paddrToPfn(Paddr) GET_MMU_ADDR_PFN(Paddr)

/* Bitwise OR with a KERNEL region address to make it an IO region address */
#define KERNEL_TO_IO_REGION 0x20000000

/* MPU Constants */
#define MPU_DATA_PERM_SUPER_NONE_USER_NONE 0
#define MPU_DATA_PERM_SUPER_RD_USER_NONE 1
#define MPU_DATA_PERM_SUPER_RD_USER_RD 2
#define MPU_DATA_PERM_SUPER_RW_USER_NONE 4
#define MPU_DATA_PERM_SUPER_RW_USER_RD 5
#define MPU_DATA_PERM_SUPER_RW_USER_RW 6
#define MPU_DATA_PERM_SZ 3
#define MPU_INST_PERM_SUPER_EXEC_USER_EXEC 2
#define MPU_INST_PERM_SUPER_EXEC_USER_NONE 1
#define MPU_INST_PERM_SUPER_NONE_USER_NONE 0
#define MPU_INST_PERM_SZ 2
#define MPU_MAX_REGION_SIZE_LOG2 20
#define MPU_MAX_REGIONS 32
#define MPU_MIN_REGION_SIZE_LOG2 6
#define MPU_MIN_REGIONS 1
#define MPU_USE_LIMIT 1

/*
 * The Nios II is configured with the MPU using the limit instead of
 * the mask.  Provide missing defines for the mask (same as the base).
 */
#define MPUACC_REG_MASK_LSB (MPUBASE_REG_BASE_LSB)
#define MPUACC_REG_MASK_MSB (MPUBASE_REG_BASE_MSB)
#define MPUACC_REG_MASK_SZ (MPUBASE_REG_BASE_SZ)
#define MPUACC_REG_MASK_UNSHIFTED_MASK (MPUBASE_REG_BASE_UNSHIFTED_MASK)
#define MPUACC_REG_MASK_SHIFTED_MASK (MPUBASE_REG_BASE_SHIFTED_MASK)
#define MPUACC_REG_MASK_MASK (MPUBASE_REG_BASE_MASK)
#define SET_MPUACC_REG_MASK(Reg, Val) SET_MPUBASE_REG_BASE(Reg, Val)
#define GET_MPUACC_REG_MASK(Reg) GET_MPUBASE_REG_BASE(Reg)

/* Exception Constants */
#define BREAK_INST_EXC_ID 8
#define CPU_RESET_CAUSE_CODE 1
#define CPU_RESET_EXC_ID 1
#define DIV_ERROR_CAUSE_CODE 8
#define DIV_ERROR_EXC_ID 11
#define EMPTY_SLAVE_DATA_ACCESS_ERROR_CAUSE_CODE 30
#define EMPTY_SLAVE_DATA_ACCESS_ERROR_EXC_ID 23
#define EMPTY_SLAVE_INST_ACCESS_ERROR_CAUSE_CODE 29
#define EMPTY_SLAVE_INST_ACCESS_ERROR_EXC_ID 22
#define EXT_INTR_EXC_ID 3
#define HBREAK_EXC_ID 2
#define ILLEGAL_INST_CAUSE_CODE 5
#define ILLEGAL_INST_EXC_ID 7
#define MAX_CAUSE_CODE 31
#define MISALIGNED_DATA_ADDR_CAUSE_CODE 6
#define MISALIGNED_DATA_ADDR_EXC_ID 9
#define MISALIGNED_TARGET_PC_CAUSE_CODE 7
#define MISALIGNED_TARGET_PC_EXC_ID 10
#define MPU_DATA_REGION_VIOLATION_CAUSE_CODE 17
#define MPU_DATA_REGION_VIOLATION_EXC_ID 21
#define MPU_INST_REGION_VIOLATION_CAUSE_CODE 16
#define MPU_INST_REGION_VIOLATION_EXC_ID 20
#define NONE_EXC_ID 0
#define NORM_INTR_CAUSE_CODE 2
#define NORM_INTR_EXC_ID 4
#define NUM_EXC_IDS 25
#define READONLY_SLAVE_DATA_ACCESS_ERROR_CAUSE_CODE 31
#define READONLY_SLAVE_DATA_ACCESS_ERROR_EXC_ID 24
#define RECORD_DATA_ADDR 2
#define RECORD_NOTHING 0
#define RECORD_TARGET_PCB 1
#define RESET_CAUSE_CODE 0
#define SUPERVISOR_DATA_ADDR_CAUSE_CODE 11
#define SUPERVISOR_DATA_ADDR_EXC_ID 14
#define SUPERVISOR_INST_ADDR_CAUSE_CODE 9
#define SUPERVISOR_INST_ADDR_EXC_ID 12
#define SUPERVISOR_INST_CAUSE_CODE 10
#define SUPERVISOR_INST_EXC_ID 13
#define TLB_DATA_MISS_EXC_ID 16
#define TLB_INST_MISS_EXC_ID 15
#define TLB_MISS_CAUSE_CODE 12
#define TLB_R_PERM_CAUSE_CODE 14
#define TLB_R_PERM_EXC_ID 18
#define TLB_W_PERM_CAUSE_CODE 15
#define TLB_W_PERM_EXC_ID 19
#define TLB_X_PERM_CAUSE_CODE 13
#define TLB_X_PERM_EXC_ID 17
#define TRAP_INST_CAUSE_CODE 3
#define TRAP_INST_EXC_ID 5
#define UNIMP_INST_CAUSE_CODE 4
#define UNIMP_INST_EXC_ID 6

/* Exception Information */
#ifndef ALT_ASM_SRC
typedef struct {
    const char* name;
    int priority;
    int subPriority; /* -1 if none */
    int causeId; /* -1 if none */
    int recordAddr;
} ExcInfo;

extern ExcInfo excInfo[NUM_EXC_IDS];
#endif /* ALT_ASM_SRC */

#endif /* _NIOS2_ISA_H_ */
